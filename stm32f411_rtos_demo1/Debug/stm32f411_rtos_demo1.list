
stm32f411_rtos_demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f9c  08007f9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa4  08007fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000146c8  20000070  0800801c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014738  0800801c  00024738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8d8  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f44  00000000  00000000  0003b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  0003f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c1  00000000  00000000  000413c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af30  00000000  00000000  00042881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203f0  00000000  00000000  0005d7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3280  00000000  00000000  0007dba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a0  00000000  00000000  00120e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b1  00000000  00000000  001285c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e30 	.word	0x08007e30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007e30 	.word	0x08007e30

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013014 	.word	0x20013014

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fd0b 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f857 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f94f 	bl	8000820 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000582:	f000 f8bb 	bl	80006fc <MX_I2C1_Init>
  MX_I2S2_Init();
 8000586:	f000 f8e7 	bl	8000758 <MX_I2S2_Init>
  MX_SPI1_Init();
 800058a:	f000 f913 	bl	80007b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //enable CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <main+0xa0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a1f      	ldr	r2, [pc, #124]	; (8000610 <main+0xa0>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800059a:	f005 f961 	bl	8005860 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800059e:	f006 fa13 	bl	80069c8 <SEGGER_SYSVIEW_Start>

  task_status = xTaskCreate(task1_handler, "Task_1", 200, "Hello world from task 1", 2, &task1_handle);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <main+0xa4>)
 80005ae:	22c8      	movs	r2, #200	; 0xc8
 80005b0:	4919      	ldr	r1, [pc, #100]	; (8000618 <main+0xa8>)
 80005b2:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0xac>)
 80005b4:	f003 fa60 	bl	8003a78 <xTaskCreate>
 80005b8:	6178      	str	r0, [r7, #20]
  configASSERT( task_status == pdPASS);
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00a      	beq.n	80005d6 <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d2:	bf00      	nop
 80005d4:	e7fe      	b.n	80005d4 <main+0x64>
  task_status = xTaskCreate(task2_handler, "Task_2", 200, "Hello world from task 2", 2, &task2_handle);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <main+0xb0>)
 80005e0:	22c8      	movs	r2, #200	; 0xc8
 80005e2:	4910      	ldr	r1, [pc, #64]	; (8000624 <main+0xb4>)
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <main+0xb8>)
 80005e6:	f003 fa47 	bl	8003a78 <xTaskCreate>
 80005ea:	6178      	str	r0, [r7, #20]
  configASSERT( task_status == pdPASS);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <main+0x98>
        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	60fb      	str	r3, [r7, #12]
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <main+0x96>

  /*start freeRTOS scheduler*/
  vTaskStartScheduler();
 8000608:	f003 fbbe 	bl	8003d88 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x9c>
 800060e:	bf00      	nop
 8000610:	e0001000 	.word	0xe0001000
 8000614:	08007e48 	.word	0x08007e48
 8000618:	08007e60 	.word	0x08007e60
 800061c:	08000a55 	.word	0x08000a55
 8000620:	08007e68 	.word	0x08007e68
 8000624:	08007e80 	.word	0x08007e80
 8000628:	08000a65 	.word	0x08000a65

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f007 f940 	bl	80078c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <SystemClock_Config+0xc8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemClock_Config+0xcc>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 11;
 80006a8:	230b      	movs	r3, #11
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fd13 	bl	80020dc <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f9ec 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ff75 	bl	80025cc <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e8:	f000 f9d6 	bl	8000a98 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f000 feeb 	bl	8001514 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f9a8 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2S2_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2S2_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2S2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2S2_Init+0x50>)
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <MX_I2S2_Init+0x58>)
 8000780:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2S2_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000790:	2201      	movs	r2, #1
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2S2_Init+0x50>)
 8000796:	f001 f801 	bl	800179c <HAL_I2S_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f97a 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	40003800 	.word	0x40003800
 80007b0:	00017700 	.word	0x00017700

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f002 fa6f 	bl	8002ce8 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f942 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000128 	.word	0x20000128
 800081c:	40013000 	.word	0x40013000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b81      	ldr	r3, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x220>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a80      	ldr	r2, [pc, #512]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b7e      	ldr	r3, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b7a      	ldr	r3, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a79      	ldr	r2, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x220>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b77      	ldr	r3, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b73      	ldr	r3, [pc, #460]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <MX_GPIO_Init+0x220>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x220>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a64      	ldr	r2, [pc, #400]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a5d      	ldr	r2, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x220>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4858      	ldr	r0, [pc, #352]	; (8000a44 <MX_GPIO_Init+0x224>)
 80008e4:	f000 fdfc 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4856      	ldr	r0, [pc, #344]	; (8000a48 <MX_GPIO_Init+0x228>)
 80008ee:	f000 fdf7 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f8:	4854      	ldr	r0, [pc, #336]	; (8000a4c <MX_GPIO_Init+0x22c>)
 80008fa:	f000 fdf1 	bl	80014e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	484c      	ldr	r0, [pc, #304]	; (8000a44 <MX_GPIO_Init+0x224>)
 8000912:	f000 fc61 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x224>)
 800092e:	f000 fc53 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000932:	2332      	movs	r3, #50	; 0x32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000936:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	483f      	ldr	r0, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x224>)
 8000948:	f000 fc46 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4839      	ldr	r0, [pc, #228]	; (8000a48 <MX_GPIO_Init+0x228>)
 8000964:	f000 fc38 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4834      	ldr	r0, [pc, #208]	; (8000a50 <MX_GPIO_Init+0x230>)
 800097e:	f000 fc2b 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000982:	2310      	movs	r3, #16
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <MX_GPIO_Init+0x230>)
 800099e:	f000 fc1b 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x22c>)
 80009bc:	f000 fc0c 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d2:	2306      	movs	r3, #6
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481a      	ldr	r0, [pc, #104]	; (8000a48 <MX_GPIO_Init+0x228>)
 80009de:	f000 fbfb 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <MX_GPIO_Init+0x230>)
 80009f8:	f000 fbee 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a0e:	230a      	movs	r3, #10
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x230>)
 8000a1a:	f000 fbdd 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x22c>)
 8000a32:	f000 fbd1 	bl	80011d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f006 fe3f 	bl	80076e0 <puts>
 8000a62:	e7fb      	b.n	8000a5c <task1_handler+0x8>

08000a64 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f006 fe37 	bl	80076e0 <puts>
 8000a72:	e7fb      	b.n	8000a6c <task2_handler+0x8>

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 faa5 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40000c00 	.word	0x40000c00

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ae2:	f004 fb39 	bl	8005158 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 fb42 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	; 0x40
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <HAL_I2S_MspInit+0x118>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d16c      	bne.n	8000c92 <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000bbc:	2332      	movs	r3, #50	; 0x32
 8000bbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 ff3b 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000bd8:	f7ff ff5e 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_I2S_MspInit+0x11c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c30:	2304      	movs	r3, #4
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c40:	2306      	movs	r3, #6
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <HAL_I2S_MspInit+0x120>)
 8000c4c:	f000 fac4 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c50:	2308      	movs	r3, #8
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c60:	2305      	movs	r3, #5
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <HAL_I2S_MspInit+0x120>)
 8000c6c:	f000 fab4 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c82:	2305      	movs	r3, #5
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <HAL_I2S_MspInit+0x124>)
 8000c8e:	f000 faa3 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3740      	adds	r7, #64	; 0x40
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d06:	23e0      	movs	r3, #224	; 0xe0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fa59 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <HAL_InitTick+0xe4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <HAL_InitTick+0xe4>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_InitTick+0xe4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d68:	f107 0210 	add.w	r2, r7, #16
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fe36 	bl	80029e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d82:	f001 fe1b 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8000d86:	6378      	str	r0, [r7, #52]	; 0x34
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d8a:	f001 fe17 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <HAL_InitTick+0xe8>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	0c9b      	lsrs	r3, r3, #18
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_InitTick+0xec>)
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_InitTick+0xf0>)
 8000da6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_InitTick+0xec>)
 8000daa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_InitTick+0xec>)
 8000db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_InitTick+0xec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_InitTick+0xec>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_InitTick+0xec>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <HAL_InitTick+0xec>)
 8000dca:	f002 f816 	bl	8002dfa <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d11b      	bne.n	8000e14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <HAL_InitTick+0xec>)
 8000dde:	f002 f865 	bl	8002eac <HAL_TIM_Base_Start_IT>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000de8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d111      	bne.n	8000e14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000df0:	2032      	movs	r0, #50	; 0x32
 8000df2:	f000 f9e3 	bl	80011bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d808      	bhi.n	8000e0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f000 f9bf 	bl	8001184 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_InitTick+0xf4>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e002      	b.n	8000e14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3738      	adds	r7, #56	; 0x38
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	431bde83 	.word	0x431bde83
 8000e28:	20000180 	.word	0x20000180
 8000e2c:	40000c00 	.word	0x40000c00
 8000e30:	20000004 	.word	0x20000004

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM5_IRQHandler+0x10>)
 8000e66:	f002 f883 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000180 	.word	0x20000180

08000e74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
  }

  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f006 fce5 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff faff 	bl	8000570 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f80:	08007fac 	.word	0x08007fac
  ldr r2, =_sbss
 8000f84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f88:	20014738 	.word	0x20014738

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f8d8 	bl	800116e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff febc 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fd6e 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	200001c8 	.word	0x200001c8

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001c8 	.word	0x200001c8

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff4c 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001196:	f7ff ff61 	bl	800105c <__NVIC_GetPriorityGrouping>
 800119a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff ffb1 	bl	8001108 <NVIC_EncodePriority>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff80 	bl	80010b4 <__NVIC_SetPriority>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff54 	bl	8001078 <__NVIC_EnableIRQ>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e159      	b.n	80014a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 8148 	bne.w	80014a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a2 	beq.w	80014a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a56      	ldr	r2, [pc, #344]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_GPIO_Init+0x2ec>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x202>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_GPIO_Init+0x2f4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1fe>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_GPIO_Init+0x2f8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_GPIO_Init+0x2fc>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1f6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_GPIO_Init+0x300>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1f2>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ca:	2307      	movs	r3, #7
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x2ec>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_GPIO_Init+0x304>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x304>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_GPIO_Init+0x304>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_GPIO_Init+0x304>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_GPIO_Init+0x304>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001472:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <HAL_GPIO_Init+0x304>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x304>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_GPIO_Init+0x304>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f aea2 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e12b      	b.n	800177e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fada 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001578:	f001 fa20 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a81      	ldr	r2, [pc, #516]	; (8001788 <HAL_I2C_Init+0x274>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d807      	bhi.n	8001598 <HAL_I2C_Init+0x84>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a80      	ldr	r2, [pc, #512]	; (800178c <HAL_I2C_Init+0x278>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e006      	b.n	80015a6 <HAL_I2C_Init+0x92>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a7d      	ldr	r2, [pc, #500]	; (8001790 <HAL_I2C_Init+0x27c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0e7      	b.n	800177e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a78      	ldr	r2, [pc, #480]	; (8001794 <HAL_I2C_Init+0x280>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a6a      	ldr	r2, [pc, #424]	; (8001788 <HAL_I2C_Init+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d802      	bhi.n	80015e8 <HAL_I2C_Init+0xd4>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	e009      	b.n	80015fc <HAL_I2C_Init+0xe8>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_I2C_Init+0x284>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	495c      	ldr	r1, [pc, #368]	; (8001788 <HAL_I2C_Init+0x274>)
 8001618:	428b      	cmp	r3, r1
 800161a:	d819      	bhi.n	8001650 <HAL_I2C_Init+0x13c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e59      	subs	r1, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fbb1 f3f3 	udiv	r3, r1, r3
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001630:	400b      	ands	r3, r1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00a      	beq.n	800164c <HAL_I2C_Init+0x138>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fbb1 f3f3 	udiv	r3, r1, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	e051      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 800164c:	2304      	movs	r3, #4
 800164e:	e04f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_I2C_Init+0x168>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e012      	b.n	80016a2 <HAL_I2C_Init+0x18e>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	0099      	lsls	r1, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x196>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e022      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10e      	bne.n	80016d0 <HAL_I2C_Init+0x1bc>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1e58      	subs	r0, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	440b      	add	r3, r1
 80016c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	e00f      	b.n	80016f0 <HAL_I2C_Init+0x1dc>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e58      	subs	r0, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	0099      	lsls	r1, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	6809      	ldr	r1, [r1, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6911      	ldr	r1, [r2, #16]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68d2      	ldr	r2, [r2, #12]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	000186a0 	.word	0x000186a0
 800178c:	001e847f 	.word	0x001e847f
 8001790:	003d08ff 	.word	0x003d08ff
 8001794:	431bde83 	.word	0x431bde83
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e128      	b.n	8001a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a90      	ldr	r2, [pc, #576]	; (8001a08 <HAL_I2S_Init+0x26c>)
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff f9db 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017e4:	f023 030f 	bic.w	r3, r3, #15
 80017e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d060      	beq.n	80018bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001802:	2310      	movs	r3, #16
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e001      	b.n	800180c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b20      	cmp	r3, #32
 8001812:	d802      	bhi.n	800181a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800181a:	2001      	movs	r0, #1
 800181c:	f001 fa04 	bl	8002c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8001820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182a:	d125      	bne.n	8001878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	fbb2 f2f3 	udiv	r2, r2, r3
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	3305      	adds	r3, #5
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e01f      	b.n	8001896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	3305      	adds	r3, #5
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e00e      	b.n	8001896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	3305      	adds	r3, #5
 8001894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_I2S_Init+0x270>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e003      	b.n	80018c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d902      	bls.n	80018d0 <HAL_I2S_Init+0x134>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d907      	bls.n	80018e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e08f      	b.n	8001a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	ea42 0103 	orr.w	r1, r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018fe:	f023 030f 	bic.w	r3, r3, #15
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6851      	ldr	r1, [r2, #4]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6892      	ldr	r2, [r2, #8]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68d2      	ldr	r2, [r2, #12]
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6992      	ldr	r2, [r2, #24]
 8001916:	430a      	orrs	r2, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d161      	bne.n	80019f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_I2S_Init+0x274>)
 8001930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <HAL_I2S_Init+0x278>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_I2S_Init+0x1a4>
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_I2S_Init+0x27c>)
 800193e:	e001      	b.n	8001944 <HAL_I2S_Init+0x1a8>
 8001940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	4932      	ldr	r1, [pc, #200]	; (8001a14 <HAL_I2S_Init+0x278>)
 800194c:	428a      	cmp	r2, r1
 800194e:	d101      	bne.n	8001954 <HAL_I2S_Init+0x1b8>
 8001950:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <HAL_I2S_Init+0x27c>)
 8001952:	e001      	b.n	8001958 <HAL_I2S_Init+0x1bc>
 8001954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <HAL_I2S_Init+0x278>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_I2S_Init+0x1d4>
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_I2S_Init+0x27c>)
 800196e:	e001      	b.n	8001974 <HAL_I2S_Init+0x1d8>
 8001970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001974:	2202      	movs	r2, #2
 8001976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_I2S_Init+0x278>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_I2S_Init+0x1ea>
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_I2S_Init+0x27c>)
 8001984:	e001      	b.n	800198a <HAL_I2S_Init+0x1ee>
 8001986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d003      	beq.n	80019a0 <HAL_I2S_Init+0x204>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e001      	b.n	80019ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_I2S_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_I2S_Init+0x24c>
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_I2S_Init+0x27c>)
 80019e6:	e001      	b.n	80019ec <HAL_I2S_Init+0x250>
 80019e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ec:	897a      	ldrh	r2, [r7, #10]
 80019ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08001b13 	.word	0x08001b13
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	08001c29 	.word	0x08001c29
 8001a14:	40003800 	.word	0x40003800
 8001a18:	40003400 	.word	0x40003400

08001a1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c9a      	adds	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb8 	bl	8001a1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	1c9a      	adds	r2, r3, #2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff93 	bl	8001a30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d13a      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d109      	bne.n	8001b4c <I2S_IRQHandler+0x3a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d102      	bne.n	8001b4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb4 	bl	8001ab4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d126      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d11f      	bne.n	8001ba4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff50 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d136      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d109      	bne.n	8001bce <I2S_IRQHandler+0xbc>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d102      	bne.n	8001bce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff45 	bl	8001a58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d122      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d11b      	bne.n	8001c1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff13 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a92      	ldr	r2, [pc, #584]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c42:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c44:	e001      	b.n	8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c60:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c62:	e001      	b.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	d004      	beq.n	8001c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8099 	bne.w	8001db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f925 	bl	8001ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9c8 	bl	8002044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d13a      	bne.n	8001d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d035      	beq.n	8001d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cd4:	e001      	b.n	8001cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4969      	ldr	r1, [pc, #420]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ce2:	428b      	cmp	r3, r1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001ce6:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ce8:	e001      	b.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fe88 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	f040 80c3 	bne.w	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80bd 	beq.w	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d68:	e001      	b.n	8001d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4944      	ldr	r1, [pc, #272]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d101      	bne.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d7a:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d7c:	e001      	b.n	8001d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fe4a 	bl	8001a44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001db0:	e089      	b.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d107      	bne.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8be 	bl	8001f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8fd 	bl	8001fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d12f      	bne.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02a      	beq.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e16:	e001      	b.n	8001e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4919      	ldr	r1, [pc, #100]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e2a:	e001      	b.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0202 	orr.w	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fdfa 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d136      	bne.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d031      	beq.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e70:	e001      	b.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4902      	ldr	r1, [pc, #8]	; (8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e7e:	428b      	cmp	r3, r1
 8001e80:	d106      	bne.n	8001e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001e82:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e84:	e006      	b.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001e86:	bf00      	nop
 8001e88:	40003800 	.word	0x40003800
 8001e8c:	40003400 	.word	0x40003400
 8001e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fdc0 	bl	8001a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	e000      	b.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ec6:	bf00      	nop
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c99      	adds	r1, r3, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6251      	str	r1, [r2, #36]	; 0x24
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d113      	bne.n	8001f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffc9 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c99      	adds	r1, r3, #2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6251      	str	r1, [r2, #36]	; 0x24
 8001f5a:	8819      	ldrh	r1, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <I2SEx_TxISR_I2SExt+0x22>
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001f68:	e001      	b.n	8001f6e <I2SEx_TxISR_I2SExt+0x26>
 8001f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6e:	460a      	mov	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d121      	bne.n	8001fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <I2SEx_TxISR_I2SExt+0x50>
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001f96:	e001      	b.n	8001f9c <I2SEx_TxISR_I2SExt+0x54>
 8001f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d101      	bne.n	8001fac <I2SEx_TxISR_I2SExt+0x64>
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <I2SEx_TxISR_I2SExt+0x94>)
 8001faa:	e001      	b.n	8001fb0 <I2SEx_TxISR_I2SExt+0x68>
 8001fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff81 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40003800 	.word	0x40003800
 8001fdc:	40003400 	.word	0x40003400

08001fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68d8      	ldr	r0, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	1c99      	adds	r1, r3, #2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001ff8:	b282      	uxth	r2, r0
 8001ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d113      	bne.n	800203c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff4a 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <I2SEx_RxISR_I2SExt+0x16>
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002058:	e001      	b.n	800205e <I2SEx_RxISR_I2SExt+0x1a>
 800205a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205e:	68d8      	ldr	r0, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	1c99      	adds	r1, r3, #2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	62d1      	str	r1, [r2, #44]	; 0x2c
 800206a:	b282      	uxth	r2, r0
 800206c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <I2SEx_RxISR_I2SExt+0x50>
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002092:	e001      	b.n	8002098 <I2SEx_RxISR_I2SExt+0x54>
 8002094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	490d      	ldr	r1, [pc, #52]	; (80020d4 <I2SEx_RxISR_I2SExt+0x90>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d101      	bne.n	80020a8 <I2SEx_RxISR_I2SExt+0x64>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <I2SEx_RxISR_I2SExt+0x94>)
 80020a6:	e001      	b.n	80020ac <I2SEx_RxISR_I2SExt+0x68>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff03 	bl	8001ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003400 	.word	0x40003400

080020dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e267      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d075      	beq.n	80021e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d00c      	beq.n	8002120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210e:	2b08      	cmp	r3, #8
 8002110:	d112      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211e:	d10b      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05b      	beq.n	80021e4 <HAL_RCC_OscConfig+0x108>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d157      	bne.n	80021e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e242      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x74>
 8002142:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a75      	ldr	r2, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x98>
 800215a:	4b70      	ldr	r3, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6f      	ldr	r2, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6d      	ldr	r3, [pc, #436]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6c      	ldr	r2, [pc, #432]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002174:	4b69      	ldr	r3, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a68      	ldr	r2, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe ff32 	bl	8000ffc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe ff2e 	bl	8000ffc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e207      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xc0>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff1e 	bl	8000ffc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe ff1a 	bl	8000ffc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1f3      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0xe8>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1c7      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4937      	ldr	r1, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_OscConfig+0x244>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fed3 	bl	8000ffc <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe fecf 	bl	8000ffc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1a8      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4925      	ldr	r1, [pc, #148]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x244>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe feb2 	bl	8000ffc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe feae 	bl	8000ffc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e187      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d036      	beq.n	8002334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_RCC_OscConfig+0x248>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe fe92 	bl	8000ffc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7fe fe8e 	bl	8000ffc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e167      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x200>
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x248>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fe7b 	bl	8000ffc <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	e00e      	b.n	8002328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230a:	f7fe fe77 	bl	8000ffc <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d907      	bls.n	8002328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e150      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ea      	bne.n	800230a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8097 	beq.w	8002470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a7c      	ldr	r2, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b77      	ldr	r3, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe fe37 	bl	8000ffc <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fe33 	bl	8000ffc <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e10c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ea>
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x30c>
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a5e      	ldr	r2, [pc, #376]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a5b      	ldr	r2, [pc, #364]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023e8:	4b58      	ldr	r3, [pc, #352]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fdf8 	bl	8000ffc <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fdf4 	bl	8000ffc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0cb      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCC_OscConfig+0x334>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fde2 	bl	8000ffc <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fdde 	bl	8000ffc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0b5      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a38      	ldr	r2, [pc, #224]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a1 	beq.w	80025bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d05c      	beq.n	8002540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d141      	bne.n	8002512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fdb2 	bl	8000ffc <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fdae 	bl	8000ffc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e087      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	491b      	ldr	r1, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fd87 	bl	8000ffc <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fd83 	bl	8000ffc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e05c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x416>
 8002510:	e054      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fd70 	bl	8000ffc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fd6c 	bl	8000ffc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e045      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x444>
 800253e:	e03d      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e038      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000
 8002554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4ec>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d121      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800258e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0cc      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d90c      	bls.n	8002608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d044      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d119      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	2b03      	cmp	r3, #3
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e067      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fc9e 	bl	8000ffc <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fc9a 	bl	8000ffc <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20c      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fae2 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08007f5c 	.word	0x08007f5c
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b094      	sub	sp, #80	; 0x50
 800279e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
 80027a4:	2300      	movs	r3, #0
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a8:	2300      	movs	r3, #0
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d00d      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x40>
 80027bc:	2b08      	cmp	r3, #8
 80027be:	f200 80e1 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x34>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ca:	e0db      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_GetSysClockFreq+0x204>)
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027d0:	e0db      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d6:	e0d8      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
 8002806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4621      	mov	r1, r4
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	6139      	str	r1, [r7, #16]
 8002828:	4629      	mov	r1, r5
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800283c:	4659      	mov	r1, fp
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4651      	mov	r1, sl
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4651      	mov	r1, sl
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4651      	mov	r1, sl
 800284c:	ebb2 0801 	subs.w	r8, r2, r1
 8002850:	4659      	mov	r1, fp
 8002852:	eb63 0901 	sbc.w	r9, r3, r1
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286a:	4690      	mov	r8, r2
 800286c:	4699      	mov	r9, r3
 800286e:	4623      	mov	r3, r4
 8002870:	eb18 0303 	adds.w	r3, r8, r3
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	462b      	mov	r3, r5
 8002878:	eb49 0303 	adc.w	r3, r9, r3
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800288a:	4629      	mov	r1, r5
 800288c:	024b      	lsls	r3, r1, #9
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002894:	4621      	mov	r1, r4
 8002896:	024a      	lsls	r2, r1, #9
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a8:	f7fd fce4 	bl	8000274 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	e058      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	2200      	movs	r2, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	4611      	mov	r1, r2
 80028c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	0159      	lsls	r1, r3, #5
 80028de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e2:	0150      	lsls	r0, r2, #5
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4641      	mov	r1, r8
 80028ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ee:	4649      	mov	r1, r9
 80028f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002908:	ebb2 040a 	subs.w	r4, r2, sl
 800290c:	eb63 050b 	sbc.w	r5, r3, fp
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	00eb      	lsls	r3, r5, #3
 800291a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291e:	00e2      	lsls	r2, r4, #3
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	4643      	mov	r3, r8
 8002926:	18e3      	adds	r3, r4, r3
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	464b      	mov	r3, r9
 800292c:	eb45 0303 	adc.w	r3, r5, r3
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293e:	4629      	mov	r1, r5
 8002940:	028b      	lsls	r3, r1, #10
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002948:	4621      	mov	r1, r4
 800294a:	028a      	lsls	r2, r1, #10
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	61fa      	str	r2, [r7, #28]
 8002958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295c:	f7fd fc8a 	bl	8000274 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x204>)
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800298c:	4618      	mov	r0, r3
 800298e:	3750      	adds	r7, #80	; 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08007f6c 	.word	0x08007f6c

080029e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	220f      	movs	r2, #15
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCC_GetClockConfig+0x60>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d038      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fac1 	bl	8000ffc <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a7e:	f7fe fabd 	bl	8000ffc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0bd      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	495a      	ldr	r1, [pc, #360]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ab6:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fa9e 	bl	8000ffc <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ac4:	f7fe fa9a 	bl	8000ffc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e09a      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ad6:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8083 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
 8002b00:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a42      	ldr	r2, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fa70 	bl	8000ffc <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fa6c 	bl	8000ffc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06c      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02f      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d028      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b72:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d114      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fa3a 	bl	8000ffc <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fa36 	bl	8000ffc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e034      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ee      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	4911      	ldr	r1, [pc, #68]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7d1a      	ldrb	r2, [r3, #20]
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c08:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	42470068 	.word	0x42470068
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42470e40 	.word	0x42470e40
 8002c24:	424711e0 	.word	0x424711e0

08002c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d140      	bne.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d131      	bne.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002c5e:	617b      	str	r3, [r7, #20]
          break;
 8002c60:	e031      	b.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb0:	0f1b      	lsrs	r3, r3, #28
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
          break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
          break;
 8002cc4:	bf00      	nop
        }
      }
      break;
 8002cc6:	bf00      	nop
    }
  }
  return frequency;
 8002cc8:	697b      	ldr	r3, [r7, #20]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00bb8000 	.word	0x00bb8000
 8002ce0:	007a1200 	.word	0x007a1200
 8002ce4:	00f42400 	.word	0x00f42400

08002ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07b      	b.n	8002df2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0a:	d009      	beq.n	8002d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
 8002d12:	e005      	b.n	8002d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd ffb6 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	ea42 0103 	orr.w	r1, r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0104 	and.w	r1, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0210 	and.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e041      	b.n	8002e90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f839 	bl	8002e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f000 f9c9 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d001      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e044      	b.n	8002f4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d013      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x6c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x6c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x6c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x6c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_TIM_Base_Start_IT+0xc0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d111      	bne.n	8002f3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d010      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3a:	e007      	b.n	8002f4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	40014000 	.word	0x40014000

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8ee 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8e0 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8f1 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8c4 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8b6 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8c7 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f89a 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f88c 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f89d 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f870 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f862 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f873 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fcc0 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f8e2 	bl	80032e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f838 	bl	80031bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8ac 	bl	80032d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a34      	ldr	r2, [pc, #208]	; (80032b4 <TIM_Base_SetConfig+0xe4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00f      	beq.n	8003208 <TIM_Base_SetConfig+0x38>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d00b      	beq.n	8003208 <TIM_Base_SetConfig+0x38>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <TIM_Base_SetConfig+0xe8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x38>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a30      	ldr	r2, [pc, #192]	; (80032bc <TIM_Base_SetConfig+0xec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x38>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <TIM_Base_SetConfig+0xf0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <TIM_Base_SetConfig+0xe4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01b      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d017      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <TIM_Base_SetConfig+0xe8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a21      	ldr	r2, [pc, #132]	; (80032bc <TIM_Base_SetConfig+0xec>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00f      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <TIM_Base_SetConfig+0xf0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00b      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <TIM_Base_SetConfig+0xf4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <TIM_Base_SetConfig+0xf8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_Base_SetConfig+0x8a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <TIM_Base_SetConfig+0xfc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <TIM_Base_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40014400 	.word	0x40014400
 80032cc:	40014800 	.word	0x40014800

080032d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 0208 	add.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f103 0208 	add.w	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f103 0208 	add.w	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d103      	bne.n	8003372 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00c      	b.n	800338c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3308      	adds	r3, #8
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e002      	b.n	8003380 <vListInsert+0x2e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d2f6      	bcs.n	800337a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d103      	bne.n	80033f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003422:	2301      	movs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <xQueueGenericReset+0x2e>
        __asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	60fb      	str	r3, [r7, #12]
    }
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05d      	beq.n	8003508 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003450:	2b00      	cmp	r3, #0
 8003452:	d059      	beq.n	8003508 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	2100      	movs	r1, #0
 800345e:	fba3 2302 	umull	r2, r3, r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d000      	beq.n	8003468 <xQueueGenericReset+0x50>
 8003466:	2101      	movs	r1, #1
 8003468:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800346a:	2b00      	cmp	r3, #0
 800346c:	d14c      	bne.n	8003508 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800346e:	f001 fef1 	bl	8005254 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	6939      	ldr	r1, [r7, #16]
 800347c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	441a      	add	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2200      	movs	r2, #0
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	3b01      	subs	r3, #1
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	441a      	add	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d114      	bne.n	80034ee <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01a      	beq.n	8003502 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3310      	adds	r3, #16
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 ffdb 	bl	800448c <xTaskRemoveFromEventList>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d012      	beq.n	8003502 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <xQueueGenericReset+0x11c>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	e009      	b.n	8003502 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	3310      	adds	r3, #16
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ff00 	bl	80032f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3324      	adds	r3, #36	; 0x24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fefb 	bl	80032f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003502:	f001 fed7 	bl	80052b4 <vPortExitCritical>
 8003506:	e001      	b.n	800350c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <xQueueGenericReset+0x110>
        __asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60bb      	str	r3, [r7, #8]
    }
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003528:	697b      	ldr	r3, [r7, #20]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02e      	beq.n	80035ae <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003550:	2100      	movs	r1, #0
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d000      	beq.n	8003560 <xQueueGenericCreate+0x28>
 800355e:	2101      	movs	r1, #1
 8003560:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d123      	bne.n	80035ae <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800356e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003572:	d81c      	bhi.n	80035ae <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3350      	adds	r3, #80	; 0x50
 8003582:	4618      	mov	r0, r3
 8003584:	f001 ff92 	bl	80054ac <pvPortMalloc>
 8003588:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01c      	beq.n	80035ca <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800359a:	79fa      	ldrb	r2, [r7, #7]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f814 	bl	80035d4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80035ac:	e00d      	b.n	80035ca <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueGenericCreate+0x92>
        __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	613b      	str	r3, [r7, #16]
    }
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80035ca:	69fb      	ldr	r3, [r7, #28]
    }
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003602:	2101      	movs	r1, #1
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7ff ff07 	bl	8003418 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	2073      	movs	r0, #115	; 0x73
 800361a:	f003 f8cd 	bl	80067b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b08f      	sub	sp, #60	; 0x3c
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xQueueReceive+0x30>
        __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	623b      	str	r3, [r7, #32]
    }
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <xQueueReceive+0x3e>
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <xQueueReceive+0x42>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueReceive+0x44>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueReceive+0x5e>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
    }
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003686:	f001 f913 	bl	80048b0 <xTaskGetSchedulerState>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <xQueueReceive+0x6e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueReceive+0x72>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueReceive+0x74>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueReceive+0x8e>
        __asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61bb      	str	r3, [r7, #24]
    }
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80036b6:	f001 fdcd 	bl	8005254 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02f      	beq.n	8003726 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ca:	f000 f8bd 	bl	8003848 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fd9d 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 80036d6:	4604      	mov	r4, r0
 80036d8:	2000      	movs	r0, #0
 80036da:	f003 fd99 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2101      	movs	r1, #1
 80036e4:	9100      	str	r1, [sp, #0]
 80036e6:	4621      	mov	r1, r4
 80036e8:	205c      	movs	r0, #92	; 0x5c
 80036ea:	f003 f8db 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00f      	beq.n	800371e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fec2 	bl	800448c <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <xQueueReceive+0x21c>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800371e:	f001 fdc9 	bl	80052b4 <vPortExitCritical>
                return pdPASS;
 8003722:	2301      	movs	r3, #1
 8003724:	e08a      	b.n	800383c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800372c:	f001 fdc2 	bl	80052b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	4618      	mov	r0, r3
 8003734:	f003 fd6c 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 8003738:	4604      	mov	r4, r0
 800373a:	2000      	movs	r0, #0
 800373c:	f003 fd68 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2101      	movs	r1, #1
 8003746:	9100      	str	r1, [sp, #0]
 8003748:	4621      	mov	r1, r4
 800374a:	205c      	movs	r0, #92	; 0x5c
 800374c:	f003 f8aa 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003750:	2300      	movs	r3, #0
 8003752:	e073      	b.n	800383c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f000 ff6c 	bl	800463c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003768:	f001 fda4 	bl	80052b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800376c:	f000 fb6e 	bl	8003e4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003770:	f001 fd70 	bl	8005254 <vPortEnterCritical>
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377a:	b25b      	sxtb	r3, r3
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d103      	bne.n	800378a <xQueueReceive+0x162>
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d103      	bne.n	80037a0 <xQueueReceive+0x178>
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a0:	f001 fd88 	bl	80052b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a4:	1d3a      	adds	r2, r7, #4
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ff5b 	bl	8004668 <xTaskCheckForTimeOut>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d124      	bne.n	8003802 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ba:	f000 f8bd 	bl	8003938 <prvIsQueueEmpty>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d018      	beq.n	80037f6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fdf1 	bl	80043b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80037d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d4:	f000 f85e 	bl	8003894 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80037d8:	f000 fb46 	bl	8003e68 <xTaskResumeAll>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f47f af69 	bne.w	80036b6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <xQueueReceive+0x21c>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	e75f      	b.n	80036b6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f000 f84c 	bl	8003894 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037fc:	f000 fb34 	bl	8003e68 <xTaskResumeAll>
 8003800:	e759      	b.n	80036b6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003804:	f000 f846 	bl	8003894 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003808:	f000 fb2e 	bl	8003e68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f893 	bl	8003938 <prvIsQueueEmpty>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f43f af4e 	beq.w	80036b6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fcf7 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 8003822:	4604      	mov	r4, r0
 8003824:	2000      	movs	r0, #0
 8003826:	f003 fcf3 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2101      	movs	r1, #1
 8003830:	9100      	str	r1, [sp, #0]
 8003832:	4621      	mov	r1, r4
 8003834:	205c      	movs	r0, #92	; 0x5c
 8003836:	f003 f835 	bl	80068a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800383a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800383c:	4618      	mov	r0, r3
 800383e:	3734      	adds	r7, #52	; 0x34
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d303      	bcc.n	800387c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68d9      	ldr	r1, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	461a      	mov	r2, r3
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f004 f87c 	bl	8007984 <memcpy>
    }
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800389c:	f001 fcda 	bl	8005254 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038a8:	e011      	b.n	80038ce <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d012      	beq.n	80038d8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3324      	adds	r3, #36	; 0x24
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fde8 	bl	800448c <xTaskRemoveFromEventList>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80038c2:	f000 ff37 	bl	8004734 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	dce9      	bgt.n	80038aa <prvUnlockQueue+0x16>
 80038d6:	e000      	b.n	80038da <prvUnlockQueue+0x46>
                    break;
 80038d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	22ff      	movs	r2, #255	; 0xff
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80038e2:	f001 fce7 	bl	80052b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80038e6:	f001 fcb5 	bl	8005254 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f2:	e011      	b.n	8003918 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fdc3 	bl	800448c <xTaskRemoveFromEventList>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800390c:	f000 ff12 	bl	8004734 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	3b01      	subs	r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dce9      	bgt.n	80038f4 <prvUnlockQueue+0x60>
 8003920:	e000      	b.n	8003924 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003922:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800392c:	f001 fcc2 	bl	80052b4 <vPortExitCritical>
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003940:	f001 fc88 	bl	8005254 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	e001      	b.n	8003956 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003956:	f001 fcad 	bl	80052b4 <vPortExitCritical>

    return xReturn;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	60fb      	str	r3, [r7, #12]
    }
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d024      	beq.n	80039de <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e01e      	b.n	80039d8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <vQueueAddToRegistry+0xa8>)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d105      	bne.n	80039b6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <vQueueAddToRegistry+0xa8>)
 80039b0:	4413      	add	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
                    break;
 80039b4:	e013      	b.n	80039de <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <vQueueAddToRegistry+0x6e>
 80039bc:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <vQueueAddToRegistry+0xa8>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <vQueueAddToRegistry+0xa8>)
 80039ce:	4413      	add	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b07      	cmp	r3, #7
 80039dc:	d9dd      	bls.n	800399a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fc0c 	bl	8007210 <SEGGER_SYSVIEW_ShrinkId>
 80039f8:	4601      	mov	r1, r0
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	2071      	movs	r0, #113	; 0x71
 8003a00:	f002 fe80 	bl	8006704 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200001cc 	.word	0x200001cc

08003a10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003a20:	f001 fc18 	bl	8005254 <vPortEnterCritical>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d103      	bne.n	8003a3a <vQueueWaitForMessageRestricted+0x2a>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a40:	b25b      	sxtb	r3, r3
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d103      	bne.n	8003a50 <vQueueWaitForMessageRestricted+0x40>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a50:	f001 fc30 	bl	80052b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3324      	adds	r3, #36	; 0x24
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fcc9 	bl	80043fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff12 	bl	8003894 <prvUnlockQueue>
    }
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af04      	add	r7, sp, #16
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fd0d 	bl	80054ac <pvPortMalloc>
 8003a92:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d013      	beq.n	8003ac2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a9a:	2058      	movs	r0, #88	; 0x58
 8003a9c:	f001 fd06 	bl	80054ac <pvPortMalloc>
 8003aa0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003aa8:	2258      	movs	r2, #88	; 0x58
 8003aaa:	2100      	movs	r1, #0
 8003aac:	69f8      	ldr	r0, [r7, #28]
 8003aae:	f003 ff07 	bl	80078c0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab8:	e005      	b.n	8003ac6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f001 fdb0 	bl	8005620 <vPortFree>
 8003ac0:	e001      	b.n	8003ac6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f80e 	bl	8003b04 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003ae8:	69f8      	ldr	r0, [r7, #28]
 8003aea:	f000 f899 	bl	8003c20 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e002      	b.n	8003afa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003afa:	69bb      	ldr	r3, [r7, #24]
    }
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	21a5      	movs	r1, #165	; 0xa5
 8003b1e:	f003 fecf 	bl	80078c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <prvInitialiseNewTask+0x58>
        __asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	617b      	str	r3, [r7, #20]
    }
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01e      	beq.n	8003ba0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e012      	b.n	8003b8e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	7819      	ldrb	r1, [r3, #0]
 8003b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	3334      	adds	r3, #52	; 0x34
 8003b78:	460a      	mov	r2, r1
 8003b7a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	d9e9      	bls.n	8003b68 <prvInitialiseNewTask+0x64>
 8003b94:	e000      	b.n	8003b98 <prvInitialiseNewTask+0x94>
            {
                break;
 8003b96:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d90a      	bls.n	8003bbc <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	613b      	str	r3, [r7, #16]
    }
 8003bb8:	bf00      	nop
 8003bba:	e7fe      	b.n	8003bba <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d901      	bls.n	8003bc6 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fbae 	bl	8003338 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	3318      	adds	r3, #24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fba9 	bl	8003338 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	f1c3 0205 	rsb	r2, r3, #5
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	69b8      	ldr	r0, [r7, #24]
 8003c02:	f001 f977 	bl	8004ef4 <pxPortInitialiseStack>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c18:	bf00      	nop
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003c28:	f001 fb14 	bl	8005254 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <prvAddNewTaskToReadyList+0x14c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <prvAddNewTaskToReadyList+0x14c>)
 8003c34:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003c36:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <prvAddNewTaskToReadyList+0x150>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003c3e:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <prvAddNewTaskToReadyList+0x150>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <prvAddNewTaskToReadyList+0x14c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d110      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003c4c:	f000 fd96 	bl	800477c <prvInitialiseTaskLists>
 8003c50:	e00d      	b.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003c52:	4b48      	ldr	r3, [pc, #288]	; (8003d74 <prvAddNewTaskToReadyList+0x154>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c5a:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <prvAddNewTaskToReadyList+0x150>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d802      	bhi.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003c68:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <prvAddNewTaskToReadyList+0x150>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003c6e:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <prvAddNewTaskToReadyList+0x158>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <prvAddNewTaskToReadyList+0x158>)
 8003c76:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c78:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <prvAddNewTaskToReadyList+0x158>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <prvAddNewTaskToReadyList+0x94>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 f9fb 	bl	8007084 <SEGGER_SYSVIEW_OnTaskCreate>
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	1ae3      	subs	r3, r4, r3
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	462b      	mov	r3, r5
 8003cb0:	f001 fe78 	bl	80059a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fa68 	bl	800718c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <prvAddNewTaskToReadyList+0x15c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <prvAddNewTaskToReadyList+0x15c>)
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	492b      	ldr	r1, [pc, #172]	; (8003d80 <prvAddNewTaskToReadyList+0x160>)
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	3204      	adds	r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <prvAddNewTaskToReadyList+0x160>)
 8003d12:	441a      	add	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	615a      	str	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4918      	ldr	r1, [pc, #96]	; (8003d80 <prvAddNewTaskToReadyList+0x160>)
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	4814      	ldr	r0, [pc, #80]	; (8003d80 <prvAddNewTaskToReadyList+0x160>)
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4403      	add	r3, r0
 8003d38:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003d3a:	f001 fabb 	bl	80052b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <prvAddNewTaskToReadyList+0x154>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <prvAddNewTaskToReadyList+0x150>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d207      	bcs.n	8003d64 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <prvAddNewTaskToReadyList+0x164>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d6c:	200002e4 	.word	0x200002e4
 8003d70:	2000020c 	.word	0x2000020c
 8003d74:	200002f0 	.word	0x200002f0
 8003d78:	20000300 	.word	0x20000300
 8003d7c:	200002ec 	.word	0x200002ec
 8003d80:	20000210 	.word	0x20000210
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <vTaskStartScheduler+0xa4>)
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2300      	movs	r3, #0
 8003d98:	2282      	movs	r2, #130	; 0x82
 8003d9a:	4925      	ldr	r1, [pc, #148]	; (8003e30 <vTaskStartScheduler+0xa8>)
 8003d9c:	4825      	ldr	r0, [pc, #148]	; (8003e34 <vTaskStartScheduler+0xac>)
 8003d9e:	f7ff fe6b 	bl	8003a78 <xTaskCreate>
 8003da2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003daa:	f000 fe1f 	bl	80049ec <xTimerCreateTimerTask>
 8003dae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d124      	bne.n	8003e00 <vTaskStartScheduler+0x78>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
    }
 8003dc8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <vTaskStartScheduler+0xb0>)
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <vTaskStartScheduler+0xb4>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <vTaskStartScheduler+0xb8>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <vTaskStartScheduler+0xbc>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <vTaskStartScheduler+0xa4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d102      	bne.n	8003df0 <vTaskStartScheduler+0x68>
 8003dea:	f003 f92f 	bl	800704c <SEGGER_SYSVIEW_OnIdle>
 8003dee:	e004      	b.n	8003dfa <vTaskStartScheduler+0x72>
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <vTaskStartScheduler+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 f987 	bl	8007108 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003dfa:	f001 f90b 	bl	8005014 <xPortStartScheduler>
 8003dfe:	e00e      	b.n	8003e1e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d10a      	bne.n	8003e1e <vTaskStartScheduler+0x96>
        __asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	607b      	str	r3, [r7, #4]
    }
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <vTaskStartScheduler+0xc0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000308 	.word	0x20000308
 8003e30:	08007e88 	.word	0x08007e88
 8003e34:	0800474d 	.word	0x0800474d
 8003e38:	20000304 	.word	0x20000304
 8003e3c:	200002f0 	.word	0x200002f0
 8003e40:	200002e8 	.word	0x200002e8
 8003e44:	2000020c 	.word	0x2000020c
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <vTaskSuspendAll+0x18>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a03      	ldr	r2, [pc, #12]	; (8003e64 <vTaskSuspendAll+0x18>)
 8003e58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	2000030c 	.word	0x2000030c

08003e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e76:	4b73      	ldr	r3, [pc, #460]	; (8004044 <xTaskResumeAll+0x1dc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xTaskResumeAll+0x2c>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
    }
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e94:	f001 f9de 	bl	8005254 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <xTaskResumeAll+0x1dc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4a69      	ldr	r2, [pc, #420]	; (8004044 <xTaskResumeAll+0x1dc>)
 8003ea0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea2:	4b68      	ldr	r3, [pc, #416]	; (8004044 <xTaskResumeAll+0x1dc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 80c4 	bne.w	8004034 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <xTaskResumeAll+0x1e0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80bf 	beq.w	8004034 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb6:	e08e      	b.n	8003fd6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <xTaskResumeAll+0x1e4>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	6a12      	ldr	r2, [r2, #32]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	69d2      	ldr	r2, [r2, #28]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d103      	bne.n	8003eee <xTaskResumeAll+0x86>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1e5a      	subs	r2, r3, #1
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	6892      	ldr	r2, [r2, #8]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d103      	bne.n	8003f2c <xTaskResumeAll+0xc4>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 f924 	bl	800718c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	4b40      	ldr	r3, [pc, #256]	; (8004050 <xTaskResumeAll+0x1e8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <xTaskResumeAll+0x1e8>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	493e      	ldr	r1, [pc, #248]	; (8004054 <xTaskResumeAll+0x1ec>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3304      	adds	r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	3204      	adds	r2, #4
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <xTaskResumeAll+0x1ec>)
 8003f9a:	441a      	add	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	615a      	str	r2, [r3, #20]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	492b      	ldr	r1, [pc, #172]	; (8004054 <xTaskResumeAll+0x1ec>)
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	4827      	ldr	r0, [pc, #156]	; (8004054 <xTaskResumeAll+0x1ec>)
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4403      	add	r3, r0
 8003fc0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <xTaskResumeAll+0x1f0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <xTaskResumeAll+0x1f4>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <xTaskResumeAll+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f47f af6c 	bne.w	8003eb8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003fe6:	f000 fc47 	bl	8004878 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <xTaskResumeAll+0x1f8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003ff6:	f000 f859 	bl	80040ac <xTaskIncrementTick>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <xTaskResumeAll+0x1f4>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3b01      	subs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f1      	bne.n	8003ff6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <xTaskResumeAll+0x1f8>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004018:	4b10      	ldr	r3, [pc, #64]	; (800405c <xTaskResumeAll+0x1f4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <xTaskResumeAll+0x1fc>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004034:	f001 f93e 	bl	80052b4 <vPortExitCritical>

    return xAlreadyYielded;
 8004038:	69bb      	ldr	r3, [r7, #24]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000030c 	.word	0x2000030c
 8004048:	200002e4 	.word	0x200002e4
 800404c:	200002a4 	.word	0x200002a4
 8004050:	200002ec 	.word	0x200002ec
 8004054:	20000210 	.word	0x20000210
 8004058:	2000020c 	.word	0x2000020c
 800405c:	200002f8 	.word	0x200002f8
 8004060:	200002f4 	.word	0x200002f4
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <xTaskGetTickCount+0x1c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004074:	687b      	ldr	r3, [r7, #4]
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200002e8 	.word	0x200002e8

08004088 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408e:	f001 f9cd 	bl	800542c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <xTaskGetTickCountFromISR+0x20>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800409c:	683b      	ldr	r3, [r7, #0]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200002e8 	.word	0x200002e8

080040ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b6:	4b7f      	ldr	r3, [pc, #508]	; (80042b4 <xTaskIncrementTick+0x208>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80f0 	bne.w	80042a0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c0:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <xTaskIncrementTick+0x20c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80040c8:	4a7b      	ldr	r2, [pc, #492]	; (80042b8 <xTaskIncrementTick+0x20c>)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d120      	bne.n	8004116 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80040d4:	4b79      	ldr	r3, [pc, #484]	; (80042bc <xTaskIncrementTick+0x210>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
    }
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xTaskIncrementTick+0x46>
 80040f4:	4b71      	ldr	r3, [pc, #452]	; (80042bc <xTaskIncrementTick+0x210>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	4b71      	ldr	r3, [pc, #452]	; (80042c0 <xTaskIncrementTick+0x214>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6f      	ldr	r2, [pc, #444]	; (80042bc <xTaskIncrementTick+0x210>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	; (80042c0 <xTaskIncrementTick+0x214>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <xTaskIncrementTick+0x218>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a6d      	ldr	r2, [pc, #436]	; (80042c4 <xTaskIncrementTick+0x218>)
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	f000 fbb1 	bl	8004878 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004116:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <xTaskIncrementTick+0x21c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	429a      	cmp	r2, r3
 800411e:	f0c0 80aa 	bcc.w	8004276 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004122:	4b66      	ldr	r3, [pc, #408]	; (80042bc <xTaskIncrementTick+0x210>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412c:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <xTaskIncrementTick+0x21c>)
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	601a      	str	r2, [r3, #0]
                    break;
 8004134:	e09f      	b.n	8004276 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <xTaskIncrementTick+0x210>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	429a      	cmp	r2, r3
 800414c:	d203      	bcs.n	8004156 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800414e:	4a5e      	ldr	r2, [pc, #376]	; (80042c8 <xTaskIncrementTick+0x21c>)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004154:	e08f      	b.n	8004276 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	6892      	ldr	r2, [r2, #8]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	3304      	adds	r3, #4
 8004178:	429a      	cmp	r2, r3
 800417a:	d103      	bne.n	8004184 <xTaskIncrementTick+0xd8>
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2200      	movs	r2, #0
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01e      	beq.n	80041da <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	6a12      	ldr	r2, [r2, #32]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	69d2      	ldr	r2, [r2, #28]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3318      	adds	r3, #24
 80041be:	429a      	cmp	r2, r3
 80041c0:	d103      	bne.n	80041ca <xTaskIncrementTick+0x11e>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2200      	movs	r2, #0
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 ffd5 	bl	800718c <SEGGER_SYSVIEW_OnTaskStartReady>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <xTaskIncrementTick+0x220>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	4a36      	ldr	r2, [pc, #216]	; (80042cc <xTaskIncrementTick+0x220>)
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4935      	ldr	r1, [pc, #212]	; (80042d0 <xTaskIncrementTick+0x224>)
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3304      	adds	r3, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	3204      	adds	r2, #4
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <xTaskIncrementTick+0x224>)
 8004238:	441a      	add	r2, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	615a      	str	r2, [r3, #20]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4923      	ldr	r1, [pc, #140]	; (80042d0 <xTaskIncrementTick+0x224>)
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	481f      	ldr	r0, [pc, #124]	; (80042d0 <xTaskIncrementTick+0x224>)
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4403      	add	r3, r0
 800425e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <xTaskIncrementTick+0x228>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	429a      	cmp	r2, r3
 800426c:	f67f af59 	bls.w	8004122 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004274:	e755      	b.n	8004122 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <xTaskIncrementTick+0x228>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	4914      	ldr	r1, [pc, #80]	; (80042d0 <xTaskIncrementTick+0x224>)
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d901      	bls.n	8004292 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <xTaskIncrementTick+0x22c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	e004      	b.n	80042aa <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <xTaskIncrementTick+0x230>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <xTaskIncrementTick+0x230>)
 80042a8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000030c 	.word	0x2000030c
 80042b8:	200002e8 	.word	0x200002e8
 80042bc:	2000029c 	.word	0x2000029c
 80042c0:	200002a0 	.word	0x200002a0
 80042c4:	200002fc 	.word	0x200002fc
 80042c8:	20000304 	.word	0x20000304
 80042cc:	200002ec 	.word	0x200002ec
 80042d0:	20000210 	.word	0x20000210
 80042d4:	2000020c 	.word	0x2000020c
 80042d8:	200002f8 	.word	0x200002f8
 80042dc:	200002f4 	.word	0x200002f4

080042e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <vTaskSwitchContext+0xbc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <vTaskSwitchContext+0xc0>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80042f4:	e04d      	b.n	8004392 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <vTaskSwitchContext+0xc0>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <vTaskSwitchContext+0xc4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	f1c3 031f 	rsb	r3, r3, #31
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	4925      	ldr	r1, [pc, #148]	; (80043a8 <vTaskSwitchContext+0xc8>)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	607b      	str	r3, [r7, #4]
    }
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <vTaskSwitchContext+0x5a>
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <vTaskSwitchContext+0xc8>)
 8004348:	4413      	add	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3308      	adds	r3, #8
 800435e:	429a      	cmp	r2, r3
 8004360:	d104      	bne.n	800436c <vTaskSwitchContext+0x8c>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <vTaskSwitchContext+0xcc>)
 8004374:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <vTaskSwitchContext+0xcc>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <vTaskSwitchContext+0xd0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d102      	bne.n	8004388 <vTaskSwitchContext+0xa8>
 8004382:	f002 fe63 	bl	800704c <SEGGER_SYSVIEW_OnIdle>
}
 8004386:	e004      	b.n	8004392 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <vTaskSwitchContext+0xcc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f002 febb 	bl	8007108 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000030c 	.word	0x2000030c
 80043a0:	200002f8 	.word	0x200002f8
 80043a4:	200002ec 	.word	0x200002ec
 80043a8:	20000210 	.word	0x20000210
 80043ac:	2000020c 	.word	0x2000020c
 80043b0:	20000308 	.word	0x20000308

080043b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	60fb      	str	r3, [r7, #12]
    }
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <vTaskPlaceOnEventList+0x44>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3318      	adds	r3, #24
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe ffb5 	bl	8003352 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043e8:	2101      	movs	r1, #1
 80043ea:	6838      	ldr	r0, [r7, #0]
 80043ec:	f000 fa7e 	bl	80048ec <prvAddCurrentTaskToDelayedList>
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000020c 	.word	0x2000020c

080043fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	613b      	str	r3, [r7, #16]
    }
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <vTaskPlaceOnEventListRestricted+0x8c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	61da      	str	r2, [r3, #28]
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	621a      	str	r2, [r3, #32]
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <vTaskPlaceOnEventListRestricted+0x8c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	3218      	adds	r2, #24
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <vTaskPlaceOnEventListRestricted+0x8c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f103 0218 	add.w	r2, r3, #24
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004472:	2024      	movs	r0, #36	; 0x24
 8004474:	f002 f8ec 	bl	8006650 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68b8      	ldr	r0, [r7, #8]
 800447c:	f000 fa36 	bl	80048ec <prvAddCurrentTaskToDelayedList>
    }
 8004480:	bf00      	nop
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000020c 	.word	0x2000020c

0800448c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
    }
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	6a12      	ldr	r2, [r2, #32]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	69d2      	ldr	r2, [r2, #28]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	3318      	adds	r3, #24
 80044da:	429a      	cmp	r2, r3
 80044dc:	d103      	bne.n	80044e6 <xTaskRemoveFromEventList+0x5a>
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2200      	movs	r2, #0
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f6:	4b4b      	ldr	r3, [pc, #300]	; (8004624 <xTaskRemoveFromEventList+0x198>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d162      	bne.n	80045c4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	68d2      	ldr	r2, [r2, #12]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	6892      	ldr	r2, [r2, #8]
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	3304      	adds	r3, #4
 8004520:	429a      	cmp	r2, r3
 8004522:	d103      	bne.n	800452c <xTaskRemoveFromEventList+0xa0>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	4618      	mov	r0, r3
 8004540:	f002 fe24 	bl	800718c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <xTaskRemoveFromEventList+0x19c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <xTaskRemoveFromEventList+0x19c>)
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455a:	4934      	ldr	r1, [pc, #208]	; (800462c <xTaskRemoveFromEventList+0x1a0>)
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	3304      	adds	r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	3204      	adds	r2, #4
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4a24      	ldr	r2, [pc, #144]	; (800462c <xTaskRemoveFromEventList+0x1a0>)
 800459a:	441a      	add	r2, r3
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	615a      	str	r2, [r3, #20]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4921      	ldr	r1, [pc, #132]	; (800462c <xTaskRemoveFromEventList+0x1a0>)
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	481d      	ldr	r0, [pc, #116]	; (800462c <xTaskRemoveFromEventList+0x1a0>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	6019      	str	r1, [r3, #0]
 80045c2:	e01b      	b.n	80045fc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <xTaskRemoveFromEventList+0x1a4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	61da      	str	r2, [r3, #28]
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	621a      	str	r2, [r3, #32]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	3218      	adds	r2, #24
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f103 0218 	add.w	r2, r3, #24
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <xTaskRemoveFromEventList+0x1a4>)
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <xTaskRemoveFromEventList+0x1a4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <xTaskRemoveFromEventList+0x1a4>)
 80045fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <xTaskRemoveFromEventList+0x1a8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	429a      	cmp	r2, r3
 8004608:	d905      	bls.n	8004616 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <xTaskRemoveFromEventList+0x1ac>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e001      	b.n	800461a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	2000030c 	.word	0x2000030c
 8004628:	200002ec 	.word	0x200002ec
 800462c:	20000210 	.word	0x20000210
 8004630:	200002a4 	.word	0x200002a4
 8004634:	2000020c 	.word	0x2000020c
 8004638:	200002f8 	.word	0x200002f8

0800463c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <vTaskInternalSetTimeOutState+0x24>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <vTaskInternalSetTimeOutState+0x28>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	200002fc 	.word	0x200002fc
 8004664:	200002e8 	.word	0x200002e8

08004668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	613b      	str	r3, [r7, #16]
    }
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
    }
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80046aa:	f000 fdd3 	bl	8005254 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <xTaskCheckForTimeOut+0xc4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d102      	bne.n	80046ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e026      	b.n	800471c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <xTaskCheckForTimeOut+0xc8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d00a      	beq.n	80046f0 <xTaskCheckForTimeOut+0x88>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d305      	bcc.n	80046f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e015      	b.n	800471c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d20b      	bcs.n	8004712 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff98 	bl	800463c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e004      	b.n	800471c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800471c:	f000 fdca 	bl	80052b4 <vPortExitCritical>

    return xReturn;
 8004720:	69fb      	ldr	r3, [r7, #28]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200002e8 	.word	0x200002e8
 8004730:	200002fc 	.word	0x200002fc

08004734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <vTaskMissedYield+0x14>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	200002f8 	.word	0x200002f8

0800474c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004754:	f000 f852 	bl	80047fc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <prvIdleTask+0x28>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d9f9      	bls.n	8004754 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <prvIdleTask+0x2c>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004770:	e7f0      	b.n	8004754 <prvIdleTask+0x8>
 8004772:	bf00      	nop
 8004774:	20000210 	.word	0x20000210
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e00c      	b.n	80047a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <prvInitialiseTaskLists+0x60>)
 8004794:	4413      	add	r3, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fdae 	bl	80032f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d9ef      	bls.n	8004788 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80047a8:	480d      	ldr	r0, [pc, #52]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047aa:	f7fe fda5 	bl	80032f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80047ae:	480d      	ldr	r0, [pc, #52]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047b0:	f7fe fda2 	bl	80032f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80047b4:	480c      	ldr	r0, [pc, #48]	; (80047e8 <prvInitialiseTaskLists+0x6c>)
 80047b6:	f7fe fd9f 	bl	80032f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80047ba:	480c      	ldr	r0, [pc, #48]	; (80047ec <prvInitialiseTaskLists+0x70>)
 80047bc:	f7fe fd9c 	bl	80032f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80047c0:	480b      	ldr	r0, [pc, #44]	; (80047f0 <prvInitialiseTaskLists+0x74>)
 80047c2:	f7fe fd99 	bl	80032f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <prvInitialiseTaskLists+0x78>)
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <prvInitialiseTaskLists+0x7c>)
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000210 	.word	0x20000210
 80047e0:	20000274 	.word	0x20000274
 80047e4:	20000288 	.word	0x20000288
 80047e8:	200002a4 	.word	0x200002a4
 80047ec:	200002b8 	.word	0x200002b8
 80047f0:	200002d0 	.word	0x200002d0
 80047f4:	2000029c 	.word	0x2000029c
 80047f8:	200002a0 	.word	0x200002a0

080047fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004802:	e019      	b.n	8004838 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004804:	f000 fd26 	bl	8005254 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <prvCheckTasksWaitingTermination+0x50>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fdd5 	bl	80033c4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3b01      	subs	r3, #1
 8004820:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 8004822:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 800482c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800482e:	f000 fd41 	bl	80052b4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f810 	bl	8004858 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e1      	bne.n	8004804 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200002b8 	.word	0x200002b8
 8004850:	200002e4 	.word	0x200002e4
 8004854:	200002cc 	.word	0x200002cc

08004858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fedb 	bl	8005620 <vPortFree>
            vPortFree( pxTCB );
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fed8 	bl	8005620 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <prvResetNextTaskUnblockTime+0x30>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <prvResetNextTaskUnblockTime+0x34>)
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800488e:	e005      	b.n	800489c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <prvResetNextTaskUnblockTime+0x30>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a04      	ldr	r2, [pc, #16]	; (80048ac <prvResetNextTaskUnblockTime+0x34>)
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	2000029c 	.word	0x2000029c
 80048ac:	20000304 	.word	0x20000304

080048b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <xTaskGetSchedulerState+0x34>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80048be:	2301      	movs	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e008      	b.n	80048d6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c4:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <xTaskGetSchedulerState+0x38>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80048cc:	2302      	movs	r3, #2
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	e001      	b.n	80048d6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80048d6:	687b      	ldr	r3, [r7, #4]
    }
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200002f0 	.word	0x200002f0
 80048e8:	2000030c 	.word	0x2000030c

080048ec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fd5e 	bl	80033c4 <uxListRemove>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xec>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4013      	ands	r3, r2
 8004922:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004924:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d124      	bne.n	8004978 <prvAddCurrentTaskToDelayedList+0x8c>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d021      	beq.n	8004978 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004934:	4b29      	ldr	r3, [pc, #164]	; (80049dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	3204      	adds	r2, #4
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004968:	615a      	str	r2, [r3, #20]
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <prvAddCurrentTaskToDelayedList+0xf0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004976:	e026      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	429a      	cmp	r2, r3
 800498e:	d209      	bcs.n	80049a4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fcd8 	bl	8003352 <vListInsert>
}
 80049a2:	e010      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe fcce 	bl	8003352 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d202      	bcs.n	80049c6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	200002e8 	.word	0x200002e8
 80049d4:	2000020c 	.word	0x2000020c
 80049d8:	200002ec 	.word	0x200002ec
 80049dc:	200002d0 	.word	0x200002d0
 80049e0:	200002a0 	.word	0x200002a0
 80049e4:	2000029c 	.word	0x2000029c
 80049e8:	20000304 	.word	0x20000304

080049ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80049f6:	f000 fa47 	bl	8004e88 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <xTimerCreateTimerTask+0x54>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <xTimerCreateTimerTask+0x58>)
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	2302      	movs	r3, #2
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a10:	490d      	ldr	r1, [pc, #52]	; (8004a48 <xTimerCreateTimerTask+0x5c>)
 8004a12:	480e      	ldr	r0, [pc, #56]	; (8004a4c <xTimerCreateTimerTask+0x60>)
 8004a14:	f7ff f830 	bl	8003a78 <xTaskCreate>
 8004a18:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	603b      	str	r3, [r7, #0]
    }
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004a36:	687b      	ldr	r3, [r7, #4]
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000340 	.word	0x20000340
 8004a44:	20000344 	.word	0x20000344
 8004a48:	08007e90 	.word	0x08007e90
 8004a4c:	08004af5 	.word	0x08004af5

08004a50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a5c:	e008      	b.n	8004a70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	18d1      	adds	r1, r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f8dd 	bl	8004c3c <prvInsertTimerInActiveList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ea      	bne.n	8004a5e <prvReloadTimer+0xe>
        }
    }
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <prvProcessExpiredTimer+0x5c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fc89 	bl	80033c4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ffc3 	bl	8004a50 <prvReloadTimer>
 8004aca:	e008      	b.n	8004ade <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	4798      	blx	r3
    }
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000338 	.word	0x20000338

08004af4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004afc:	f107 0308 	add.w	r3, r7, #8
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f857 	bl	8004bb4 <prvGetNextExpireTime>
 8004b06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f803 	bl	8004b18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b12:	f000 f8d5 	bl	8004cc0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b16:	e7f1      	b.n	8004afc <prvTimerTask+0x8>

08004b18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b22:	f7ff f993 	bl	8003e4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f866 	bl	8004bfc <prvSampleTimeNow>
 8004b30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d130      	bne.n	8004b9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <prvProcessTimerOrBlockTask+0x3c>
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d806      	bhi.n	8004b54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b46:	f7ff f98f 	bl	8003e68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffa1 	bl	8004a94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b52:	e024      	b.n	8004b9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <prvProcessTimerOrBlockTask+0x90>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <prvProcessTimerOrBlockTask+0x50>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <prvProcessTimerOrBlockTask+0x52>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <prvProcessTimerOrBlockTask+0x94>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f7fe ff49 	bl	8003a10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b7e:	f7ff f973 	bl	8003e68 <xTaskResumeAll>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <prvProcessTimerOrBlockTask+0x98>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
    }
 8004b98:	e001      	b.n	8004b9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b9a:	f7ff f965 	bl	8003e68 <xTaskResumeAll>
    }
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000033c 	.word	0x2000033c
 8004bac:	20000340 	.word	0x20000340
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <prvGetNextExpireTime+0x44>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <prvGetNextExpireTime+0x16>
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	e000      	b.n	8004bcc <prvGetNextExpireTime+0x18>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <prvGetNextExpireTime+0x44>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e001      	b.n	8004be8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004be8:	68fb      	ldr	r3, [r7, #12]
    }
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000338 	.word	0x20000338

08004bfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c04:	f7ff fa30 	bl	8004068 <xTaskGetTickCount>
 8004c08:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvSampleTimeNow+0x3c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d205      	bcs.n	8004c20 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c14:	f000 f912 	bl	8004e3c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e002      	b.n	8004c26 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <prvSampleTimeNow+0x3c>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
    }
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000348 	.word	0x20000348

08004c3c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d812      	bhi.n	8004c88 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e01b      	b.n	8004cae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <prvInsertTimerInActiveList+0x7c>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f7fe fb66 	bl	8003352 <vListInsert>
 8004c86:	e012      	b.n	8004cae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d206      	bcs.n	8004c9e <prvInsertTimerInActiveList+0x62>
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d302      	bcc.n	8004c9e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e007      	b.n	8004cae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <prvInsertTimerInActiveList+0x80>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fe fb52 	bl	8003352 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004cae:	697b      	ldr	r3, [r7, #20]
    }
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	2000033c 	.word	0x2000033c
 8004cbc:	20000338 	.word	0x20000338

08004cc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc6:	e0a6      	b.n	8004e16 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f2c0 80a3 	blt.w	8004e16 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fb6f 	bl	80033c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff87 	bl	8004bfc <prvSampleTimeNow>
 8004cee:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	f200 808d 	bhi.w	8004e14 <prvProcessReceivedCommands+0x154>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <prvProcessReceivedCommands+0x40>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d8d 	.word	0x08004d8d
 8004d0c:	08004da1 	.word	0x08004da1
 8004d10:	08004deb 	.word	0x08004deb
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d8d 	.word	0x08004d8d
 8004d20:	08004da1 	.word	0x08004da1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	69f8      	ldr	r0, [r7, #28]
 8004d44:	f7ff ff7a 	bl	8004c3c <prvInsertTimerInActiveList>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d063      	beq.n	8004e16 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	4413      	add	r3, r2
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4619      	mov	r1, r3
 8004d68:	69f8      	ldr	r0, [r7, #28]
 8004d6a:	f7ff fe71 	bl	8004a50 <prvReloadTimer>
 8004d6e:	e008      	b.n	8004d82 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	69f8      	ldr	r0, [r7, #28]
 8004d88:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004d8a:	e044      	b.n	8004e16 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004d9e:	e03a      	b.n	8004e16 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	617b      	str	r3, [r7, #20]
    }
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	18d1      	adds	r1, r2, r3
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	69f8      	ldr	r0, [r7, #28]
 8004de4:	f7ff ff2a 	bl	8004c3c <prvInsertTimerInActiveList>
                        break;
 8004de8:	e015      	b.n	8004e16 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004df8:	69f8      	ldr	r0, [r7, #28]
 8004dfa:	f000 fc11 	bl	8005620 <vPortFree>
 8004dfe:	e00a      	b.n	8004e16 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e12:	e000      	b.n	8004e16 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004e14:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <prvProcessReceivedCommands+0x178>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f107 0108 	add.w	r1, r7, #8
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fc01 	bl	8003628 <xQueueReceive>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af4d 	bne.w	8004cc8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000340 	.word	0x20000340

08004e3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e42:	e009      	b.n	8004e58 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e52:	6838      	ldr	r0, [r7, #0]
 8004e54:	f7ff fe1e 	bl	8004a94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <prvSwitchTimerLists+0x48>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e6e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <prvSwitchTimerLists+0x48>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
    }
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000338 	.word	0x20000338
 8004e84:	2000033c 	.word	0x2000033c

08004e88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e8c:	f000 f9e2 	bl	8005254 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <prvCheckForValidListAndQueue+0x54>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11d      	bne.n	8004ed4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e98:	4811      	ldr	r0, [pc, #68]	; (8004ee0 <prvCheckForValidListAndQueue+0x58>)
 8004e9a:	f7fe fa2d 	bl	80032f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e9e:	4811      	ldr	r0, [pc, #68]	; (8004ee4 <prvCheckForValidListAndQueue+0x5c>)
 8004ea0:	f7fe fa2a 	bl	80032f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <prvCheckForValidListAndQueue+0x60>)
 8004ea6:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <prvCheckForValidListAndQueue+0x58>)
 8004ea8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <prvCheckForValidListAndQueue+0x64>)
 8004eac:	4a0d      	ldr	r2, [pc, #52]	; (8004ee4 <prvCheckForValidListAndQueue+0x5c>)
 8004eae:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	210c      	movs	r1, #12
 8004eb4:	200a      	movs	r0, #10
 8004eb6:	f7fe fb3f 	bl	8003538 <xQueueGenericCreate>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a07      	ldr	r2, [pc, #28]	; (8004edc <prvCheckForValidListAndQueue+0x54>)
 8004ebe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <prvCheckForValidListAndQueue+0x54>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <prvCheckForValidListAndQueue+0x54>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <prvCheckForValidListAndQueue+0x68>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fd48 	bl	8003964 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ed4:	f000 f9ee 	bl	80052b4 <vPortExitCritical>
    }
 8004ed8:	bf00      	nop
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000340 	.word	0x20000340
 8004ee0:	20000310 	.word	0x20000310
 8004ee4:	20000324 	.word	0x20000324
 8004ee8:	20000338 	.word	0x20000338
 8004eec:	2000033c 	.word	0x2000033c
 8004ef0:	08007e98 	.word	0x08007e98

08004ef4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b04      	subs	r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b04      	subs	r3, #4
 8004f22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f24:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <pxPortInitialiseStack+0x64>)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b14      	subs	r3, #20
 8004f2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f06f 0202 	mvn.w	r2, #2
 8004f42:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3b20      	subs	r3, #32
 8004f48:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	08004f5d 	.word	0x08004f5d

08004f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <prvTaskExitError+0x54>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d00a      	beq.n	8004f86 <prvTaskExitError+0x2a>
        __asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
    }
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <prvTaskExitError+0x28>
        __asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60bb      	str	r3, [r7, #8]
    }
 8004f98:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f9a:	bf00      	nop
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0fc      	beq.n	8004f9c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000010 	.word	0x20000010
	...

08004fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <prvPortStartFirstTask+0x24>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8814 	msr	CONTROL, r0
 8004ffa:	b662      	cpsie	i
 8004ffc:	b661      	cpsie	f
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	df00      	svc	0
 8005008:	bf00      	nop
 800500a:	0000      	.short	0x0000
 800500c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop

08005014 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800501a:	4b46      	ldr	r3, [pc, #280]	; (8005134 <xPortStartScheduler+0x120>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a46      	ldr	r2, [pc, #280]	; (8005138 <xPortStartScheduler+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10a      	bne.n	800503a <xPortStartScheduler+0x26>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	613b      	str	r3, [r7, #16]
    }
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <xPortStartScheduler+0x120>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3f      	ldr	r2, [pc, #252]	; (800513c <xPortStartScheduler+0x128>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10a      	bne.n	800505a <xPortStartScheduler+0x46>
        __asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
    }
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800505a:	4b39      	ldr	r3, [pc, #228]	; (8005140 <xPortStartScheduler+0x12c>)
 800505c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4b31      	ldr	r3, [pc, #196]	; (8005144 <xPortStartScheduler+0x130>)
 8005080:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005082:	4b31      	ldr	r3, [pc, #196]	; (8005148 <xPortStartScheduler+0x134>)
 8005084:	2207      	movs	r2, #7
 8005086:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005088:	e009      	b.n	800509e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <xPortStartScheduler+0x134>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <xPortStartScheduler+0x134>)
 8005092:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d0ef      	beq.n	800508a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <xPortStartScheduler+0x134>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1c3 0307 	rsb	r3, r3, #7
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00a      	beq.n	80050cc <xPortStartScheduler+0xb8>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
    }
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <xPortStartScheduler+0x134>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <xPortStartScheduler+0x134>)
 80050d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050d6:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <xPortStartScheduler+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050de:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <xPortStartScheduler+0x134>)
 80050e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <xPortStartScheduler+0x138>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	; (800514c <xPortStartScheduler+0x138>)
 80050f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <xPortStartScheduler+0x138>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <xPortStartScheduler+0x138>)
 80050fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005100:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005102:	f000 f963 	bl	80053cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <xPortStartScheduler+0x13c>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800510c:	f000 f982 	bl	8005414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <xPortStartScheduler+0x140>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0f      	ldr	r2, [pc, #60]	; (8005154 <xPortStartScheduler+0x140>)
 8005116:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800511a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800511c:	f7ff ff64 	bl	8004fe8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005120:	f7ff f8de 	bl	80042e0 <vTaskSwitchContext>
    prvTaskExitError();
 8005124:	f7ff ff1a 	bl	8004f5c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00
 8005138:	410fc271 	.word	0x410fc271
 800513c:	410fc270 	.word	0x410fc270
 8005140:	e000e400 	.word	0xe000e400
 8005144:	2000034c 	.word	0x2000034c
 8005148:	20000350 	.word	0x20000350
 800514c:	e000ed20 	.word	0xe000ed20
 8005150:	20000010 	.word	0x20000010
 8005154:	e000ef34 	.word	0xe000ef34

08005158 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <vInitPrioGroupValue+0xe4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a37      	ldr	r2, [pc, #220]	; (8005240 <vInitPrioGroupValue+0xe8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10a      	bne.n	800517e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	613b      	str	r3, [r7, #16]
    }
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <vInitPrioGroupValue+0xe4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a30      	ldr	r2, [pc, #192]	; (8005244 <vInitPrioGroupValue+0xec>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10a      	bne.n	800519e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60fb      	str	r3, [r7, #12]
    }
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800519e:	4b2a      	ldr	r3, [pc, #168]	; (8005248 <vInitPrioGroupValue+0xf0>)
 80051a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4b22      	ldr	r3, [pc, #136]	; (800524c <vInitPrioGroupValue+0xf4>)
 80051c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <vInitPrioGroupValue+0xf8>)
 80051c8:	2207      	movs	r2, #7
 80051ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051cc:	e009      	b.n	80051e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80051ce:	4b20      	ldr	r3, [pc, #128]	; (8005250 <vInitPrioGroupValue+0xf8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <vInitPrioGroupValue+0xf8>)
 80051d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d0ef      	beq.n	80051ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <vInitPrioGroupValue+0xf8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1c3 0307 	rsb	r3, r3, #7
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d00a      	beq.n	8005210 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60bb      	str	r3, [r7, #8]
    }
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <vInitPrioGroupValue+0xf8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <vInitPrioGroupValue+0xf8>)
 8005218:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <vInitPrioGroupValue+0xf8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005222:	4a0b      	ldr	r2, [pc, #44]	; (8005250 <vInitPrioGroupValue+0xf8>)
 8005224:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000ed00 	.word	0xe000ed00
 8005240:	410fc271 	.word	0x410fc271
 8005244:	410fc270 	.word	0x410fc270
 8005248:	e000e400 	.word	0xe000e400
 800524c:	2000034c 	.word	0x2000034c
 8005250:	20000350 	.word	0x20000350

08005254 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
        __asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
    }
 800526c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <vPortEnterCritical+0x58>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vPortEnterCritical+0x58>)
 8005276:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <vPortEnterCritical+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10f      	bne.n	80052a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortEnterCritical+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
    }
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortEnterCritical+0x4a>
    }
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000010 	.word	0x20000010
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vPortExitCritical+0x50>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <vPortExitCritical+0x24>
        __asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
    }
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <vPortExitCritical+0x50>)
 80052e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <vPortExitCritical+0x42>
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80052f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000010 	.word	0x20000010
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7fe ffce 	bl	80042e0 <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
        __asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
    }
 8005390:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005392:	f001 fde1 	bl	8006f58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005396:	f7fe fe89 	bl	80040ac <xTaskIncrementTick>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80053a0:	f001 fe38 	bl	8007014 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <SysTick_Handler+0x50>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e001      	b.n	80053b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80053ae:	f001 fe15 	bl	8006fdc <SEGGER_SYSVIEW_RecordExitISR>
 80053b2:	2300      	movs	r3, #0
 80053b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f383 8811 	msr	BASEPRI, r3
    }
 80053bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	20000000 	.word	0x20000000
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
 8005422:	0000      	.short	0x0000
 8005424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop

0800542c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005432:	f3ef 8305 	mrs	r3, IPSR
 8005436:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b0f      	cmp	r3, #15
 800543c:	d914      	bls.n	8005468 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800543e:	4a17      	ldr	r2, [pc, #92]	; (800549c <vPortValidateInterruptPriority+0x70>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <vPortValidateInterruptPriority+0x74>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	7afa      	ldrb	r2, [r7, #11]
 800544e:	429a      	cmp	r2, r3
 8005450:	d20a      	bcs.n	8005468 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	607b      	str	r3, [r7, #4]
    }
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <vPortValidateInterruptPriority+0x78>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <vPortValidateInterruptPriority+0x7c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d90a      	bls.n	800548e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	603b      	str	r3, [r7, #0]
    }
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <vPortValidateInterruptPriority+0x60>
    }
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000e3f0 	.word	0xe000e3f0
 80054a0:	2000034c 	.word	0x2000034c
 80054a4:	e000ed0c 	.word	0xe000ed0c
 80054a8:	20000350 	.word	0x20000350

080054ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80054b8:	f7fe fcc8 	bl	8003e4c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <pvPortMalloc+0x160>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80054c4:	f000 f908 	bl	80056d8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d012      	beq.n	80054f4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80054ce:	2208      	movs	r2, #8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	3308      	adds	r3, #8
 80054da:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	43db      	mvns	r3, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d804      	bhi.n	80054f0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	4413      	add	r3, r2
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e001      	b.n	80054f4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	db70      	blt.n	80055dc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d06d      	beq.n	80055dc <pvPortMalloc+0x130>
 8005500:	4b43      	ldr	r3, [pc, #268]	; (8005610 <pvPortMalloc+0x164>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d868      	bhi.n	80055dc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <pvPortMalloc+0x168>)
 800550c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800550e:	4b41      	ldr	r3, [pc, #260]	; (8005614 <pvPortMalloc+0x168>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005514:	e004      	b.n	8005520 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d903      	bls.n	8005532 <pvPortMalloc+0x86>
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f1      	bne.n	8005516 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <pvPortMalloc+0x160>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	429a      	cmp	r2, r3
 800553a:	d04f      	beq.n	80055dc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2208      	movs	r2, #8
 8005542:	4413      	add	r3, r2
 8005544:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	2308      	movs	r3, #8
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	429a      	cmp	r2, r3
 800555c:	d91f      	bls.n	800559e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4413      	add	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <pvPortMalloc+0xda>
        __asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	613b      	str	r3, [r7, #16]
    }
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f000 f8f9 	bl	8005790 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800559e:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <pvPortMalloc+0x164>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <pvPortMalloc+0x164>)
 80055aa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055ac:	4b18      	ldr	r3, [pc, #96]	; (8005610 <pvPortMalloc+0x164>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b19      	ldr	r3, [pc, #100]	; (8005618 <pvPortMalloc+0x16c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d203      	bcs.n	80055c0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pvPortMalloc+0x164>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <pvPortMalloc+0x16c>)
 80055be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <pvPortMalloc+0x170>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a10      	ldr	r2, [pc, #64]	; (800561c <pvPortMalloc+0x170>)
 80055da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80055dc:	f7fe fc44 	bl	8003e68 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <pvPortMalloc+0x154>
        __asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
    }
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <pvPortMalloc+0x152>
    return pvReturn;
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3728      	adds	r7, #40	; 0x28
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20012f5c 	.word	0x20012f5c
 8005610:	20012f60 	.word	0x20012f60
 8005614:	20012f54 	.word	0x20012f54
 8005618:	20012f64 	.word	0x20012f64
 800561c:	20012f68 	.word	0x20012f68

08005620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d049      	beq.n	80056c6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005632:	2308      	movs	r3, #8
 8005634:	425b      	negs	r3, r3
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db0a      	blt.n	800565e <vPortFree+0x3e>
        __asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
    }
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <vPortFree+0x5c>
        __asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	60bb      	str	r3, [r7, #8]
    }
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0fdb      	lsrs	r3, r3, #31
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01c      	beq.n	80056c6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d118      	bne.n	80056c6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80056a0:	f7fe fbd4 	bl	8003e4c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <vPortFree+0xb0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <vPortFree+0xb0>)
 80056b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056b2:	6938      	ldr	r0, [r7, #16]
 80056b4:	f000 f86c 	bl	8005790 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vPortFree+0xb4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a05      	ldr	r2, [pc, #20]	; (80056d4 <vPortFree+0xb4>)
 80056c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80056c2:	f7fe fbd1 	bl	8003e68 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80056c6:	bf00      	nop
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20012f60 	.word	0x20012f60
 80056d4:	20012f6c 	.word	0x20012f6c

080056d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056de:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80056e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <prvHeapInit+0xa4>)
 80056e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3307      	adds	r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <prvHeapInit+0xa4>)
 8005708:	4413      	add	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <prvHeapInit+0xa8>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <prvHeapInit+0xa8>)
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4413      	add	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005724:	2208      	movs	r2, #8
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a13      	ldr	r2, [pc, #76]	; (8005784 <prvHeapInit+0xac>)
 8005738:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <prvHeapInit+0xac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <prvHeapInit+0xac>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <prvHeapInit+0xac>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <prvHeapInit+0xb0>)
 8005766:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4a07      	ldr	r2, [pc, #28]	; (800578c <prvHeapInit+0xb4>)
 800576e:	6013      	str	r3, [r2, #0]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000354 	.word	0x20000354
 8005780:	20012f54 	.word	0x20012f54
 8005784:	20012f5c 	.word	0x20012f5c
 8005788:	20012f64 	.word	0x20012f64
 800578c:	20012f60 	.word	0x20012f60

08005790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005798:	4b28      	ldr	r3, [pc, #160]	; (800583c <prvInsertBlockIntoFreeList+0xac>)
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e002      	b.n	80057a4 <prvInsertBlockIntoFreeList+0x14>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d8f7      	bhi.n	800579e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d108      	bne.n	80057d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	441a      	add	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	441a      	add	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d118      	bne.n	8005818 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b15      	ldr	r3, [pc, #84]	; (8005840 <prvInsertBlockIntoFreeList+0xb0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d00d      	beq.n	800580e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e008      	b.n	8005820 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <prvInsertBlockIntoFreeList+0xb0>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e003      	b.n	8005820 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d002      	beq.n	800582e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20012f54 	.word	0x20012f54
 8005840:	20012f5c 	.word	0x20012f5c

08005844 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005848:	4803      	ldr	r0, [pc, #12]	; (8005858 <_cbSendSystemDesc+0x14>)
 800584a:	f001 fb2f 	bl	8006eac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800584e:	4803      	ldr	r0, [pc, #12]	; (800585c <_cbSendSystemDesc+0x18>)
 8005850:	f001 fb2c 	bl	8006eac <SEGGER_SYSVIEW_SendSysDesc>
}
 8005854:	bf00      	nop
 8005856:	bd80      	pop	{r7, pc}
 8005858:	08007ea0 	.word	0x08007ea0
 800585c:	08007ed8 	.word	0x08007ed8

08005860 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <SEGGER_SYSVIEW_Conf+0x20>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <SEGGER_SYSVIEW_Conf+0x20>)
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <SEGGER_SYSVIEW_Conf+0x24>)
 800586e:	4a06      	ldr	r2, [pc, #24]	; (8005888 <SEGGER_SYSVIEW_Conf+0x28>)
 8005870:	f000 fe9a 	bl	80065a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005874:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005878:	f000 feda 	bl	8006630 <SEGGER_SYSVIEW_SetRAMBase>
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000000 	.word	0x20000000
 8005884:	08005845 	.word	0x08005845
 8005888:	08007f74 	.word	0x08007f74

0800588c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	b085      	sub	sp, #20
 8005890:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	e033      	b.n	8005900 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005898:	491e      	ldr	r1, [pc, #120]	; (8005914 <_cbSendTaskList+0x88>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	491a      	ldr	r1, [pc, #104]	; (8005914 <_cbSendTaskList+0x88>)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3304      	adds	r3, #4
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	4c16      	ldr	r4, [pc, #88]	; (8005914 <_cbSendTaskList+0x88>)
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4423      	add	r3, r4
 80058c8:	3308      	adds	r3, #8
 80058ca:	681c      	ldr	r4, [r3, #0]
 80058cc:	4d11      	ldr	r5, [pc, #68]	; (8005914 <_cbSendTaskList+0x88>)
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	442b      	add	r3, r5
 80058da:	330c      	adds	r3, #12
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	4e0d      	ldr	r6, [pc, #52]	; (8005914 <_cbSendTaskList+0x88>)
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4433      	add	r3, r6
 80058ec:	3310      	adds	r3, #16
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	462b      	mov	r3, r5
 80058f4:	4622      	mov	r2, r4
 80058f6:	f000 f8bd 	bl	8005a74 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3301      	adds	r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <_cbSendTaskList+0x8c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d3c6      	bcc.n	8005898 <_cbSendTaskList+0xc>
  }
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005914:	20012f70 	.word	0x20012f70
 8005918:	20013010 	.word	0x20013010

0800591c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800591c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005924:	f7fe fbb0 	bl	8004088 <xTaskGetTickCountFromISR>
 8005928:	4603      	mov	r3, r0
 800592a:	2200      	movs	r2, #0
 800592c:	469a      	mov	sl, r3
 800592e:	4693      	mov	fp, r2
 8005930:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	f04f 0a00 	mov.w	sl, #0
 8005940:	f04f 0b00 	mov.w	fp, #0
 8005944:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005948:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800594c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005950:	4652      	mov	r2, sl
 8005952:	465b      	mov	r3, fp
 8005954:	1a14      	subs	r4, r2, r0
 8005956:	eb63 0501 	sbc.w	r5, r3, r1
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	00ab      	lsls	r3, r5, #2
 8005964:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005968:	00a2      	lsls	r2, r4, #2
 800596a:	4614      	mov	r4, r2
 800596c:	461d      	mov	r5, r3
 800596e:	eb14 0800 	adds.w	r8, r4, r0
 8005972:	eb45 0901 	adc.w	r9, r5, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598a:	4690      	mov	r8, r2
 800598c:	4699      	mov	r9, r3
 800598e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005992:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080059a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80059b2:	2205      	movs	r2, #5
 80059b4:	492b      	ldr	r1, [pc, #172]	; (8005a64 <SYSVIEW_AddTask+0xc0>)
 80059b6:	68b8      	ldr	r0, [r7, #8]
 80059b8:	f001 ff72 	bl	80078a0 <memcmp>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04b      	beq.n	8005a5a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80059c2:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b07      	cmp	r3, #7
 80059c8:	d903      	bls.n	80059d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80059ca:	4828      	ldr	r0, [pc, #160]	; (8005a6c <SYSVIEW_AddTask+0xc8>)
 80059cc:	f001 fd16 	bl	80073fc <SEGGER_SYSVIEW_Warn>
    return;
 80059d0:	e044      	b.n	8005a5c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80059d2:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4926      	ldr	r1, [pc, #152]	; (8005a70 <SYSVIEW_AddTask+0xcc>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4921      	ldr	r1, [pc, #132]	; (8005a70 <SYSVIEW_AddTask+0xcc>)
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3304      	adds	r3, #4
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059fc:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	491b      	ldr	r1, [pc, #108]	; (8005a70 <SYSVIEW_AddTask+0xcc>)
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4916      	ldr	r1, [pc, #88]	; (8005a70 <SYSVIEW_AddTask+0xcc>)
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	330c      	adds	r3, #12
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4910      	ldr	r1, [pc, #64]	; (8005a70 <SYSVIEW_AddTask+0xcc>)
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3310      	adds	r3, #16
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <SYSVIEW_AddTask+0xc4>)
 8005a46:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f80e 	bl	8005a74 <SYSVIEW_SendTaskInfo>
 8005a58:	e000      	b.n	8005a5c <SYSVIEW_AddTask+0xb8>
    return;
 8005a5a:	bf00      	nop

}
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	08007ee8 	.word	0x08007ee8
 8005a68:	20013010 	.word	0x20013010
 8005a6c:	08007ef0 	.word	0x08007ef0
 8005a70:	20012f70 	.word	0x20012f70

08005a74 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a82:	f107 0314 	add.w	r3, r7, #20
 8005a86:	2214      	movs	r2, #20
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 ff18 	bl	80078c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f907 	bl	8006cbc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005aae:	bf00      	nop
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <_DoInit+0xa0>)
 8005ac0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005ac2:	22a8      	movs	r2, #168	; 0xa8
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	6838      	ldr	r0, [r7, #0]
 8005ac8:	f001 fefa 	bl	80078c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	4a20      	ldr	r2, [pc, #128]	; (8005b5c <_DoInit+0xa4>)
 8005adc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <_DoInit+0xa8>)
 8005ae2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <_DoInit+0xa4>)
 8005b02:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <_DoInit+0xac>)
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005b22:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	e00c      	b.n	8005b46 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f1c3 030f 	rsb	r3, r3, #15
 8005b32:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <_DoInit+0xb0>)
 8005b34:	5cd1      	ldrb	r1, [r2, r3]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	460a      	mov	r2, r1
 8005b3e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3301      	adds	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d9ef      	bls.n	8005b2c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005b4c:	f3bf 8f5f 	dmb	sy
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20013014 	.word	0x20013014
 8005b5c:	08007f40 	.word	0x08007f40
 8005b60:	200130bc 	.word	0x200130bc
 8005b64:	200134bc 	.word	0x200134bc
 8005b68:	08007f7c 	.word	0x08007f7c

08005b6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d905      	bls.n	8005b9c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e007      	b.n	8005bac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	1acb      	subs	r3, r1, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bf28      	it	cs
 8005bba:	4613      	movcs	r3, r2
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bf28      	it	cs
 8005bc6:	4613      	movcs	r3, r2
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	6978      	ldr	r0, [r7, #20]
 8005bda:	f001 fed3 	bl	8007984 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	4413      	add	r3, r2
 8005be4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	4413      	add	r3, r2
 8005bec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d101      	bne.n	8005c0c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1b2      	bne.n	8005b82 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3728      	adds	r7, #40	; 0x28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b088      	sub	sp, #32
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d911      	bls.n	8005c6e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	6938      	ldr	r0, [r7, #16]
 8005c5a:	f001 fe93 	bl	8007984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005c6c:	e01f      	b.n	8005cae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	6938      	ldr	r0, [r7, #16]
 8005c82:	f001 fe7f 	bl	8007984 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	4413      	add	r3, r2
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6938      	ldr	r0, [r7, #16]
 8005ca0:	f001 fe70 	bl	8007984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ca4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	60da      	str	r2, [r3, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005cb6:	b480      	push	{r7}
 8005cb8:	b087      	sub	sp, #28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d808      	bhi.n	8005ce4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	e004      	b.n	8005cee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	; 0x30
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005d08:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b53      	cmp	r3, #83	; 0x53
 8005d14:	d001      	beq.n	8005d1a <SEGGER_RTT_ReadNoLock+0x1e>
 8005d16:	f7ff fecf 	bl	8005ab8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	3360      	adds	r3, #96	; 0x60
 8005d26:	4a37      	ldr	r2, [pc, #220]	; (8005e04 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d92b      	bls.n	8005da0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bf28      	it	cs
 8005d5a:	4613      	movcs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	4413      	add	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	6939      	ldr	r1, [r7, #16]
 8005d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d6e:	f001 fe09 	bl	8007984 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4413      	add	r3, r2
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d101      	bne.n	8005da0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf28      	it	cs
 8005db0:	4613      	movcs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d019      	beq.n	8005dee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	4413      	add	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dca:	f001 fddb 	bl	8007984 <memcpy>
    NumBytesRead += NumBytesRem;
 8005dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	4413      	add	r3, r2
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20013014 	.word	0x20013014

08005e08 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005e26:	4413      	add	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d029      	beq.n	8005e86 <SEGGER_RTT_WriteNoLock+0x7e>
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d82e      	bhi.n	8005e94 <SEGGER_RTT_WriteNoLock+0x8c>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <SEGGER_RTT_WriteNoLock+0x38>
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d013      	beq.n	8005e66 <SEGGER_RTT_WriteNoLock+0x5e>
 8005e3e:	e029      	b.n	8005e94 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f7ff ff38 	bl	8005cb6 <_GetAvailWriteSpace>
 8005e46:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d202      	bcs.n	8005e56 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005e54:	e021      	b.n	8005e9a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	6978      	ldr	r0, [r7, #20]
 8005e60:	f7ff fee1 	bl	8005c26 <_WriteNoCheck>
    break;
 8005e64:	e019      	b.n	8005e9a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f7ff ff25 	bl	8005cb6 <_GetAvailWriteSpace>
 8005e6c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bf28      	it	cs
 8005e76:	4613      	movcs	r3, r2
 8005e78:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	69b9      	ldr	r1, [r7, #24]
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f7ff fed1 	bl	8005c26 <_WriteNoCheck>
    break;
 8005e84:	e009      	b.n	8005e9a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff fe6e 	bl	8005b6c <_WriteBlocking>
 8005e90:	61f8      	str	r0, [r7, #28]
    break;
 8005e92:	e002      	b.n	8005e9a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005e94:	2300      	movs	r3, #0
 8005e96:	61fb      	str	r3, [r7, #28]
    break;
 8005e98:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20013014 	.word	0x20013014

08005ea8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <SEGGER_RTT_Write+0x48>)
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b53      	cmp	r3, #83	; 0x53
 8005ec0:	d001      	beq.n	8005ec6 <SEGGER_RTT_Write+0x1e>
 8005ec2:	f7ff fdf9 	bl	8005ab8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eca:	f04f 0120 	mov.w	r1, #32
 8005ece:	f381 8811 	msr	BASEPRI, r1
 8005ed2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff ff95 	bl	8005e08 <SEGGER_RTT_WriteNoLock>
 8005ede:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005ee6:	697b      	ldr	r3, [r7, #20]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20013014 	.word	0x20013014

08005ef4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f02:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b53      	cmp	r3, #83	; 0x53
 8005f0e:	d001      	beq.n	8005f14 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005f10:	f7ff fdd2 	bl	8005ab8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005f14:	f3ef 8311 	mrs	r3, BASEPRI
 8005f18:	f04f 0120 	mov.w	r1, #32
 8005f1c:	f381 8811 	msr	BASEPRI, r1
 8005f20:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f22:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f24:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005f2a:	6939      	ldr	r1, [r7, #16]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	dbeb      	blt.n	8005f2a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005f52:	e000      	b.n	8005f56 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005f54:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	da3f      	bge.n	8005fe0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005f60:	6939      	ldr	r1, [r7, #16]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f74:	6939      	ldr	r1, [r7, #16]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	440b      	add	r3, r1
 8005f84:	3304      	adds	r3, #4
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005f8a:	6939      	ldr	r1, [r7, #16]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	440b      	add	r3, r1
 8005f98:	3320      	adds	r3, #32
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005f9e:	6939      	ldr	r1, [r7, #16]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	440b      	add	r3, r1
 8005fac:	3328      	adds	r3, #40	; 0x28
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005fc6:	6939      	ldr	r1, [r7, #16]
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	440b      	add	r3, r1
 8005fd4:	332c      	adds	r3, #44	; 0x2c
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fda:	f3bf 8f5f 	dmb	sy
 8005fde:	e002      	b.n	8005fe6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005fec:	69fb      	ldr	r3, [r7, #28]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20013014 	.word	0x20013014

08005ffc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b53      	cmp	r3, #83	; 0x53
 8006016:	d001      	beq.n	800601c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006018:	f7ff fd4e 	bl	8005ab8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800601c:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800601e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d82c      	bhi.n	8006080 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006026:	f3ef 8311 	mrs	r3, BASEPRI
 800602a:	f04f 0120 	mov.w	r1, #32
 800602e:	f381 8811 	msr	BASEPRI, r1
 8006032:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4613      	mov	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	3360      	adds	r3, #96	; 0x60
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006070:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800607a:	2300      	movs	r3, #0
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	e002      	b.n	8006086 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006080:	f04f 33ff 	mov.w	r3, #4294967295
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20013014 	.word	0x20013014

08006094 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	60fa      	str	r2, [r7, #12]
 80060aa:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d90a      	bls.n	80060c8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80060b6:	e007      	b.n	80060c8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	1c53      	adds	r3, r2, #1
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	60f9      	str	r1, [r7, #12]
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1e5a      	subs	r2, r3, #1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <_EncodeStr+0x46>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ee      	bne.n	80060b8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3307      	adds	r3, #7
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006112:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <_HandleIncomingPacket+0xd8>)
 8006114:	7e1b      	ldrb	r3, [r3, #24]
 8006116:	4618      	mov	r0, r3
 8006118:	1cfb      	adds	r3, r7, #3
 800611a:	2201      	movs	r2, #1
 800611c:	4619      	mov	r1, r3
 800611e:	f7ff fded 	bl	8005cfc <SEGGER_RTT_ReadNoLock>
 8006122:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d057      	beq.n	80061da <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d031      	beq.n	8006194 <_HandleIncomingPacket+0x88>
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	dc40      	bgt.n	80061b6 <_HandleIncomingPacket+0xaa>
 8006134:	2b07      	cmp	r3, #7
 8006136:	dc15      	bgt.n	8006164 <_HandleIncomingPacket+0x58>
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd3c      	ble.n	80061b6 <_HandleIncomingPacket+0xaa>
 800613c:	3b01      	subs	r3, #1
 800613e:	2b06      	cmp	r3, #6
 8006140:	d839      	bhi.n	80061b6 <_HandleIncomingPacket+0xaa>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <_HandleIncomingPacket+0x3c>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800616b 	.word	0x0800616b
 800614c:	08006171 	.word	0x08006171
 8006150:	08006177 	.word	0x08006177
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006183 	.word	0x08006183
 800615c:	08006189 	.word	0x08006189
 8006160:	0800618f 	.word	0x0800618f
 8006164:	2b7f      	cmp	r3, #127	; 0x7f
 8006166:	d033      	beq.n	80061d0 <_HandleIncomingPacket+0xc4>
 8006168:	e025      	b.n	80061b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800616a:	f000 fc2d 	bl	80069c8 <SEGGER_SYSVIEW_Start>
      break;
 800616e:	e034      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006170:	f000 fce4 	bl	8006b3c <SEGGER_SYSVIEW_Stop>
      break;
 8006174:	e031      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006176:	f000 febd 	bl	8006ef4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800617a:	e02e      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800617c:	f000 fe82 	bl	8006e84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006180:	e02b      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006182:	f000 fd01 	bl	8006b88 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006186:	e028      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006188:	f001 f8fa 	bl	8007380 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800618c:	e025      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800618e:	f001 f8d9 	bl	8007344 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006192:	e022      	b.n	80061da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006194:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <_HandleIncomingPacket+0xd8>)
 8006196:	7e1b      	ldrb	r3, [r3, #24]
 8006198:	4618      	mov	r0, r3
 800619a:	1cfb      	adds	r3, r7, #3
 800619c:	2201      	movs	r2, #1
 800619e:	4619      	mov	r1, r3
 80061a0:	f7ff fdac 	bl	8005cfc <SEGGER_RTT_ReadNoLock>
 80061a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d013      	beq.n	80061d4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 f83e 	bl	8007230 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80061b4:	e00e      	b.n	80061d4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	da0c      	bge.n	80061d8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <_HandleIncomingPacket+0xd8>)
 80061c0:	7e1b      	ldrb	r3, [r3, #24]
 80061c2:	4618      	mov	r0, r3
 80061c4:	1cfb      	adds	r3, r7, #3
 80061c6:	2201      	movs	r2, #1
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7ff fd97 	bl	8005cfc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80061ce:	e003      	b.n	80061d8 <_HandleIncomingPacket+0xcc>
      break;
 80061d0:	bf00      	nop
 80061d2:	e002      	b.n	80061da <_HandleIncomingPacket+0xce>
      break;
 80061d4:	bf00      	nop
 80061d6:	e000      	b.n	80061da <_HandleIncomingPacket+0xce>
      break;
 80061d8:	bf00      	nop
    }
  }
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200144d4 	.word	0x200144d4

080061e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061ee:	2301      	movs	r3, #1
 80061f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	3301      	adds	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
 8006202:	e00b      	b.n	800621c <_TrySendOverflowPacket+0x34>
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	1c59      	adds	r1, r3, #1
 800620c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800620e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b7f      	cmp	r3, #127	; 0x7f
 8006220:	d8f0      	bhi.n	8006204 <_TrySendOverflowPacket+0x1c>
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006232:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <_TrySendOverflowPacket+0xe0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006238:	4b22      	ldr	r3, [pc, #136]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e00b      	b.n	8006264 <_TrySendOverflowPacket+0x7c>
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	6279      	str	r1, [r7, #36]	; 0x24
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <_TrySendOverflowPacket+0x64>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	627a      	str	r2, [r7, #36]	; 0x24
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	4618      	mov	r0, r3
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	461a      	mov	r2, r3
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	4619      	mov	r1, r3
 800628c:	f7f9 ffa8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006290:	4603      	mov	r3, r0
 8006292:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e004      	b.n	80062b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <_TrySendOverflowPacket+0xdc>)
 80062b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80062b8:	693b      	ldr	r3, [r7, #16]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3730      	adds	r7, #48	; 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200144d4 	.word	0x200144d4
 80062c8:	e0001004 	.word	0xe0001004

080062cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80062d8:	4b98      	ldr	r3, [pc, #608]	; (800653c <_SendPacket+0x270>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d010      	beq.n	8006302 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80062e0:	4b96      	ldr	r3, [pc, #600]	; (800653c <_SendPacket+0x270>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 812d 	beq.w	8006544 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80062ea:	4b94      	ldr	r3, [pc, #592]	; (800653c <_SendPacket+0x270>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d109      	bne.n	8006306 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80062f2:	f7ff ff79 	bl	80061e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80062f6:	4b91      	ldr	r3, [pc, #580]	; (800653c <_SendPacket+0x270>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	f040 8124 	bne.w	8006548 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006300:	e001      	b.n	8006306 <_SendPacket+0x3a>
    goto Send;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <_SendPacket+0x3c>
Send:
 8006306:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b1f      	cmp	r3, #31
 800630c:	d809      	bhi.n	8006322 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800630e:	4b8b      	ldr	r3, [pc, #556]	; (800653c <_SendPacket+0x270>)
 8006310:	69da      	ldr	r2, [r3, #28]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8115 	bne.w	800654c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b17      	cmp	r3, #23
 8006326:	d807      	bhi.n	8006338 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3b01      	subs	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e0c4      	b.n	80064c2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	2b7f      	cmp	r3, #127	; 0x7f
 8006344:	d912      	bls.n	800636c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	09da      	lsrs	r2, r3, #7
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b01      	subs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	3a01      	subs	r2, #1
 800635e:	60fa      	str	r2, [r7, #12]
 8006360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e006      	b.n	800637a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b7e      	cmp	r3, #126	; 0x7e
 800637e:	d807      	bhi.n	8006390 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e098      	b.n	80064c2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006396:	d212      	bcs.n	80063be <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	09da      	lsrs	r2, r3, #7
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3b01      	subs	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	3a01      	subs	r2, #1
 80063b0:	60fa      	str	r2, [r7, #12]
 80063b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e081      	b.n	80064c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063c4:	d21d      	bcs.n	8006402 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	0b9a      	lsrs	r2, r3, #14
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	09db      	lsrs	r3, r3, #7
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	3a01      	subs	r2, #1
 80063e0:	60fa      	str	r2, [r7, #12]
 80063e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	3a01      	subs	r2, #1
 80063f4:	60fa      	str	r2, [r7, #12]
 80063f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e05f      	b.n	80064c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006408:	d228      	bcs.n	800645c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0d5a      	lsrs	r2, r3, #21
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b01      	subs	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	0b9b      	lsrs	r3, r3, #14
 800641e:	b2db      	uxtb	r3, r3
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	3a01      	subs	r2, #1
 8006424:	60fa      	str	r2, [r7, #12]
 8006426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	09db      	lsrs	r3, r3, #7
 8006434:	b2db      	uxtb	r3, r3
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	3a01      	subs	r2, #1
 800643a:	60fa      	str	r2, [r7, #12]
 800643c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	3a01      	subs	r2, #1
 800644e:	60fa      	str	r2, [r7, #12]
 8006450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006454:	b2da      	uxtb	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	e032      	b.n	80064c2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	0f1a      	lsrs	r2, r3, #28
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3b01      	subs	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0d5b      	lsrs	r3, r3, #21
 8006470:	b2db      	uxtb	r3, r3
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	3a01      	subs	r2, #1
 8006476:	60fa      	str	r2, [r7, #12]
 8006478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0b9b      	lsrs	r3, r3, #14
 8006486:	b2db      	uxtb	r3, r3
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	3a01      	subs	r2, #1
 800648c:	60fa      	str	r2, [r7, #12]
 800648e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	09db      	lsrs	r3, r3, #7
 800649c:	b2db      	uxtb	r3, r3
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	3a01      	subs	r2, #1
 80064a2:	60fa      	str	r2, [r7, #12]
 80064a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	3a01      	subs	r2, #1
 80064b6:	60fa      	str	r2, [r7, #12]
 80064b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064c2:	4b1f      	ldr	r3, [pc, #124]	; (8006540 <_SendPacket+0x274>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <_SendPacket+0x270>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e00b      	b.n	80064f4 <_SendPacket+0x228>
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	6279      	str	r1, [r7, #36]	; 0x24
 80064e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	09db      	lsrs	r3, r3, #7
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b7f      	cmp	r3, #127	; 0x7f
 80064f8:	d8f0      	bhi.n	80064dc <_SendPacket+0x210>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800650a:	4b0c      	ldr	r3, [pc, #48]	; (800653c <_SendPacket+0x270>)
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	4618      	mov	r0, r3
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	461a      	mov	r2, r3
 8006518:	68f9      	ldr	r1, [r7, #12]
 800651a:	f7f9 fe61 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800651e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006526:	4a05      	ldr	r2, [pc, #20]	; (800653c <_SendPacket+0x270>)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	60d3      	str	r3, [r2, #12]
 800652c:	e00f      	b.n	800654e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800652e:	4b03      	ldr	r3, [pc, #12]	; (800653c <_SendPacket+0x270>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4b01      	ldr	r3, [pc, #4]	; (800653c <_SendPacket+0x270>)
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e008      	b.n	800654e <_SendPacket+0x282>
 800653c:	200144d4 	.word	0x200144d4
 8006540:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006544:	bf00      	nop
 8006546:	e002      	b.n	800654e <_SendPacket+0x282>
      goto SendDone;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <_SendPacket+0x282>
      goto SendDone;
 800654c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <_SendPacket+0x2d4>)
 8006550:	7e1b      	ldrb	r3, [r3, #24]
 8006552:	4619      	mov	r1, r3
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <_SendPacket+0x2d8>)
 8006556:	460b      	mov	r3, r1
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	440b      	add	r3, r1
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	336c      	adds	r3, #108	; 0x6c
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <_SendPacket+0x2d4>)
 8006566:	7e1b      	ldrb	r3, [r3, #24]
 8006568:	4618      	mov	r0, r3
 800656a:	490e      	ldr	r1, [pc, #56]	; (80065a4 <_SendPacket+0x2d8>)
 800656c:	4603      	mov	r3, r0
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4403      	add	r3, r0
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	440b      	add	r3, r1
 8006576:	3370      	adds	r3, #112	; 0x70
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d00b      	beq.n	8006596 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <_SendPacket+0x2d4>)
 8006580:	789b      	ldrb	r3, [r3, #2]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <_SendPacket+0x2d4>)
 8006588:	2201      	movs	r2, #1
 800658a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800658c:	f7ff fdbe 	bl	800610c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <_SendPacket+0x2d4>)
 8006592:	2200      	movs	r2, #0
 8006594:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006596:	bf00      	nop
 8006598:	3728      	adds	r7, #40	; 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200144d4 	.word	0x200144d4
 80065a4:	20013014 	.word	0x20013014

080065a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065b6:	2300      	movs	r3, #0
 80065b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065bc:	4917      	ldr	r1, [pc, #92]	; (800661c <SEGGER_SYSVIEW_Init+0x74>)
 80065be:	4818      	ldr	r0, [pc, #96]	; (8006620 <SEGGER_SYSVIEW_Init+0x78>)
 80065c0:	f7ff fc98 	bl	8005ef4 <SEGGER_RTT_AllocUpBuffer>
 80065c4:	4603      	mov	r3, r0
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b16      	ldr	r3, [pc, #88]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ce:	785a      	ldrb	r2, [r3, #1]
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d6:	7e1b      	ldrb	r3, [r3, #24]
 80065d8:	4618      	mov	r0, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	2308      	movs	r3, #8
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <SEGGER_SYSVIEW_Init+0x80>)
 80065e2:	490f      	ldr	r1, [pc, #60]	; (8006620 <SEGGER_SYSVIEW_Init+0x78>)
 80065e4:	f7ff fd0a 	bl	8005ffc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <SEGGER_SYSVIEW_Init+0x84>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80065f6:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80065fc:	4a09      	ldr	r2, [pc, #36]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006602:	4a08      	ldr	r2, [pc, #32]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <SEGGER_SYSVIEW_Init+0x7c>)
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200134cc 	.word	0x200134cc
 8006620:	08007f54 	.word	0x08007f54
 8006624:	200144d4 	.word	0x200144d4
 8006628:	200144cc 	.word	0x200144cc
 800662c:	e0001004 	.word	0xe0001004

08006630 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006638:	4a04      	ldr	r2, [pc, #16]	; (800664c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6113      	str	r3, [r2, #16]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	200144d4 	.word	0x200144d4

08006650 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006658:	f3ef 8311 	mrs	r3, BASEPRI
 800665c:	f04f 0120 	mov.w	r1, #32
 8006660:	f381 8811 	msr	BASEPRI, r1
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4808      	ldr	r0, [pc, #32]	; (8006688 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006668:	f7ff fd44 	bl	80060f4 <_PreparePacket>
 800666c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	f7ff fe2a 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20014504 	.word	0x20014504

0800668c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006696:	f3ef 8311 	mrs	r3, BASEPRI
 800669a:	f04f 0120 	mov.w	r1, #32
 800669e:	f381 8811 	msr	BASEPRI, r1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	4816      	ldr	r0, [pc, #88]	; (8006700 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80066a6:	f7ff fd25 	bl	80060f4 <_PreparePacket>
 80066aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e00b      	b.n	80066d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	61f9      	str	r1, [r7, #28]
 80066c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b7f      	cmp	r3, #127	; 0x7f
 80066d6:	d8f0      	bhi.n	80066ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	61fa      	str	r2, [r7, #28]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6938      	ldr	r0, [r7, #16]
 80066ee:	f7ff fded 	bl	80062cc <_SendPacket>
  RECORD_END();
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f383 8811 	msr	BASEPRI, r3
}
 80066f8:	bf00      	nop
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20014504 	.word	0x20014504

08006704 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006710:	f3ef 8311 	mrs	r3, BASEPRI
 8006714:	f04f 0120 	mov.w	r1, #32
 8006718:	f381 8811 	msr	BASEPRI, r1
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	4825      	ldr	r0, [pc, #148]	; (80067b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006720:	f7ff fce8 	bl	80060f4 <_PreparePacket>
 8006724:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
 8006732:	e00b      	b.n	800674c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800673e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	09db      	lsrs	r3, r3, #7
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2b7f      	cmp	r3, #127	; 0x7f
 8006750:	d8f0      	bhi.n	8006734 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	e00b      	b.n	8006784 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	6279      	str	r1, [r7, #36]	; 0x24
 8006776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b7f      	cmp	r3, #127	; 0x7f
 8006788:	d8f0      	bhi.n	800676c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	627a      	str	r2, [r7, #36]	; 0x24
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	69b8      	ldr	r0, [r7, #24]
 80067a0:	f7ff fd94 	bl	80062cc <_SendPacket>
  RECORD_END();
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f383 8811 	msr	BASEPRI, r3
}
 80067aa:	bf00      	nop
 80067ac:	3730      	adds	r7, #48	; 0x30
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20014504 	.word	0x20014504

080067b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80067c6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ca:	f04f 0120 	mov.w	r1, #32
 80067ce:	f381 8811 	msr	BASEPRI, r1
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	4832      	ldr	r0, [pc, #200]	; (80068a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80067d6:	f7ff fc8d 	bl	80060f4 <_PreparePacket>
 80067da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	633b      	str	r3, [r7, #48]	; 0x30
 80067e8:	e00b      	b.n	8006802 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	6379      	str	r1, [r7, #52]	; 0x34
 80067f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	633b      	str	r3, [r7, #48]	; 0x30
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	2b7f      	cmp	r3, #127	; 0x7f
 8006806:	d8f0      	bhi.n	80067ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	637a      	str	r2, [r7, #52]	; 0x34
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006820:	e00b      	b.n	800683a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	b2da      	uxtb	r2, r3
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	1c59      	adds	r1, r3, #1
 800682a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800682c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	09db      	lsrs	r3, r3, #7
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	2b7f      	cmp	r3, #127	; 0x7f
 800683e:	d8f0      	bhi.n	8006822 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	e00b      	b.n	8006872 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	1c59      	adds	r1, r3, #1
 8006862:	6279      	str	r1, [r7, #36]	; 0x24
 8006864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2b7f      	cmp	r3, #127	; 0x7f
 8006876:	d8f0      	bhi.n	800685a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	627a      	str	r2, [r7, #36]	; 0x24
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	69b8      	ldr	r0, [r7, #24]
 800688e:	f7ff fd1d 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f383 8811 	msr	BASEPRI, r3
}
 8006898:	bf00      	nop
 800689a:	3738      	adds	r7, #56	; 0x38
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20014504 	.word	0x20014504

080068a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b090      	sub	sp, #64	; 0x40
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068b2:	f3ef 8311 	mrs	r3, BASEPRI
 80068b6:	f04f 0120 	mov.w	r1, #32
 80068ba:	f381 8811 	msr	BASEPRI, r1
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	4840      	ldr	r0, [pc, #256]	; (80069c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80068c2:	f7ff fc17 	bl	80060f4 <_PreparePacket>
 80068c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068d4:	e00b      	b.n	80068ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068dc:	1c59      	adds	r1, r3, #1
 80068de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	09db      	lsrs	r3, r3, #7
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b7f      	cmp	r3, #127	; 0x7f
 80068f2:	d8f0      	bhi.n	80068d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
 800690c:	e00b      	b.n	8006926 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	6379      	str	r1, [r7, #52]	; 0x34
 8006918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	2b7f      	cmp	r3, #127	; 0x7f
 800692a:	d8f0      	bhi.n	800690e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	637a      	str	r2, [r7, #52]	; 0x34
 8006932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
 8006944:	e00b      	b.n	800695e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	b2da      	uxtb	r2, r3
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	09db      	lsrs	r3, r3, #7
 800695c:	62bb      	str	r3, [r7, #40]	; 0x28
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	2b7f      	cmp	r3, #127	; 0x7f
 8006962:	d8f0      	bhi.n	8006946 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
 8006978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	e00b      	b.n	8006996 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	6279      	str	r1, [r7, #36]	; 0x24
 8006988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	623b      	str	r3, [r7, #32]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b7f      	cmp	r3, #127	; 0x7f
 800699a:	d8f0      	bhi.n	800697e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	627a      	str	r2, [r7, #36]	; 0x24
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	69b8      	ldr	r0, [r7, #24]
 80069b2:	f7ff fc8b 	bl	80062cc <_SendPacket>
  RECORD_END();
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f383 8811 	msr	BASEPRI, r3
}
 80069bc:	bf00      	nop
 80069be:	3740      	adds	r7, #64	; 0x40
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20014504 	.word	0x20014504

080069c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80069ce:	4b58      	ldr	r3, [pc, #352]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80069d4:	f3ef 8311 	mrs	r3, BASEPRI
 80069d8:	f04f 0120 	mov.w	r1, #32
 80069dc:	f381 8811 	msr	BASEPRI, r1
 80069e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069e2:	4b53      	ldr	r3, [pc, #332]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	220a      	movs	r2, #10
 80069e8:	4952      	ldr	r1, [pc, #328]	; (8006b34 <SEGGER_SYSVIEW_Start+0x16c>)
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7f9 fbf8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80069f6:	200a      	movs	r0, #10
 80069f8:	f7ff fe2a 	bl	8006650 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006a00:	f04f 0120 	mov.w	r1, #32
 8006a04:	f381 8811 	msr	BASEPRI, r1
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	484b      	ldr	r0, [pc, #300]	; (8006b38 <SEGGER_SYSVIEW_Start+0x170>)
 8006a0c:	f7ff fb72 	bl	80060f4 <_PreparePacket>
 8006a10:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1a:	4b45      	ldr	r3, [pc, #276]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a20:	e00b      	b.n	8006a3a <SEGGER_SYSVIEW_Start+0x72>
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3e:	d8f0      	bhi.n	8006a22 <SEGGER_SYSVIEW_Start+0x5a>
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	4b36      	ldr	r3, [pc, #216]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_Start+0xac>
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	6279      	str	r1, [r7, #36]	; 0x24
 8006a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_Start+0x94>
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	e00b      	b.n	8006aae <SEGGER_SYSVIEW_Start+0xe6>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	1c59      	adds	r1, r3, #1
 8006a9e:	61f9      	str	r1, [r7, #28]
 8006aa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	09db      	lsrs	r3, r3, #7
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab2:	d8f0      	bhi.n	8006a96 <SEGGER_SYSVIEW_Start+0xce>
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	61fa      	str	r2, [r7, #28]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	e00b      	b.n	8006ae6 <SEGGER_SYSVIEW_Start+0x11e>
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	6179      	str	r1, [r7, #20]
 8006ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	09db      	lsrs	r3, r3, #7
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aea:	d8f0      	bhi.n	8006ace <SEGGER_SYSVIEW_Start+0x106>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	617a      	str	r2, [r7, #20]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006afc:	2218      	movs	r2, #24
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fbe3 	bl	80062cc <_SendPacket>
      RECORD_END();
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <SEGGER_SYSVIEW_Start+0x168>)
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b1a:	f000 f9eb 	bl	8006ef4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b1e:	f000 f9b1 	bl	8006e84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b22:	f000 fc2d 	bl	8007380 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b26:	bf00      	nop
 8006b28:	3730      	adds	r7, #48	; 0x30
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200144d4 	.word	0x200144d4
 8006b34:	08007f90 	.word	0x08007f90
 8006b38:	20014504 	.word	0x20014504

08006b3c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b42:	f3ef 8311 	mrs	r3, BASEPRI
 8006b46:	f04f 0120 	mov.w	r1, #32
 8006b4a:	f381 8811 	msr	BASEPRI, r1
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	480b      	ldr	r0, [pc, #44]	; (8006b80 <SEGGER_SYSVIEW_Stop+0x44>)
 8006b52:	f7ff facf 	bl	80060f4 <_PreparePacket>
 8006b56:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b60:	220b      	movs	r2, #11
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6838      	ldr	r0, [r7, #0]
 8006b66:	f7ff fbb1 	bl	80062cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f383 8811 	msr	BASEPRI, r3
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20014504 	.word	0x20014504
 8006b84:	200144d4 	.word	0x200144d4

08006b88 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b92:	f04f 0120 	mov.w	r1, #32
 8006b96:	f381 8811 	msr	BASEPRI, r1
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	4845      	ldr	r0, [pc, #276]	; (8006cb4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b9e:	f7ff faa9 	bl	80060f4 <_PreparePacket>
 8006ba2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bac:	4b42      	ldr	r3, [pc, #264]	; (8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb2:	e00b      	b.n	8006bcc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	09db      	lsrs	r3, r3, #7
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd0:	d8f0      	bhi.n	8006bb4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	623b      	str	r3, [r7, #32]
 8006bec:	e00b      	b.n	8006c06 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1c59      	adds	r1, r3, #1
 8006bf6:	6279      	str	r1, [r7, #36]	; 0x24
 8006bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	09db      	lsrs	r3, r3, #7
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0a:	d8f0      	bhi.n	8006bee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	627a      	str	r2, [r7, #36]	; 0x24
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	e00b      	b.n	8006c40 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	1c59      	adds	r1, r3, #1
 8006c30:	61f9      	str	r1, [r7, #28]
 8006c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	09db      	lsrs	r3, r3, #7
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b7f      	cmp	r3, #127	; 0x7f
 8006c44:	d8f0      	bhi.n	8006c28 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	61fa      	str	r2, [r7, #28]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	e00b      	b.n	8006c78 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	6179      	str	r1, [r7, #20]
 8006c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	09db      	lsrs	r3, r3, #7
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7c:	d8f0      	bhi.n	8006c60 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	617a      	str	r2, [r7, #20]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c8e:	2218      	movs	r2, #24
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	68b8      	ldr	r0, [r7, #8]
 8006c94:	f7ff fb1a 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ca6:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	4798      	blx	r3
  }
}
 8006cac:	bf00      	nop
 8006cae:	3730      	adds	r7, #48	; 0x30
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20014504 	.word	0x20014504
 8006cb8:	200144d4 	.word	0x200144d4

08006cbc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b092      	sub	sp, #72	; 0x48
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc8:	f04f 0120 	mov.w	r1, #32
 8006ccc:	f381 8811 	msr	BASEPRI, r1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	486a      	ldr	r0, [pc, #424]	; (8006e7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006cd4:	f7ff fa0e 	bl	80060f4 <_PreparePacket>
 8006cd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b66      	ldr	r3, [pc, #408]	; (8006e80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	643b      	str	r3, [r7, #64]	; 0x40
 8006cee:	e00b      	b.n	8006d08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf6:	1c59      	adds	r1, r3, #1
 8006cf8:	6479      	str	r1, [r7, #68]	; 0x44
 8006cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d04:	09db      	lsrs	r3, r3, #7
 8006d06:	643b      	str	r3, [r7, #64]	; 0x40
 8006d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d0c:	d8f0      	bhi.n	8006cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	647a      	str	r2, [r7, #68]	; 0x44
 8006d14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d28:	e00b      	b.n	8006d42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	09db      	lsrs	r3, r3, #7
 8006d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	2b7f      	cmp	r3, #127	; 0x7f
 8006d46:	d8f0      	bhi.n	8006d2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff f997 	bl	8006094 <_EncodeStr>
 8006d66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d68:	2209      	movs	r2, #9
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6938      	ldr	r0, [r7, #16]
 8006d6e:	f7ff faad 	bl	80062cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
 8006d86:	e00b      	b.n	8006da0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	6379      	str	r1, [r7, #52]	; 0x34
 8006d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	09db      	lsrs	r3, r3, #7
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b7f      	cmp	r3, #127	; 0x7f
 8006da4:	d8f0      	bhi.n	8006d88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	637a      	str	r2, [r7, #52]	; 0x34
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc0:	e00b      	b.n	8006dda <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	1c59      	adds	r1, r3, #1
 8006dca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	09db      	lsrs	r3, r3, #7
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dde:	d8f0      	bhi.n	8006dc2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	e00b      	b.n	8006e14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	6279      	str	r1, [r7, #36]	; 0x24
 8006e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	09db      	lsrs	r3, r3, #7
 8006e12:	623b      	str	r3, [r7, #32]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b7f      	cmp	r3, #127	; 0x7f
 8006e18:	d8f0      	bhi.n	8006dfc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e00b      	b.n	8006e4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	61f9      	str	r1, [r7, #28]
 8006e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	09db      	lsrs	r3, r3, #7
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e50:	d8f0      	bhi.n	8006e34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e62:	2215      	movs	r2, #21
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	6938      	ldr	r0, [r7, #16]
 8006e68:	f7ff fa30 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f383 8811 	msr	BASEPRI, r3
}
 8006e72:	bf00      	nop
 8006e74:	3748      	adds	r7, #72	; 0x48
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20014504 	.word	0x20014504
 8006e80:	200144d4 	.word	0x200144d4

08006e84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e9a:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4798      	blx	r3
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200144d4 	.word	0x200144d4

08006eac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb8:	f04f 0120 	mov.w	r1, #32
 8006ebc:	f381 8811 	msr	BASEPRI, r1
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	480b      	ldr	r0, [pc, #44]	; (8006ef0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ec4:	f7ff f916 	bl	80060f4 <_PreparePacket>
 8006ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eca:	2280      	movs	r2, #128	; 0x80
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	6938      	ldr	r0, [r7, #16]
 8006ed0:	f7ff f8e0 	bl	8006094 <_EncodeStr>
 8006ed4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ed6:	220e      	movs	r2, #14
 8006ed8:	68f9      	ldr	r1, [r7, #12]
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f7ff f9f6 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f383 8811 	msr	BASEPRI, r3
}
 8006ee6:	bf00      	nop
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20014504 	.word	0x20014504

08006ef4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006efa:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01a      	beq.n	8006f38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d015      	beq.n	8006f38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4798      	blx	r3
 8006f14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	000a      	movs	r2, r1
 8006f28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4621      	mov	r1, r4
 8006f30:	200d      	movs	r0, #13
 8006f32:	f7ff fbe7 	bl	8006704 <SEGGER_SYSVIEW_RecordU32x2>
 8006f36:	e006      	b.n	8006f46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	200c      	movs	r0, #12
 8006f40:	f7ff fba4 	bl	800668c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd90      	pop	{r4, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200144d4 	.word	0x200144d4
 8006f54:	e0001004 	.word	0xe0001004

08006f58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f62:	f04f 0120 	mov.w	r1, #32
 8006f66:	f381 8811 	msr	BASEPRI, r1
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	4819      	ldr	r0, [pc, #100]	; (8006fd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f6e:	f7ff f8c1 	bl	80060f4 <_PreparePacket>
 8006f72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f78:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	e00b      	b.n	8006fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	6179      	str	r1, [r7, #20]
 8006f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	09db      	lsrs	r3, r3, #7
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa8:	d8f0      	bhi.n	8006f8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	617a      	str	r2, [r7, #20]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006fba:	2202      	movs	r2, #2
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	68b8      	ldr	r0, [r7, #8]
 8006fc0:	f7ff f984 	bl	80062cc <_SendPacket>
  RECORD_END();
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f383 8811 	msr	BASEPRI, r3
}
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20014504 	.word	0x20014504
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe6:	f04f 0120 	mov.w	r1, #32
 8006fea:	f381 8811 	msr	BASEPRI, r1
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	4807      	ldr	r0, [pc, #28]	; (8007010 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ff2:	f7ff f87f 	bl	80060f4 <_PreparePacket>
 8006ff6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6838      	ldr	r0, [r7, #0]
 8006ffe:	f7ff f965 	bl	80062cc <_SendPacket>
  RECORD_END();
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f383 8811 	msr	BASEPRI, r3
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20014504 	.word	0x20014504

08007014 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	f04f 0120 	mov.w	r1, #32
 8007022:	f381 8811 	msr	BASEPRI, r1
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	4807      	ldr	r0, [pc, #28]	; (8007048 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800702a:	f7ff f863 	bl	80060f4 <_PreparePacket>
 800702e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007030:	2212      	movs	r2, #18
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6838      	ldr	r0, [r7, #0]
 8007036:	f7ff f949 	bl	80062cc <_SendPacket>
  RECORD_END();
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f383 8811 	msr	BASEPRI, r3
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20014504 	.word	0x20014504

0800704c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007052:	f3ef 8311 	mrs	r3, BASEPRI
 8007056:	f04f 0120 	mov.w	r1, #32
 800705a:	f381 8811 	msr	BASEPRI, r1
 800705e:	607b      	str	r3, [r7, #4]
 8007060:	4807      	ldr	r0, [pc, #28]	; (8007080 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007062:	f7ff f847 	bl	80060f4 <_PreparePacket>
 8007066:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007068:	2211      	movs	r2, #17
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6838      	ldr	r0, [r7, #0]
 800706e:	f7ff f92d 	bl	80062cc <_SendPacket>
  RECORD_END();
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f383 8811 	msr	BASEPRI, r3
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20014504 	.word	0x20014504

08007084 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800708c:	f3ef 8311 	mrs	r3, BASEPRI
 8007090:	f04f 0120 	mov.w	r1, #32
 8007094:	f381 8811 	msr	BASEPRI, r1
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	4819      	ldr	r0, [pc, #100]	; (8007100 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800709c:	f7ff f82a 	bl	80060f4 <_PreparePacket>
 80070a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070a6:	4b17      	ldr	r3, [pc, #92]	; (8007104 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	e00b      	b.n	80070d2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	1c59      	adds	r1, r3, #1
 80070c2:	61f9      	str	r1, [r7, #28]
 80070c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	09db      	lsrs	r3, r3, #7
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b7f      	cmp	r3, #127	; 0x7f
 80070d6:	d8f0      	bhi.n	80070ba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	61fa      	str	r2, [r7, #28]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80070e8:	2208      	movs	r2, #8
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	6938      	ldr	r0, [r7, #16]
 80070ee:	f7ff f8ed 	bl	80062cc <_SendPacket>
  RECORD_END();
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f383 8811 	msr	BASEPRI, r3
}
 80070f8:	bf00      	nop
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20014504 	.word	0x20014504
 8007104:	200144d4 	.word	0x200144d4

08007108 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007110:	f3ef 8311 	mrs	r3, BASEPRI
 8007114:	f04f 0120 	mov.w	r1, #32
 8007118:	f381 8811 	msr	BASEPRI, r1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	4819      	ldr	r0, [pc, #100]	; (8007184 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007120:	f7fe ffe8 	bl	80060f4 <_PreparePacket>
 8007124:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800712a:	4b17      	ldr	r3, [pc, #92]	; (8007188 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	e00b      	b.n	8007156 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	1c59      	adds	r1, r3, #1
 8007146:	61f9      	str	r1, [r7, #28]
 8007148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b7f      	cmp	r3, #127	; 0x7f
 800715a:	d8f0      	bhi.n	800713e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800716c:	2204      	movs	r2, #4
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	6938      	ldr	r0, [r7, #16]
 8007172:	f7ff f8ab 	bl	80062cc <_SendPacket>
  RECORD_END();
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f383 8811 	msr	BASEPRI, r3
}
 800717c:	bf00      	nop
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20014504 	.word	0x20014504
 8007188:	200144d4 	.word	0x200144d4

0800718c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007194:	f3ef 8311 	mrs	r3, BASEPRI
 8007198:	f04f 0120 	mov.w	r1, #32
 800719c:	f381 8811 	msr	BASEPRI, r1
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	4819      	ldr	r0, [pc, #100]	; (8007208 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80071a4:	f7fe ffa6 	bl	80060f4 <_PreparePacket>
 80071a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e00b      	b.n	80071da <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	1c59      	adds	r1, r3, #1
 80071ca:	61f9      	str	r1, [r7, #28]
 80071cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	09db      	lsrs	r3, r3, #7
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b7f      	cmp	r3, #127	; 0x7f
 80071de:	d8f0      	bhi.n	80071c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	61fa      	str	r2, [r7, #28]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80071f0:	2206      	movs	r2, #6
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f7ff f869 	bl	80062cc <_SendPacket>
  RECORD_END();
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f383 8811 	msr	BASEPRI, r3
}
 8007200:	bf00      	nop
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20014504 	.word	0x20014504
 800720c:	200144d4 	.word	0x200144d4

08007210 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	1ad3      	subs	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	200144d4 	.word	0x200144d4

08007230 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b08c      	sub	sp, #48	; 0x30
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800723a:	4b40      	ldr	r3, [pc, #256]	; (800733c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d077      	beq.n	8007332 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007242:	4b3e      	ldr	r3, [pc, #248]	; (800733c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007248:	2300      	movs	r3, #0
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
 800724c:	e008      	b.n	8007260 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	3301      	adds	r3, #1
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007264:	429a      	cmp	r2, r3
 8007266:	d3f2      	bcc.n	800724e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007268:	e000      	b.n	800726c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800726a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d055      	beq.n	800731e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007272:	f3ef 8311 	mrs	r3, BASEPRI
 8007276:	f04f 0120 	mov.w	r1, #32
 800727a:	f381 8811 	msr	BASEPRI, r1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	482f      	ldr	r0, [pc, #188]	; (8007340 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007282:	f7fe ff37 	bl	80060f4 <_PreparePacket>
 8007286:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	e00b      	b.n	80072ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	1c59      	adds	r1, r3, #1
 800729e:	6279      	str	r1, [r7, #36]	; 0x24
 80072a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	09db      	lsrs	r3, r3, #7
 80072ac:	623b      	str	r3, [r7, #32]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	2b7f      	cmp	r3, #127	; 0x7f
 80072b2:	d8f0      	bhi.n	8007296 <SEGGER_SYSVIEW_SendModule+0x66>
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	627a      	str	r2, [r7, #36]	; 0x24
 80072ba:	6a3a      	ldr	r2, [r7, #32]
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e00b      	b.n	80072e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	61f9      	str	r1, [r7, #28]
 80072da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	09db      	lsrs	r3, r3, #7
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b7f      	cmp	r3, #127	; 0x7f
 80072ec:	d8f0      	bhi.n	80072d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	61fa      	str	r2, [r7, #28]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2280      	movs	r2, #128	; 0x80
 8007304:	4619      	mov	r1, r3
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7fe fec4 	bl	8006094 <_EncodeStr>
 800730c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800730e:	2216      	movs	r2, #22
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	6938      	ldr	r0, [r7, #16]
 8007314:	f7fe ffda 	bl	80062cc <_SendPacket>
      RECORD_END();
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d006      	beq.n	8007332 <SEGGER_SYSVIEW_SendModule+0x102>
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	4798      	blx	r3
    }
  }
}
 8007332:	bf00      	nop
 8007334:	3730      	adds	r7, #48	; 0x30
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200144fc 	.word	0x200144fc
 8007340:	20014504 	.word	0x20014504

08007344 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f2      	bne.n	8007358 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200144fc 	.word	0x200144fc

08007380 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007386:	f3ef 8311 	mrs	r3, BASEPRI
 800738a:	f04f 0120 	mov.w	r1, #32
 800738e:	f381 8811 	msr	BASEPRI, r1
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	4817      	ldr	r0, [pc, #92]	; (80073f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007396:	f7fe fead 	bl	80060f4 <_PreparePacket>
 800739a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e00b      	b.n	80073c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	6179      	str	r1, [r7, #20]
 80073b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b7f      	cmp	r3, #127	; 0x7f
 80073c8:	d8f0      	bhi.n	80073ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	617a      	str	r2, [r7, #20]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80073da:	221b      	movs	r2, #27
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	68b8      	ldr	r0, [r7, #8]
 80073e0:	f7fe ff74 	bl	80062cc <_SendPacket>
  RECORD_END();
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f383 8811 	msr	BASEPRI, r3
}
 80073ea:	bf00      	nop
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20014504 	.word	0x20014504
 80073f8:	20014500 	.word	0x20014500

080073fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007404:	f3ef 8311 	mrs	r3, BASEPRI
 8007408:	f04f 0120 	mov.w	r1, #32
 800740c:	f381 8811 	msr	BASEPRI, r1
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	4827      	ldr	r0, [pc, #156]	; (80074b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007414:	f7fe fe6e 	bl	80060f4 <_PreparePacket>
 8007418:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741a:	2280      	movs	r2, #128	; 0x80
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	6938      	ldr	r0, [r7, #16]
 8007420:	f7fe fe38 	bl	8006094 <_EncodeStr>
 8007424:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
 800742a:	2301      	movs	r3, #1
 800742c:	623b      	str	r3, [r7, #32]
 800742e:	e00b      	b.n	8007448 <SEGGER_SYSVIEW_Warn+0x4c>
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	b2da      	uxtb	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	1c59      	adds	r1, r3, #1
 8007438:	6279      	str	r1, [r7, #36]	; 0x24
 800743a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	09db      	lsrs	r3, r3, #7
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	2b7f      	cmp	r3, #127	; 0x7f
 800744c:	d8f0      	bhi.n	8007430 <SEGGER_SYSVIEW_Warn+0x34>
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	627a      	str	r2, [r7, #36]	; 0x24
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e00b      	b.n	8007480 <SEGGER_SYSVIEW_Warn+0x84>
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	b2da      	uxtb	r2, r3
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	1c59      	adds	r1, r3, #1
 8007470:	61f9      	str	r1, [r7, #28]
 8007472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	09db      	lsrs	r3, r3, #7
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b7f      	cmp	r3, #127	; 0x7f
 8007484:	d8f0      	bhi.n	8007468 <SEGGER_SYSVIEW_Warn+0x6c>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	61fa      	str	r2, [r7, #28]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007496:	221a      	movs	r2, #26
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f7fe ff16 	bl	80062cc <_SendPacket>
  RECORD_END();
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f383 8811 	msr	BASEPRI, r3
}
 80074a6:	bf00      	nop
 80074a8:	3728      	adds	r7, #40	; 0x28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20014504 	.word	0x20014504

080074b4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7fe fcee 	bl	8005ea8 <SEGGER_RTT_Write>
  return len;
 80074cc:	683b      	ldr	r3, [r7, #0]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <std>:
 80074d8:	2300      	movs	r3, #0
 80074da:	b510      	push	{r4, lr}
 80074dc:	4604      	mov	r4, r0
 80074de:	e9c0 3300 	strd	r3, r3, [r0]
 80074e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074e6:	6083      	str	r3, [r0, #8]
 80074e8:	8181      	strh	r1, [r0, #12]
 80074ea:	6643      	str	r3, [r0, #100]	; 0x64
 80074ec:	81c2      	strh	r2, [r0, #14]
 80074ee:	6183      	str	r3, [r0, #24]
 80074f0:	4619      	mov	r1, r3
 80074f2:	2208      	movs	r2, #8
 80074f4:	305c      	adds	r0, #92	; 0x5c
 80074f6:	f000 f9e3 	bl	80078c0 <memset>
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <std+0x38>)
 80074fc:	6263      	str	r3, [r4, #36]	; 0x24
 80074fe:	4b05      	ldr	r3, [pc, #20]	; (8007514 <std+0x3c>)
 8007500:	62a3      	str	r3, [r4, #40]	; 0x28
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <std+0x40>)
 8007504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <std+0x44>)
 8007508:	6224      	str	r4, [r4, #32]
 800750a:	6323      	str	r3, [r4, #48]	; 0x30
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	080076f1 	.word	0x080076f1
 8007514:	08007713 	.word	0x08007713
 8007518:	0800774b 	.word	0x0800774b
 800751c:	0800776f 	.word	0x0800776f

08007520 <stdio_exit_handler>:
 8007520:	4a02      	ldr	r2, [pc, #8]	; (800752c <stdio_exit_handler+0xc>)
 8007522:	4903      	ldr	r1, [pc, #12]	; (8007530 <stdio_exit_handler+0x10>)
 8007524:	4803      	ldr	r0, [pc, #12]	; (8007534 <stdio_exit_handler+0x14>)
 8007526:	f000 b869 	b.w	80075fc <_fwalk_sglue>
 800752a:	bf00      	nop
 800752c:	20000014 	.word	0x20000014
 8007530:	08007c9d 	.word	0x08007c9d
 8007534:	20000020 	.word	0x20000020

08007538 <cleanup_stdio>:
 8007538:	6841      	ldr	r1, [r0, #4]
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <cleanup_stdio+0x34>)
 800753c:	4299      	cmp	r1, r3
 800753e:	b510      	push	{r4, lr}
 8007540:	4604      	mov	r4, r0
 8007542:	d001      	beq.n	8007548 <cleanup_stdio+0x10>
 8007544:	f000 fbaa 	bl	8007c9c <_fflush_r>
 8007548:	68a1      	ldr	r1, [r4, #8]
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <cleanup_stdio+0x38>)
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <cleanup_stdio+0x1e>
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fba3 	bl	8007c9c <_fflush_r>
 8007556:	68e1      	ldr	r1, [r4, #12]
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <cleanup_stdio+0x3c>)
 800755a:	4299      	cmp	r1, r3
 800755c:	d004      	beq.n	8007568 <cleanup_stdio+0x30>
 800755e:	4620      	mov	r0, r4
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007564:	f000 bb9a 	b.w	8007c9c <_fflush_r>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	200145e8 	.word	0x200145e8
 8007570:	20014650 	.word	0x20014650
 8007574:	200146b8 	.word	0x200146b8

08007578 <global_stdio_init.part.0>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <global_stdio_init.part.0+0x30>)
 800757c:	4c0b      	ldr	r4, [pc, #44]	; (80075ac <global_stdio_init.part.0+0x34>)
 800757e:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <global_stdio_init.part.0+0x38>)
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	4620      	mov	r0, r4
 8007584:	2200      	movs	r2, #0
 8007586:	2104      	movs	r1, #4
 8007588:	f7ff ffa6 	bl	80074d8 <std>
 800758c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007590:	2201      	movs	r2, #1
 8007592:	2109      	movs	r1, #9
 8007594:	f7ff ffa0 	bl	80074d8 <std>
 8007598:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800759c:	2202      	movs	r2, #2
 800759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff bf98 	b.w	80074d8 <std>
 80075a8:	20014720 	.word	0x20014720
 80075ac:	200145e8 	.word	0x200145e8
 80075b0:	08007521 	.word	0x08007521

080075b4 <__sfp_lock_acquire>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__sfp_lock_acquire+0x8>)
 80075b6:	f000 b9e3 	b.w	8007980 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	20014729 	.word	0x20014729

080075c0 <__sfp_lock_release>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__sfp_lock_release+0x8>)
 80075c2:	f000 b9de 	b.w	8007982 <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	20014729 	.word	0x20014729

080075cc <__sinit>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	f7ff fff0 	bl	80075b4 <__sfp_lock_acquire>
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b11b      	cbz	r3, 80075e0 <__sinit+0x14>
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	f7ff bff0 	b.w	80075c0 <__sfp_lock_release>
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <__sinit+0x28>)
 80075e2:	6223      	str	r3, [r4, #32]
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <__sinit+0x2c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f5      	bne.n	80075d8 <__sinit+0xc>
 80075ec:	f7ff ffc4 	bl	8007578 <global_stdio_init.part.0>
 80075f0:	e7f2      	b.n	80075d8 <__sinit+0xc>
 80075f2:	bf00      	nop
 80075f4:	08007539 	.word	0x08007539
 80075f8:	20014720 	.word	0x20014720

080075fc <_fwalk_sglue>:
 80075fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007600:	4607      	mov	r7, r0
 8007602:	4688      	mov	r8, r1
 8007604:	4614      	mov	r4, r2
 8007606:	2600      	movs	r6, #0
 8007608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800760c:	f1b9 0901 	subs.w	r9, r9, #1
 8007610:	d505      	bpl.n	800761e <_fwalk_sglue+0x22>
 8007612:	6824      	ldr	r4, [r4, #0]
 8007614:	2c00      	cmp	r4, #0
 8007616:	d1f7      	bne.n	8007608 <_fwalk_sglue+0xc>
 8007618:	4630      	mov	r0, r6
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d907      	bls.n	8007634 <_fwalk_sglue+0x38>
 8007624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007628:	3301      	adds	r3, #1
 800762a:	d003      	beq.n	8007634 <_fwalk_sglue+0x38>
 800762c:	4629      	mov	r1, r5
 800762e:	4638      	mov	r0, r7
 8007630:	47c0      	blx	r8
 8007632:	4306      	orrs	r6, r0
 8007634:	3568      	adds	r5, #104	; 0x68
 8007636:	e7e9      	b.n	800760c <_fwalk_sglue+0x10>

08007638 <_puts_r>:
 8007638:	6a03      	ldr	r3, [r0, #32]
 800763a:	b570      	push	{r4, r5, r6, lr}
 800763c:	6884      	ldr	r4, [r0, #8]
 800763e:	4605      	mov	r5, r0
 8007640:	460e      	mov	r6, r1
 8007642:	b90b      	cbnz	r3, 8007648 <_puts_r+0x10>
 8007644:	f7ff ffc2 	bl	80075cc <__sinit>
 8007648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800764a:	07db      	lsls	r3, r3, #31
 800764c:	d405      	bmi.n	800765a <_puts_r+0x22>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	0598      	lsls	r0, r3, #22
 8007652:	d402      	bmi.n	800765a <_puts_r+0x22>
 8007654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007656:	f000 f993 	bl	8007980 <__retarget_lock_acquire_recursive>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	0719      	lsls	r1, r3, #28
 800765e:	d513      	bpl.n	8007688 <_puts_r+0x50>
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	b18b      	cbz	r3, 8007688 <_puts_r+0x50>
 8007664:	3e01      	subs	r6, #1
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800766c:	3b01      	subs	r3, #1
 800766e:	60a3      	str	r3, [r4, #8]
 8007670:	b9e9      	cbnz	r1, 80076ae <_puts_r+0x76>
 8007672:	2b00      	cmp	r3, #0
 8007674:	da2e      	bge.n	80076d4 <_puts_r+0x9c>
 8007676:	4622      	mov	r2, r4
 8007678:	210a      	movs	r1, #10
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f87b 	bl	8007776 <__swbuf_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d007      	beq.n	8007694 <_puts_r+0x5c>
 8007684:	250a      	movs	r5, #10
 8007686:	e007      	b.n	8007698 <_puts_r+0x60>
 8007688:	4621      	mov	r1, r4
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f8b0 	bl	80077f0 <__swsetup_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0e7      	beq.n	8007664 <_puts_r+0x2c>
 8007694:	f04f 35ff 	mov.w	r5, #4294967295
 8007698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800769a:	07da      	lsls	r2, r3, #31
 800769c:	d405      	bmi.n	80076aa <_puts_r+0x72>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	059b      	lsls	r3, r3, #22
 80076a2:	d402      	bmi.n	80076aa <_puts_r+0x72>
 80076a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a6:	f000 f96c 	bl	8007982 <__retarget_lock_release_recursive>
 80076aa:	4628      	mov	r0, r5
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	da04      	bge.n	80076bc <_puts_r+0x84>
 80076b2:	69a2      	ldr	r2, [r4, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	dc06      	bgt.n	80076c6 <_puts_r+0x8e>
 80076b8:	290a      	cmp	r1, #10
 80076ba:	d004      	beq.n	80076c6 <_puts_r+0x8e>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	e7cf      	b.n	8007666 <_puts_r+0x2e>
 80076c6:	4622      	mov	r2, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f854 	bl	8007776 <__swbuf_r>
 80076ce:	3001      	adds	r0, #1
 80076d0:	d1c9      	bne.n	8007666 <_puts_r+0x2e>
 80076d2:	e7df      	b.n	8007694 <_puts_r+0x5c>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	250a      	movs	r5, #10
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	701d      	strb	r5, [r3, #0]
 80076de:	e7db      	b.n	8007698 <_puts_r+0x60>

080076e0 <puts>:
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <puts+0xc>)
 80076e2:	4601      	mov	r1, r0
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	f7ff bfa7 	b.w	8007638 <_puts_r>
 80076ea:	bf00      	nop
 80076ec:	2000006c 	.word	0x2000006c

080076f0 <__sread>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	460c      	mov	r4, r1
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	f000 f90c 	bl	8007914 <_read_r>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	bfab      	itete	ge
 8007700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007702:	89a3      	ldrhlt	r3, [r4, #12]
 8007704:	181b      	addge	r3, r3, r0
 8007706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800770a:	bfac      	ite	ge
 800770c:	6563      	strge	r3, [r4, #84]	; 0x54
 800770e:	81a3      	strhlt	r3, [r4, #12]
 8007710:	bd10      	pop	{r4, pc}

08007712 <__swrite>:
 8007712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	461f      	mov	r7, r3
 8007718:	898b      	ldrh	r3, [r1, #12]
 800771a:	05db      	lsls	r3, r3, #23
 800771c:	4605      	mov	r5, r0
 800771e:	460c      	mov	r4, r1
 8007720:	4616      	mov	r6, r2
 8007722:	d505      	bpl.n	8007730 <__swrite+0x1e>
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	2302      	movs	r3, #2
 800772a:	2200      	movs	r2, #0
 800772c:	f000 f8e0 	bl	80078f0 <_lseek_r>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773a:	81a3      	strh	r3, [r4, #12]
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	4628      	mov	r0, r5
 8007742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	f7ff beb5 	b.w	80074b4 <_write_r>

0800774a <__sseek>:
 800774a:	b510      	push	{r4, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007752:	f000 f8cd 	bl	80078f0 <_lseek_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	bf15      	itete	ne
 800775c:	6560      	strne	r0, [r4, #84]	; 0x54
 800775e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007766:	81a3      	strheq	r3, [r4, #12]
 8007768:	bf18      	it	ne
 800776a:	81a3      	strhne	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__sclose>:
 800776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007772:	f000 b8ad 	b.w	80078d0 <_close_r>

08007776 <__swbuf_r>:
 8007776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007778:	460e      	mov	r6, r1
 800777a:	4614      	mov	r4, r2
 800777c:	4605      	mov	r5, r0
 800777e:	b118      	cbz	r0, 8007788 <__swbuf_r+0x12>
 8007780:	6a03      	ldr	r3, [r0, #32]
 8007782:	b90b      	cbnz	r3, 8007788 <__swbuf_r+0x12>
 8007784:	f7ff ff22 	bl	80075cc <__sinit>
 8007788:	69a3      	ldr	r3, [r4, #24]
 800778a:	60a3      	str	r3, [r4, #8]
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	071a      	lsls	r2, r3, #28
 8007790:	d525      	bpl.n	80077de <__swbuf_r+0x68>
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	b31b      	cbz	r3, 80077de <__swbuf_r+0x68>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	1a98      	subs	r0, r3, r2
 800779c:	6963      	ldr	r3, [r4, #20]
 800779e:	b2f6      	uxtb	r6, r6
 80077a0:	4283      	cmp	r3, r0
 80077a2:	4637      	mov	r7, r6
 80077a4:	dc04      	bgt.n	80077b0 <__swbuf_r+0x3a>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 fa77 	bl	8007c9c <_fflush_r>
 80077ae:	b9e0      	cbnz	r0, 80077ea <__swbuf_r+0x74>
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	6022      	str	r2, [r4, #0]
 80077bc:	701e      	strb	r6, [r3, #0]
 80077be:	6962      	ldr	r2, [r4, #20]
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d004      	beq.n	80077d0 <__swbuf_r+0x5a>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	07db      	lsls	r3, r3, #31
 80077ca:	d506      	bpl.n	80077da <__swbuf_r+0x64>
 80077cc:	2e0a      	cmp	r6, #10
 80077ce:	d104      	bne.n	80077da <__swbuf_r+0x64>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 fa62 	bl	8007c9c <_fflush_r>
 80077d8:	b938      	cbnz	r0, 80077ea <__swbuf_r+0x74>
 80077da:	4638      	mov	r0, r7
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077de:	4621      	mov	r1, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	f000 f805 	bl	80077f0 <__swsetup_r>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d0d5      	beq.n	8007796 <__swbuf_r+0x20>
 80077ea:	f04f 37ff 	mov.w	r7, #4294967295
 80077ee:	e7f4      	b.n	80077da <__swbuf_r+0x64>

080077f0 <__swsetup_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4b2a      	ldr	r3, [pc, #168]	; (800789c <__swsetup_r+0xac>)
 80077f4:	4605      	mov	r5, r0
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	460c      	mov	r4, r1
 80077fa:	b118      	cbz	r0, 8007804 <__swsetup_r+0x14>
 80077fc:	6a03      	ldr	r3, [r0, #32]
 80077fe:	b90b      	cbnz	r3, 8007804 <__swsetup_r+0x14>
 8007800:	f7ff fee4 	bl	80075cc <__sinit>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800780a:	0718      	lsls	r0, r3, #28
 800780c:	d422      	bmi.n	8007854 <__swsetup_r+0x64>
 800780e:	06d9      	lsls	r1, r3, #27
 8007810:	d407      	bmi.n	8007822 <__swsetup_r+0x32>
 8007812:	2309      	movs	r3, #9
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e034      	b.n	800788c <__swsetup_r+0x9c>
 8007822:	0758      	lsls	r0, r3, #29
 8007824:	d512      	bpl.n	800784c <__swsetup_r+0x5c>
 8007826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007828:	b141      	cbz	r1, 800783c <__swsetup_r+0x4c>
 800782a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800782e:	4299      	cmp	r1, r3
 8007830:	d002      	beq.n	8007838 <__swsetup_r+0x48>
 8007832:	4628      	mov	r0, r5
 8007834:	f000 f8b4 	bl	80079a0 <_free_r>
 8007838:	2300      	movs	r3, #0
 800783a:	6363      	str	r3, [r4, #52]	; 0x34
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	2300      	movs	r3, #0
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0308 	orr.w	r3, r3, #8
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	b94b      	cbnz	r3, 800786c <__swsetup_r+0x7c>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800785e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007862:	d003      	beq.n	800786c <__swsetup_r+0x7c>
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fa66 	bl	8007d38 <__smakebuf_r>
 800786c:	89a0      	ldrh	r0, [r4, #12]
 800786e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007872:	f010 0301 	ands.w	r3, r0, #1
 8007876:	d00a      	beq.n	800788e <__swsetup_r+0x9e>
 8007878:	2300      	movs	r3, #0
 800787a:	60a3      	str	r3, [r4, #8]
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	425b      	negs	r3, r3
 8007880:	61a3      	str	r3, [r4, #24]
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	b943      	cbnz	r3, 8007898 <__swsetup_r+0xa8>
 8007886:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800788a:	d1c4      	bne.n	8007816 <__swsetup_r+0x26>
 800788c:	bd38      	pop	{r3, r4, r5, pc}
 800788e:	0781      	lsls	r1, r0, #30
 8007890:	bf58      	it	pl
 8007892:	6963      	ldrpl	r3, [r4, #20]
 8007894:	60a3      	str	r3, [r4, #8]
 8007896:	e7f4      	b.n	8007882 <__swsetup_r+0x92>
 8007898:	2000      	movs	r0, #0
 800789a:	e7f7      	b.n	800788c <__swsetup_r+0x9c>
 800789c:	2000006c 	.word	0x2000006c

080078a0 <memcmp>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	3901      	subs	r1, #1
 80078a4:	4402      	add	r2, r0
 80078a6:	4290      	cmp	r0, r2
 80078a8:	d101      	bne.n	80078ae <memcmp+0xe>
 80078aa:	2000      	movs	r0, #0
 80078ac:	e005      	b.n	80078ba <memcmp+0x1a>
 80078ae:	7803      	ldrb	r3, [r0, #0]
 80078b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d001      	beq.n	80078bc <memcmp+0x1c>
 80078b8:	1b18      	subs	r0, r3, r4
 80078ba:	bd10      	pop	{r4, pc}
 80078bc:	3001      	adds	r0, #1
 80078be:	e7f2      	b.n	80078a6 <memcmp+0x6>

080078c0 <memset>:
 80078c0:	4402      	add	r2, r0
 80078c2:	4603      	mov	r3, r0
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d100      	bne.n	80078ca <memset+0xa>
 80078c8:	4770      	bx	lr
 80078ca:	f803 1b01 	strb.w	r1, [r3], #1
 80078ce:	e7f9      	b.n	80078c4 <memset+0x4>

080078d0 <_close_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d06      	ldr	r5, [pc, #24]	; (80078ec <_close_r+0x1c>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f7f9 fae7 	bl	8000eae <_close>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_close_r+0x1a>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_close_r+0x1a>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20014724 	.word	0x20014724

080078f0 <_lseek_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	; (8007910 <_lseek_r+0x20>)
 80078f4:	4604      	mov	r4, r0
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	602a      	str	r2, [r5, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7f9 fafc 	bl	8000efc <_lseek>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_lseek_r+0x1e>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_lseek_r+0x1e>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20014724 	.word	0x20014724

08007914 <_read_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	; (8007934 <_read_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 faa6 	bl	8000e74 <_read>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_read_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_read_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20014724 	.word	0x20014724

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f000 fa70 	bl	8007e30 <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08007fa4 	.word	0x08007fa4
 8007974:	08007fa4 	.word	0x08007fa4
 8007978:	08007fa4 	.word	0x08007fa4
 800797c:	08007fa8 	.word	0x08007fa8

08007980 <__retarget_lock_acquire_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_release_recursive>:
 8007982:	4770      	bx	lr

08007984 <memcpy>:
 8007984:	440a      	add	r2, r1
 8007986:	4291      	cmp	r1, r2
 8007988:	f100 33ff 	add.w	r3, r0, #4294967295
 800798c:	d100      	bne.n	8007990 <memcpy+0xc>
 800798e:	4770      	bx	lr
 8007990:	b510      	push	{r4, lr}
 8007992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799a:	4291      	cmp	r1, r2
 800799c:	d1f9      	bne.n	8007992 <memcpy+0xe>
 800799e:	bd10      	pop	{r4, pc}

080079a0 <_free_r>:
 80079a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d044      	beq.n	8007a30 <_free_r+0x90>
 80079a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079aa:	9001      	str	r0, [sp, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f1a1 0404 	sub.w	r4, r1, #4
 80079b2:	bfb8      	it	lt
 80079b4:	18e4      	addlt	r4, r4, r3
 80079b6:	f000 f8df 	bl	8007b78 <__malloc_lock>
 80079ba:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <_free_r+0x94>)
 80079bc:	9801      	ldr	r0, [sp, #4]
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	b933      	cbnz	r3, 80079d0 <_free_r+0x30>
 80079c2:	6063      	str	r3, [r4, #4]
 80079c4:	6014      	str	r4, [r2, #0]
 80079c6:	b003      	add	sp, #12
 80079c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079cc:	f000 b8da 	b.w	8007b84 <__malloc_unlock>
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	d908      	bls.n	80079e6 <_free_r+0x46>
 80079d4:	6825      	ldr	r5, [r4, #0]
 80079d6:	1961      	adds	r1, r4, r5
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf01      	itttt	eq
 80079dc:	6819      	ldreq	r1, [r3, #0]
 80079de:	685b      	ldreq	r3, [r3, #4]
 80079e0:	1949      	addeq	r1, r1, r5
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	e7ed      	b.n	80079c2 <_free_r+0x22>
 80079e6:	461a      	mov	r2, r3
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	b10b      	cbz	r3, 80079f0 <_free_r+0x50>
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	d9fa      	bls.n	80079e6 <_free_r+0x46>
 80079f0:	6811      	ldr	r1, [r2, #0]
 80079f2:	1855      	adds	r5, r2, r1
 80079f4:	42a5      	cmp	r5, r4
 80079f6:	d10b      	bne.n	8007a10 <_free_r+0x70>
 80079f8:	6824      	ldr	r4, [r4, #0]
 80079fa:	4421      	add	r1, r4
 80079fc:	1854      	adds	r4, r2, r1
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	d1e0      	bne.n	80079c6 <_free_r+0x26>
 8007a04:	681c      	ldr	r4, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	6053      	str	r3, [r2, #4]
 8007a0a:	440c      	add	r4, r1
 8007a0c:	6014      	str	r4, [r2, #0]
 8007a0e:	e7da      	b.n	80079c6 <_free_r+0x26>
 8007a10:	d902      	bls.n	8007a18 <_free_r+0x78>
 8007a12:	230c      	movs	r3, #12
 8007a14:	6003      	str	r3, [r0, #0]
 8007a16:	e7d6      	b.n	80079c6 <_free_r+0x26>
 8007a18:	6825      	ldr	r5, [r4, #0]
 8007a1a:	1961      	adds	r1, r4, r5
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	bf04      	itt	eq
 8007a20:	6819      	ldreq	r1, [r3, #0]
 8007a22:	685b      	ldreq	r3, [r3, #4]
 8007a24:	6063      	str	r3, [r4, #4]
 8007a26:	bf04      	itt	eq
 8007a28:	1949      	addeq	r1, r1, r5
 8007a2a:	6021      	streq	r1, [r4, #0]
 8007a2c:	6054      	str	r4, [r2, #4]
 8007a2e:	e7ca      	b.n	80079c6 <_free_r+0x26>
 8007a30:	b003      	add	sp, #12
 8007a32:	bd30      	pop	{r4, r5, pc}
 8007a34:	2001472c 	.word	0x2001472c

08007a38 <sbrk_aligned>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4e0e      	ldr	r6, [pc, #56]	; (8007a74 <sbrk_aligned+0x3c>)
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	6831      	ldr	r1, [r6, #0]
 8007a40:	4605      	mov	r5, r0
 8007a42:	b911      	cbnz	r1, 8007a4a <sbrk_aligned+0x12>
 8007a44:	f000 f9d6 	bl	8007df4 <_sbrk_r>
 8007a48:	6030      	str	r0, [r6, #0]
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 f9d1 	bl	8007df4 <_sbrk_r>
 8007a52:	1c43      	adds	r3, r0, #1
 8007a54:	d00a      	beq.n	8007a6c <sbrk_aligned+0x34>
 8007a56:	1cc4      	adds	r4, r0, #3
 8007a58:	f024 0403 	bic.w	r4, r4, #3
 8007a5c:	42a0      	cmp	r0, r4
 8007a5e:	d007      	beq.n	8007a70 <sbrk_aligned+0x38>
 8007a60:	1a21      	subs	r1, r4, r0
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f9c6 	bl	8007df4 <_sbrk_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d101      	bne.n	8007a70 <sbrk_aligned+0x38>
 8007a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a70:	4620      	mov	r0, r4
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	20014730 	.word	0x20014730

08007a78 <_malloc_r>:
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	1ccd      	adds	r5, r1, #3
 8007a7e:	f025 0503 	bic.w	r5, r5, #3
 8007a82:	3508      	adds	r5, #8
 8007a84:	2d0c      	cmp	r5, #12
 8007a86:	bf38      	it	cc
 8007a88:	250c      	movcc	r5, #12
 8007a8a:	2d00      	cmp	r5, #0
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	db01      	blt.n	8007a94 <_malloc_r+0x1c>
 8007a90:	42a9      	cmp	r1, r5
 8007a92:	d905      	bls.n	8007aa0 <_malloc_r+0x28>
 8007a94:	230c      	movs	r3, #12
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	2600      	movs	r6, #0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b74 <_malloc_r+0xfc>
 8007aa4:	f000 f868 	bl	8007b78 <__malloc_lock>
 8007aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8007aac:	461c      	mov	r4, r3
 8007aae:	bb5c      	cbnz	r4, 8007b08 <_malloc_r+0x90>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	f7ff ffc0 	bl	8007a38 <sbrk_aligned>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	4604      	mov	r4, r0
 8007abc:	d155      	bne.n	8007b6a <_malloc_r+0xf2>
 8007abe:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac2:	4626      	mov	r6, r4
 8007ac4:	2e00      	cmp	r6, #0
 8007ac6:	d145      	bne.n	8007b54 <_malloc_r+0xdc>
 8007ac8:	2c00      	cmp	r4, #0
 8007aca:	d048      	beq.n	8007b5e <_malloc_r+0xe6>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	eb04 0903 	add.w	r9, r4, r3
 8007ad6:	f000 f98d 	bl	8007df4 <_sbrk_r>
 8007ada:	4581      	cmp	r9, r0
 8007adc:	d13f      	bne.n	8007b5e <_malloc_r+0xe6>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	1a6d      	subs	r5, r5, r1
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7ff ffa7 	bl	8007a38 <sbrk_aligned>
 8007aea:	3001      	adds	r0, #1
 8007aec:	d037      	beq.n	8007b5e <_malloc_r+0xe6>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	442b      	add	r3, r5
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	f8d8 3000 	ldr.w	r3, [r8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d038      	beq.n	8007b6e <_malloc_r+0xf6>
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	42a2      	cmp	r2, r4
 8007b00:	d12b      	bne.n	8007b5a <_malloc_r+0xe2>
 8007b02:	2200      	movs	r2, #0
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	e00f      	b.n	8007b28 <_malloc_r+0xb0>
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	1b52      	subs	r2, r2, r5
 8007b0c:	d41f      	bmi.n	8007b4e <_malloc_r+0xd6>
 8007b0e:	2a0b      	cmp	r2, #11
 8007b10:	d917      	bls.n	8007b42 <_malloc_r+0xca>
 8007b12:	1961      	adds	r1, r4, r5
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	6025      	str	r5, [r4, #0]
 8007b18:	bf18      	it	ne
 8007b1a:	6059      	strne	r1, [r3, #4]
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	bf08      	it	eq
 8007b20:	f8c8 1000 	streq.w	r1, [r8]
 8007b24:	5162      	str	r2, [r4, r5]
 8007b26:	604b      	str	r3, [r1, #4]
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f104 060b 	add.w	r6, r4, #11
 8007b2e:	f000 f829 	bl	8007b84 <__malloc_unlock>
 8007b32:	f026 0607 	bic.w	r6, r6, #7
 8007b36:	1d23      	adds	r3, r4, #4
 8007b38:	1af2      	subs	r2, r6, r3
 8007b3a:	d0ae      	beq.n	8007a9a <_malloc_r+0x22>
 8007b3c:	1b9b      	subs	r3, r3, r6
 8007b3e:	50a3      	str	r3, [r4, r2]
 8007b40:	e7ab      	b.n	8007a9a <_malloc_r+0x22>
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	6862      	ldr	r2, [r4, #4]
 8007b46:	d1dd      	bne.n	8007b04 <_malloc_r+0x8c>
 8007b48:	f8c8 2000 	str.w	r2, [r8]
 8007b4c:	e7ec      	b.n	8007b28 <_malloc_r+0xb0>
 8007b4e:	4623      	mov	r3, r4
 8007b50:	6864      	ldr	r4, [r4, #4]
 8007b52:	e7ac      	b.n	8007aae <_malloc_r+0x36>
 8007b54:	4634      	mov	r4, r6
 8007b56:	6876      	ldr	r6, [r6, #4]
 8007b58:	e7b4      	b.n	8007ac4 <_malloc_r+0x4c>
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	e7cc      	b.n	8007af8 <_malloc_r+0x80>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4638      	mov	r0, r7
 8007b64:	f000 f80e 	bl	8007b84 <__malloc_unlock>
 8007b68:	e797      	b.n	8007a9a <_malloc_r+0x22>
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	e7dc      	b.n	8007b28 <_malloc_r+0xb0>
 8007b6e:	605b      	str	r3, [r3, #4]
 8007b70:	deff      	udf	#255	; 0xff
 8007b72:	bf00      	nop
 8007b74:	2001472c 	.word	0x2001472c

08007b78 <__malloc_lock>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <__malloc_lock+0x8>)
 8007b7a:	f7ff bf01 	b.w	8007980 <__retarget_lock_acquire_recursive>
 8007b7e:	bf00      	nop
 8007b80:	20014728 	.word	0x20014728

08007b84 <__malloc_unlock>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__malloc_unlock+0x8>)
 8007b86:	f7ff befc 	b.w	8007982 <__retarget_lock_release_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20014728 	.word	0x20014728

08007b90 <__sflush_r>:
 8007b90:	898a      	ldrh	r2, [r1, #12]
 8007b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	4605      	mov	r5, r0
 8007b98:	0710      	lsls	r0, r2, #28
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	d458      	bmi.n	8007c50 <__sflush_r+0xc0>
 8007b9e:	684b      	ldr	r3, [r1, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	dc05      	bgt.n	8007bb0 <__sflush_r+0x20>
 8007ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dc02      	bgt.n	8007bb0 <__sflush_r+0x20>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d0f9      	beq.n	8007baa <__sflush_r+0x1a>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bbc:	682f      	ldr	r7, [r5, #0]
 8007bbe:	6a21      	ldr	r1, [r4, #32]
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	d032      	beq.n	8007c2a <__sflush_r+0x9a>
 8007bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	075a      	lsls	r2, r3, #29
 8007bca:	d505      	bpl.n	8007bd8 <__sflush_r+0x48>
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	1ac0      	subs	r0, r0, r3
 8007bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bd2:	b10b      	cbz	r3, 8007bd8 <__sflush_r+0x48>
 8007bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd6:	1ac0      	subs	r0, r0, r3
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bde:	6a21      	ldr	r1, [r4, #32]
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b0      	blx	r6
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	d106      	bne.n	8007bf8 <__sflush_r+0x68>
 8007bea:	6829      	ldr	r1, [r5, #0]
 8007bec:	291d      	cmp	r1, #29
 8007bee:	d82b      	bhi.n	8007c48 <__sflush_r+0xb8>
 8007bf0:	4a29      	ldr	r2, [pc, #164]	; (8007c98 <__sflush_r+0x108>)
 8007bf2:	410a      	asrs	r2, r1
 8007bf4:	07d6      	lsls	r6, r2, #31
 8007bf6:	d427      	bmi.n	8007c48 <__sflush_r+0xb8>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	6062      	str	r2, [r4, #4]
 8007bfc:	04d9      	lsls	r1, r3, #19
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	d504      	bpl.n	8007c0e <__sflush_r+0x7e>
 8007c04:	1c42      	adds	r2, r0, #1
 8007c06:	d101      	bne.n	8007c0c <__sflush_r+0x7c>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b903      	cbnz	r3, 8007c0e <__sflush_r+0x7e>
 8007c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8007c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c10:	602f      	str	r7, [r5, #0]
 8007c12:	2900      	cmp	r1, #0
 8007c14:	d0c9      	beq.n	8007baa <__sflush_r+0x1a>
 8007c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	d002      	beq.n	8007c24 <__sflush_r+0x94>
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f7ff febe 	bl	80079a0 <_free_r>
 8007c24:	2000      	movs	r0, #0
 8007c26:	6360      	str	r0, [r4, #52]	; 0x34
 8007c28:	e7c0      	b.n	8007bac <__sflush_r+0x1c>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b0      	blx	r6
 8007c30:	1c41      	adds	r1, r0, #1
 8007c32:	d1c8      	bne.n	8007bc6 <__sflush_r+0x36>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0c5      	beq.n	8007bc6 <__sflush_r+0x36>
 8007c3a:	2b1d      	cmp	r3, #29
 8007c3c:	d001      	beq.n	8007c42 <__sflush_r+0xb2>
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d101      	bne.n	8007c46 <__sflush_r+0xb6>
 8007c42:	602f      	str	r7, [r5, #0]
 8007c44:	e7b1      	b.n	8007baa <__sflush_r+0x1a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	e7ad      	b.n	8007bac <__sflush_r+0x1c>
 8007c50:	690f      	ldr	r7, [r1, #16]
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	d0a9      	beq.n	8007baa <__sflush_r+0x1a>
 8007c56:	0793      	lsls	r3, r2, #30
 8007c58:	680e      	ldr	r6, [r1, #0]
 8007c5a:	bf08      	it	eq
 8007c5c:	694b      	ldreq	r3, [r1, #20]
 8007c5e:	600f      	str	r7, [r1, #0]
 8007c60:	bf18      	it	ne
 8007c62:	2300      	movne	r3, #0
 8007c64:	eba6 0807 	sub.w	r8, r6, r7
 8007c68:	608b      	str	r3, [r1, #8]
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	dd9c      	ble.n	8007baa <__sflush_r+0x1a>
 8007c70:	6a21      	ldr	r1, [r4, #32]
 8007c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c74:	4643      	mov	r3, r8
 8007c76:	463a      	mov	r2, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b0      	blx	r6
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	dc06      	bgt.n	8007c8e <__sflush_r+0xfe>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e78e      	b.n	8007bac <__sflush_r+0x1c>
 8007c8e:	4407      	add	r7, r0
 8007c90:	eba8 0800 	sub.w	r8, r8, r0
 8007c94:	e7e9      	b.n	8007c6a <__sflush_r+0xda>
 8007c96:	bf00      	nop
 8007c98:	dfbffffe 	.word	0xdfbffffe

08007c9c <_fflush_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b913      	cbnz	r3, 8007cac <_fflush_r+0x10>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	4628      	mov	r0, r5
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	b118      	cbz	r0, 8007cb6 <_fflush_r+0x1a>
 8007cae:	6a03      	ldr	r3, [r0, #32]
 8007cb0:	b90b      	cbnz	r3, 8007cb6 <_fflush_r+0x1a>
 8007cb2:	f7ff fc8b 	bl	80075cc <__sinit>
 8007cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f3      	beq.n	8007ca6 <_fflush_r+0xa>
 8007cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc0:	07d0      	lsls	r0, r2, #31
 8007cc2:	d404      	bmi.n	8007cce <_fflush_r+0x32>
 8007cc4:	0599      	lsls	r1, r3, #22
 8007cc6:	d402      	bmi.n	8007cce <_fflush_r+0x32>
 8007cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cca:	f7ff fe59 	bl	8007980 <__retarget_lock_acquire_recursive>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f7ff ff5d 	bl	8007b90 <__sflush_r>
 8007cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd8:	07da      	lsls	r2, r3, #31
 8007cda:	4605      	mov	r5, r0
 8007cdc:	d4e4      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	059b      	lsls	r3, r3, #22
 8007ce2:	d4e1      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce6:	f7ff fe4c 	bl	8007982 <__retarget_lock_release_recursive>
 8007cea:	e7dd      	b.n	8007ca8 <_fflush_r+0xc>

08007cec <__swhatbuf_r>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	b096      	sub	sp, #88	; 0x58
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	da0d      	bge.n	8007d1a <__swhatbuf_r+0x2e>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	bf0c      	ite	eq
 8007d0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d0e:	2340      	movne	r3, #64	; 0x40
 8007d10:	2000      	movs	r0, #0
 8007d12:	6031      	str	r1, [r6, #0]
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	b016      	add	sp, #88	; 0x58
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	466a      	mov	r2, sp
 8007d1c:	f000 f848 	bl	8007db0 <_fstat_r>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dbec      	blt.n	8007cfe <__swhatbuf_r+0x12>
 8007d24:	9901      	ldr	r1, [sp, #4]
 8007d26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d2e:	4259      	negs	r1, r3
 8007d30:	4159      	adcs	r1, r3
 8007d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d36:	e7eb      	b.n	8007d10 <__swhatbuf_r+0x24>

08007d38 <__smakebuf_r>:
 8007d38:	898b      	ldrh	r3, [r1, #12]
 8007d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d3c:	079d      	lsls	r5, r3, #30
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	d507      	bpl.n	8007d54 <__smakebuf_r+0x1c>
 8007d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	6163      	str	r3, [r4, #20]
 8007d50:	b002      	add	sp, #8
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	ab01      	add	r3, sp, #4
 8007d56:	466a      	mov	r2, sp
 8007d58:	f7ff ffc8 	bl	8007cec <__swhatbuf_r>
 8007d5c:	9900      	ldr	r1, [sp, #0]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff fe89 	bl	8007a78 <_malloc_r>
 8007d66:	b948      	cbnz	r0, 8007d7c <__smakebuf_r+0x44>
 8007d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d4ef      	bmi.n	8007d50 <__smakebuf_r+0x18>
 8007d70:	f023 0303 	bic.w	r3, r3, #3
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	e7e3      	b.n	8007d44 <__smakebuf_r+0xc>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	9b00      	ldr	r3, [sp, #0]
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b15b      	cbz	r3, 8007da8 <__smakebuf_r+0x70>
 8007d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f81d 	bl	8007dd4 <_isatty_r>
 8007d9a:	b128      	cbz	r0, 8007da8 <__smakebuf_r+0x70>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	431d      	orrs	r5, r3
 8007dac:	81a5      	strh	r5, [r4, #12]
 8007dae:	e7cf      	b.n	8007d50 <__smakebuf_r+0x18>

08007db0 <_fstat_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	; (8007dd0 <_fstat_r+0x20>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7f9 f882 	bl	8000ec6 <_fstat>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_fstat_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_fstat_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	20014724 	.word	0x20014724

08007dd4 <_isatty_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	; (8007df0 <_isatty_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 f881 	bl	8000ee6 <_isatty>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_isatty_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_isatty_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20014724 	.word	0x20014724

08007df4 <_sbrk_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_sbrk_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f000 f808 	bl	8007e14 <_sbrk>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_sbrk_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_sbrk_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20014724 	.word	0x20014724

08007e14 <_sbrk>:
 8007e14:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <_sbrk+0x14>)
 8007e16:	6811      	ldr	r1, [r2, #0]
 8007e18:	4603      	mov	r3, r0
 8007e1a:	b909      	cbnz	r1, 8007e20 <_sbrk+0xc>
 8007e1c:	4903      	ldr	r1, [pc, #12]	; (8007e2c <_sbrk+0x18>)
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	6810      	ldr	r0, [r2, #0]
 8007e22:	4403      	add	r3, r0
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	4770      	bx	lr
 8007e28:	20014734 	.word	0x20014734
 8007e2c:	20014738 	.word	0x20014738

08007e30 <_init>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr

08007e3c <_fini>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr
