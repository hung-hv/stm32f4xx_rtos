
stm32f411_rtos_demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a8  080086a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b0  080086b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080086b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  2000007c  08008734  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08008734  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c107  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000454f  00000000  00000000  0003c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  00040748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001345  00000000  00000000  00042028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b06  00000000  00000000  0004336d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9c8  00000000  00000000  0005ce73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d9cf  00000000  00000000  0007c83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cb0  00000000  00000000  0011a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00120ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008674 	.word	0x08008674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008674 	.word	0x08008674

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fcb8 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f812 	bl	800050c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f878 	bl	80005dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f958 	bl	80007a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f894 	bl	800061c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8c0 	bl	8000678 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f8ec 	bl	80006d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f91a 	bl	8000734 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f007 fc5c 	bl	8007dbc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000504:	f007 fc80 	bl	8007e08 <MX_USB_HOST_Process>
 8000508:	e7fc      	b.n	8000504 <main+0x28>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f008 f812 	bl	8008544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <SystemClock_Config+0xc8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xcc>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000580:	23c0      	movs	r3, #192	; 0xc0
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000584:	2304      	movs	r3, #4
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f933 	bl	80037fc <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f9ec 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fb95 	bl	8003cec <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c8:	f000 f9d6 	bl	8000978 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005f2:	2301      	movs	r3, #1
 80005f4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005f6:	23c8      	movs	r3, #200	; 0xc8
 80005f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005fa:	2305      	movs	r3, #5
 80005fc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fdaf 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000610:	f000 f9b2 	bl	8000978 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f002 faeb 	bl	8002c34 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f988 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000098 	.word	0x20000098
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2S2_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2S2_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2S2_Init+0x50>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_I2S2_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2S2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2S2_Init+0x50>)
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <MX_I2S2_Init+0x58>)
 80006a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2S2_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2S2_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2S2_Init+0x50>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2S2_Init+0x50>)
 80006b6:	f002 fc01 	bl	8002ebc <HAL_I2S_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f95a 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000ec 	.word	0x200000ec
 80006cc:	40003800 	.word	0x40003800
 80006d0:	00017700 	.word	0x00017700

080006d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_I2S3_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_I2S3_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_I2S3_Init+0x54>)
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <MX_I2S3_Init+0x5c>)
 80006fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2S3_Init+0x54>)
 8000714:	f002 fbd2 	bl	8002ebc <HAL_I2S_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071e:	f000 f92b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000134 	.word	0x20000134
 800072c:	40003c00 	.word	0x40003c00
 8000730:	00017700 	.word	0x00017700

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f003 fe3f 	bl	8004408 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f8f2 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000017c 	.word	0x2000017c
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a60      	ldr	r2, [pc, #384]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a59      	ldr	r2, [pc, #356]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b57      	ldr	r3, [pc, #348]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a52      	ldr	r2, [pc, #328]	; (8000940 <MX_GPIO_Init+0x1a0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a4b      	ldr	r2, [pc, #300]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1a0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <MX_GPIO_Init+0x1a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a44      	ldr	r2, [pc, #272]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <MX_GPIO_Init+0x1a0>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x1a0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <MX_GPIO_Init+0x1a4>)
 8000864:	f000 fdc2 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <MX_GPIO_Init+0x1a8>)
 800086e:	f000 fdbd 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000878:	4834      	ldr	r0, [pc, #208]	; (800094c <MX_GPIO_Init+0x1ac>)
 800087a:	f000 fdb7 	bl	80013ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800087e:	2304      	movs	r3, #4
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	482c      	ldr	r0, [pc, #176]	; (8000944 <MX_GPIO_Init+0x1a4>)
 8000892:	f000 fc27 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4825      	ldr	r0, [pc, #148]	; (8000944 <MX_GPIO_Init+0x1a4>)
 80008ae:	f000 fc19 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008b2:	2332      	movs	r3, #50	; 0x32
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <MX_GPIO_Init+0x1a4>)
 80008c8:	f000 fc0c 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4819      	ldr	r0, [pc, #100]	; (8000948 <MX_GPIO_Init+0x1a8>)
 80008e4:	f000 fbfe 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_GPIO_Init+0x1b0>)
 80008fe:	f000 fbf1 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000906:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_GPIO_Init+0x1ac>)
 800091c:	f000 fbe2 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_GPIO_Init+0x1ac>)
 8000934:	f000 fbd6 	bl	80010e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 fa97 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40000c00 	.word	0x40000c00

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_I2C_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12c      	bne.n	8000a50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <HAL_I2C_MspInit+0x8c>)
 8000a30:	f000 fb58 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400

08000a64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a59      	ldr	r2, [pc, #356]	; (8000be8 <HAL_I2S_MspInit+0x184>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d15b      	bne.n	8000b3e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a57      	ldr	r2, [pc, #348]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b55      	ldr	r3, [pc, #340]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a50      	ldr	r2, [pc, #320]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000aea:	2306      	movs	r3, #6
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000af6:	f000 faf5 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4836      	ldr	r0, [pc, #216]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000b16:	f000 fae5 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <HAL_I2S_MspInit+0x190>)
 8000b38:	f000 fad4 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3c:	e04f      	b.n	8000bde <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <HAL_I2S_MspInit+0x194>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d14a      	bne.n	8000bde <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <HAL_I2S_MspInit+0x198>)
 8000bb8:	f000 fa94 	bl	80010e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000bda:	f000 fa83 	bl	80010e4 <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003800 	.word	0x40003800
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40003c00 	.word	0x40003c00
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5a:	23e0      	movs	r3, #224	; 0xe0
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_SPI_MspInit+0x8c>)
 8000c76:	f000 fa35 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <HAL_InitTick+0xe4>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <HAL_InitTick+0xe4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	f107 0210 	add.w	r2, r7, #16
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fa1c 	bl	8004104 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd6:	f003 fa01 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 8000cda:	6378      	str	r0, [r7, #52]	; 0x34
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cde:	f003 f9fd 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <HAL_InitTick+0xe8>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <HAL_InitTick+0xec>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <HAL_InitTick+0xf0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_InitTick+0xec>)
 8000cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_InitTick+0xec>)
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_InitTick+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_InitTick+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <HAL_InitTick+0xec>)
 8000d1e:	f003 fbfc 	bl	800451a <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <HAL_InitTick+0xec>)
 8000d32:	f003 fc4b 	bl	80045cc <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d44:	2032      	movs	r0, #50	; 0x32
 8000d46:	f000 f9bf 	bl	80010c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d808      	bhi.n	8000d62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2032      	movs	r0, #50	; 0x32
 8000d56:	f000 f99b 	bl	8001090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_InitTick+0xf4>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e002      	b.n	8000d68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3738      	adds	r7, #56	; 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	200001d4 	.word	0x200001d4
 8000d80:	40000c00 	.word	0x40000c00
 8000d84:	20000004 	.word	0x20000004

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM5_IRQHandler+0x10>)
 8000dba:	f003 fc69 	bl	8004690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001d4 	.word	0x200001d4

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <OTG_FS_IRQHandler+0x10>)
 8000dce:	f000 fd91 	bl	80018f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000688 	.word	0x20000688

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f007 fba1 	bl	8008574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fb53 	bl	80004dc <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e44:	080086b8 	.word	0x080086b8
  ldr r2, =_sbss
 8000e48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e4c:	20000ad8 	.word	0x20000ad8

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f8fc 	bl	800107a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ff04 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd7c 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000021c 	.word	0x2000021c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000021c 	.word	0x2000021c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff4c 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a2:	f7ff ff61 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	6978      	ldr	r0, [r7, #20]
 80010ae:	f7ff ffb1 	bl	8001014 <NVIC_EncodePriority>
 80010b2:	4602      	mov	r2, r0
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff80 	bl	8000fc0 <__NVIC_SetPriority>
}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff54 	bl	8000f84 <__NVIC_EnableIRQ>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e159      	b.n	80013b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8148 	bne.w	80013ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d130      	bne.n	8001198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 0201 	and.w	r2, r3, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d017      	beq.n	80011d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d123      	bne.n	8001228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a2 	beq.w	80013ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_GPIO_Init+0x2ec>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x202>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_GPIO_Init+0x2f4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1fe>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a47      	ldr	r2, [pc, #284]	; (80013dc <HAL_GPIO_Init+0x2f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1fa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <HAL_GPIO_Init+0x2fc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1f6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_GPIO_Init+0x300>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1f2>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x2ec>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x304>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f aea2 	bls.w	8001100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800141e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001420:	b08f      	sub	sp, #60	; 0x3c
 8001422:	af0a      	add	r7, sp, #40	; 0x28
 8001424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e054      	b.n	80014da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f006 fd14 	bl	8007e78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fb44 	bl	8004afc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	687e      	ldr	r6, [r7, #4]
 800147c:	466d      	mov	r5, sp
 800147e:	f106 0410 	add.w	r4, r6, #16
 8001482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001492:	1d33      	adds	r3, r6, #4
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f003 fabe 	bl	8004a18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fb3b 	bl	8004b1e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	687e      	ldr	r6, [r7, #4]
 80014b0:	466d      	mov	r5, sp
 80014b2:	f106 0410 	add.w	r4, r6, #16
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c6:	1d33      	adds	r3, r6, #4
 80014c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f003 fcc4 	bl	8004e58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b089      	sub	sp, #36	; 0x24
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	70fb      	strb	r3, [r7, #3]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70bb      	strb	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_HCD_HC_Init+0x28>
 8001506:	2302      	movs	r3, #2
 8001508:	e076      	b.n	80015f8 <HAL_HCD_HC_Init+0x116>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	212c      	movs	r1, #44	; 0x2c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	333d      	adds	r3, #61	; 0x3d
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	3338      	adds	r3, #56	; 0x38
 8001532:	787a      	ldrb	r2, [r7, #1]
 8001534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	3340      	adds	r3, #64	; 0x40
 8001544:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001546:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	212c      	movs	r1, #44	; 0x2c
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	3339      	adds	r3, #57	; 0x39
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	212c      	movs	r1, #44	; 0x2c
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	333f      	adds	r3, #63	; 0x3f
 8001568:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800156c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	78ba      	ldrb	r2, [r7, #2]
 8001572:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001576:	b2d0      	uxtb	r0, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	212c      	movs	r1, #44	; 0x2c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	333a      	adds	r3, #58	; 0x3a
 8001584:	4602      	mov	r2, r0
 8001586:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001588:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da09      	bge.n	80015a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	212c      	movs	r1, #44	; 0x2c
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	333b      	adds	r3, #59	; 0x3b
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e008      	b.n	80015b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	212c      	movs	r1, #44	; 0x2c
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	333b      	adds	r3, #59	; 0x3b
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	333c      	adds	r3, #60	; 0x3c
 80015c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	787c      	ldrb	r4, [r7, #1]
 80015d0:	78ba      	ldrb	r2, [r7, #2]
 80015d2:	78f9      	ldrb	r1, [r7, #3]
 80015d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4623      	mov	r3, r4
 80015e6:	f003 fdbd 	bl	8005164 <USB_HC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}

08001600 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_HCD_HC_Halt+0x1e>
 800161a:	2302      	movs	r3, #2
 800161c:	e00f      	b.n	800163e <HAL_HCD_HC_Halt+0x3e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f80d 	bl	800564e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	460b      	mov	r3, r1
 800165c:	70bb      	strb	r3, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	333b      	adds	r3, #59	; 0x3b
 8001670:	78ba      	ldrb	r2, [r7, #2]
 8001672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	212c      	movs	r1, #44	; 0x2c
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	333f      	adds	r3, #63	; 0x3f
 8001682:	787a      	ldrb	r2, [r7, #1]
 8001684:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001686:	7c3b      	ldrb	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d112      	bne.n	80016b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3342      	adds	r3, #66	; 0x42
 800169a:	2203      	movs	r2, #3
 800169c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	333d      	adds	r3, #61	; 0x3d
 80016ac:	7f3a      	ldrb	r2, [r7, #28]
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e008      	b.n	80016c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2202      	movs	r2, #2
 80016c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	f200 80c6 	bhi.w	8001858 <HAL_HCD_HC_SubmitRequest+0x210>
 80016cc:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	08001845 	.word	0x08001845
 80016dc:	08001749 	.word	0x08001749
 80016e0:	080017c7 	.word	0x080017c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016e4:	7c3b      	ldrb	r3, [r7, #16]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	f040 80b8 	bne.w	800185c <HAL_HCD_HC_SubmitRequest+0x214>
 80016ec:	78bb      	ldrb	r3, [r7, #2]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 80b4 	bne.w	800185c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016f4:	8b3b      	ldrh	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d108      	bne.n	800170c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3355      	adds	r3, #85	; 0x55
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3355      	adds	r3, #85	; 0x55
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3342      	adds	r3, #66	; 0x42
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001732:	e093      	b.n	800185c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3342      	adds	r3, #66	; 0x42
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
      break;
 8001746:	e089      	b.n	800185c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001748:	78bb      	ldrb	r3, [r7, #2]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d11d      	bne.n	800178a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3355      	adds	r3, #85	; 0x55
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3342      	adds	r3, #66	; 0x42
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001774:	e073      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3342      	adds	r3, #66	; 0x42
 8001784:	2202      	movs	r2, #2
 8001786:	701a      	strb	r2, [r3, #0]
      break;
 8001788:	e069      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3354      	adds	r3, #84	; 0x54
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3342      	adds	r3, #66	; 0x42
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
      break;
 80017b0:	e055      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2202      	movs	r2, #2
 80017c2:	701a      	strb	r2, [r3, #0]
      break;
 80017c4:	e04b      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017c6:	78bb      	ldrb	r3, [r7, #2]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11d      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3355      	adds	r3, #85	; 0x55
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	212c      	movs	r1, #44	; 0x2c
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	3342      	adds	r3, #66	; 0x42
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017f2:	e034      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	212c      	movs	r1, #44	; 0x2c
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e02a      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3354      	adds	r3, #84	; 0x54
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3342      	adds	r3, #66	; 0x42
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	e016      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
      break;
 8001842:	e00c      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3342      	adds	r3, #66	; 0x42
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e002      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800185c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3344      	adds	r3, #68	; 0x44
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	8b3a      	ldrh	r2, [r7, #24]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	202c      	movs	r0, #44	; 0x2c
 8001878:	fb00 f303 	mul.w	r3, r0, r3
 800187c:	440b      	add	r3, r1
 800187e:	334c      	adds	r3, #76	; 0x4c
 8001880:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3360      	adds	r3, #96	; 0x60
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3350      	adds	r3, #80	; 0x50
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3339      	adds	r3, #57	; 0x39
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3361      	adds	r3, #97	; 0x61
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	222c      	movs	r2, #44	; 0x2c
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	3338      	adds	r3, #56	; 0x38
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	18d1      	adds	r1, r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	f003 fd60 	bl	80053a8 <USB_HC_StartXfer>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop

080018f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fa61 	bl	8004dd2 <USB_GetMode>
 8001910:	4603      	mov	r3, r0
 8001912:	2b01      	cmp	r3, #1
 8001914:	f040 80f6 	bne.w	8001b04 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fa45 	bl	8004dac <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80ec 	beq.w	8001b02 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fa3c 	bl	8004dac <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193e:	d104      	bne.n	800194a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001948:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fa2c 	bl	8004dac <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800195e:	d104      	bne.n	800196a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001968:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fa1c 	bl	8004dac <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800197a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800197e:	d104      	bne.n	800198a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fa0c 	bl	8004dac <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d103      	bne.n	80019a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2202      	movs	r2, #2
 80019a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f9fe 	bl	8004dac <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ba:	d11c      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019d6:	2110      	movs	r1, #16
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f003 f8ed 	bl	8004bb8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019de:	6938      	ldr	r0, [r7, #16]
 80019e0:	f003 f91e 	bl	8004c20 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 faf4 	bl	8004fd8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f006 fabf 	bl	8007f74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 f9d6 	bl	8004dac <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0a:	d102      	bne.n	8001a12 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 f89e 	bl	8002b4e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f9c8 	bl	8004dac <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d106      	bne.n	8001a34 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f006 fa88 	bl	8007f3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2208      	movs	r2, #8
 8001a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f9b7 	bl	8004dac <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d101      	bne.n	8001a4c <HAL_HCD_IRQHandler+0x158>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_HCD_IRQHandler+0x15a>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0210 	bic.w	r2, r2, #16
 8001a60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 ffa1 	bl	80029aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0210 	orr.w	r2, r2, #16
 8001a76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 f995 	bl	8004dac <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a8c:	d13a      	bne.n	8001b04 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fdca 	bl	800562c <USB_HC_ReadInterrupt>
 8001a98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e025      	b.n	8001aec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d018      	beq.n	8001ae6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aca:	d106      	bne.n	8001ada <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8ab 	bl	8001c2e <HCD_HC_IN_IRQHandler>
 8001ad8:	e005      	b.n	8001ae6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fbf9 	bl	80022d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3d4      	bcc.n	8001aa0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	e000      	b.n	8001b04 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b02:	bf00      	nop
    }
  }
}
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_HCD_Start+0x16>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e013      	b.n	8001b48 <HAL_HCD_Start+0x3e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fab6 	bl	80050a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 ffce 	bl	8004ada <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_HCD_Stop+0x16>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e00d      	b.n	8001b82 <HAL_HCD_Stop+0x32>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fea4 	bl	80058c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fa58 	bl	800504c <USB_ResetPort>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3360      	adds	r3, #96	; 0x60
 8001bc0:	781b      	ldrb	r3, [r3, #0]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3350      	adds	r3, #80	; 0x50
 8001be8:	681b      	ldr	r3, [r3, #0]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fa9c 	bl	8005140 <USB_GetCurrentFrame>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fa77 	bl	8005112 <USB_GetHostSpeed>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d11a      	bne.n	8001c94 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3361      	adds	r3, #97	; 0x61
 8001c7e:	2206      	movs	r2, #6
 8001c80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fcde 	bl	800564e <USB_HC_Halt>
 8001c92:	e0af      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001caa:	d11b      	bne.n	8001ce4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3361      	adds	r3, #97	; 0x61
 8001cce:	2207      	movs	r2, #7
 8001cd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fcb6 	bl	800564e <USB_HC_Halt>
 8001ce2:	e087      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d109      	bne.n	8001d0e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2320      	movs	r3, #32
 8001d0a:	6093      	str	r3, [r2, #8]
 8001d0c:	e072      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d11a      	bne.n	8001d5a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	461a      	mov	r2, r3
 8001d32:	2308      	movs	r3, #8
 8001d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3361      	adds	r3, #97	; 0x61
 8001d44:	2205      	movs	r2, #5
 8001d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fc7b 	bl	800564e <USB_HC_Halt>
 8001d58:	e04c      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	d11b      	bne.n	8001daa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3361      	adds	r3, #97	; 0x61
 8001d94:	2208      	movs	r2, #8
 8001d96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fc53 	bl	800564e <USB_HC_Halt>
 8001da8:	e024      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d119      	bne.n	8001df4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3361      	adds	r3, #97	; 0x61
 8001de0:	2206      	movs	r2, #6
 8001de2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fc2d 	bl	800564e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d112      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fc19 	bl	800564e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e30:	e24e      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 80df 	bne.w	8002008 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3348      	adds	r3, #72	; 0x48
 8001e60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0159      	lsls	r1, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e74:	1ad2      	subs	r2, r2, r3
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	202c      	movs	r0, #44	; 0x2c
 8001e7c:	fb00 f303 	mul.w	r3, r0, r3
 8001e80:	440b      	add	r3, r1
 8001e82:	3350      	adds	r3, #80	; 0x50
 8001e84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3361      	adds	r3, #97	; 0x61
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	335c      	adds	r3, #92	; 0x5c
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	333f      	adds	r3, #63	; 0x3f
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	333f      	adds	r3, #63	; 0x3f
 8001ede:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d111      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fbad 	bl	800564e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2310      	movs	r3, #16
 8001f04:	6093      	str	r3, [r2, #8]
 8001f06:	e03a      	b.n	8001f7e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	333f      	adds	r3, #63	; 0x3f
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d009      	beq.n	8001f30 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	333f      	adds	r3, #63	; 0x3f
 8001f2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d126      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	0151      	lsls	r1, r2, #5
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	440a      	add	r2, r1
 8001f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3360      	adds	r3, #96	; 0x60
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	b2d9      	uxtb	r1, r3
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	202c      	movs	r0, #44	; 0x2c
 8001f6c:	fb00 f303 	mul.w	r3, r0, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3360      	adds	r3, #96	; 0x60
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f006 f809 	bl	8007f90 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d12b      	bne.n	8001fde <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3348      	adds	r3, #72	; 0x48
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	202c      	movs	r0, #44	; 0x2c
 8001f9c:	fb00 f202 	mul.w	r2, r0, r2
 8001fa0:	440a      	add	r2, r1
 8001fa2:	3240      	adds	r2, #64	; 0x40
 8001fa4:	8812      	ldrh	r2, [r2, #0]
 8001fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 818e 	beq.w	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3354      	adds	r3, #84	; 0x54
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3354      	adds	r3, #84	; 0x54
 8001fd8:	4602      	mov	r2, r0
 8001fda:	701a      	strb	r2, [r3, #0]
}
 8001fdc:	e178      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3354      	adds	r3, #84	; 0x54
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2d8      	uxtb	r0, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3354      	adds	r3, #84	; 0x54
 8002002:	4602      	mov	r2, r0
 8002004:	701a      	strb	r2, [r3, #0]
}
 8002006:	e163      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	f040 80f6 	bne.w	800220c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3361      	adds	r3, #97	; 0x61
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d109      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e0c9      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3361      	adds	r3, #97	; 0x61
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d109      	bne.n	8002070 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	2205      	movs	r2, #5
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e0b5      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3361      	adds	r3, #97	; 0x61
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d009      	beq.n	8002098 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3361      	adds	r3, #97	; 0x61
 8002092:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002094:	2b08      	cmp	r3, #8
 8002096:	d150      	bne.n	800213a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	335c      	adds	r3, #92	; 0x5c
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	202c      	movs	r0, #44	; 0x2c
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	440b      	add	r3, r1
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	335c      	adds	r3, #92	; 0x5c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d912      	bls.n	80020f4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	335c      	adds	r3, #92	; 0x5c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	2204      	movs	r2, #4
 80020f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020f2:	e073      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3360      	adds	r3, #96	; 0x60
 8002102:	2202      	movs	r2, #2
 8002104:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800211c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002124:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002138:	e050      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d122      	bne.n	8002194 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002176:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800217e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e023      	b.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3361      	adds	r3, #97	; 0x61
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d119      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	335c      	adds	r3, #92	; 0x5c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	202c      	movs	r0, #44	; 0x2c
 80021c0:	fb00 f303 	mul.w	r3, r0, r3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3360      	adds	r3, #96	; 0x60
 80021d8:	2204      	movs	r2, #4
 80021da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	461a      	mov	r2, r3
 80021ea:	2302      	movs	r3, #2
 80021ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	b2d9      	uxtb	r1, r3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	202c      	movs	r0, #44	; 0x2c
 80021f8:	fb00 f303 	mul.w	r3, r0, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f005 fec3 	bl	8007f90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800220a:	e061      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b10      	cmp	r3, #16
 8002220:	d156      	bne.n	80022d0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	333f      	adds	r3, #63	; 0x3f
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d111      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	335c      	adds	r3, #92	; 0x5c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f003 f9fb 	bl	800564e <USB_HC_Halt>
 8002258:	e031      	b.n	80022be <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	333f      	adds	r3, #63	; 0x3f
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	333f      	adds	r3, #63	; 0x3f
 800227c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800227e:	2b02      	cmp	r3, #2
 8002280:	d11d      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	335c      	adds	r3, #92	; 0x5c
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d110      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	2203      	movs	r2, #3
 80022ac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 f9c8 	bl	800564e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	2310      	movs	r3, #16
 80022ce:	6093      	str	r3, [r2, #8]
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d11a      	bne.n	800233e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2304      	movs	r3, #4
 8002318:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3361      	adds	r3, #97	; 0x61
 8002328:	2206      	movs	r2, #6
 800232a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f989 	bl	800564e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800233c:	e331      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d12e      	bne.n	80023b2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2320      	movs	r3, #32
 8002364:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333d      	adds	r3, #61	; 0x3d
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	f040 8313 	bne.w	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	333d      	adds	r3, #61	; 0x3d
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 f94f 	bl	800564e <USB_HC_Halt>
}
 80023b0:	e2f7      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d112      	bne.n	80023f0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f930 	bl	800564e <USB_HC_Halt>
}
 80023ee:	e2d8      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d140      	bne.n	8002488 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d111      	bne.n	8002452 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333d      	adds	r3, #61	; 0x3d
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	461a      	mov	r2, r3
 800244e:	2340      	movs	r3, #64	; 0x40
 8002450:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2301      	movs	r3, #1
 8002462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3361      	adds	r3, #97	; 0x61
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f8e4 	bl	800564e <USB_HC_Halt>
}
 8002486:	e28c      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d12c      	bne.n	80024f8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3361      	adds	r3, #97	; 0x61
 80024ac:	2204      	movs	r2, #4
 80024ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	333d      	adds	r3, #61	; 0x3d
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	335c      	adds	r3, #92	; 0x5c
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f8b5 	bl	800564e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	6093      	str	r3, [r2, #8]
}
 80024f6:	e254      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11a      	bne.n	8002544 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2308      	movs	r3, #8
 800251e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	2205      	movs	r2, #5
 8002530:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f003 f886 	bl	800564e <USB_HC_Halt>
}
 8002542:	e22e      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b10      	cmp	r3, #16
 8002558:	d140      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	335c      	adds	r3, #92	; 0x5c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	2203      	movs	r2, #3
 800257c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333d      	adds	r3, #61	; 0x3d
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d112      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333c      	adds	r3, #60	; 0x3c
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333d      	adds	r3, #61	; 0x3d
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 f843 	bl	800564e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2310      	movs	r3, #16
 80025d8:	6093      	str	r3, [r2, #8]
}
 80025da:	e1e2      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	2b80      	cmp	r3, #128	; 0x80
 80025f0:	d164      	bne.n	80026bc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d111      	bne.n	800261e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	2206      	movs	r2, #6
 800260a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f003 f819 	bl	800564e <USB_HC_Halt>
 800261c:	e044      	b.n	80026a8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	202c      	movs	r0, #44	; 0x2c
 8002636:	fb00 f303 	mul.w	r3, r0, r3
 800263a:	440b      	add	r3, r1
 800263c:	335c      	adds	r3, #92	; 0x5c
 800263e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d920      	bls.n	8002696 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3360      	adds	r3, #96	; 0x60
 8002674:	2204      	movs	r2, #4
 8002676:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	202c      	movs	r0, #44	; 0x2c
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	4413      	add	r3, r2
 8002688:	3360      	adds	r3, #96	; 0x60
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f005 fc7e 	bl	8007f90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002694:	e008      	b.n	80026a8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3360      	adds	r3, #96	; 0x60
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	6093      	str	r3, [r2, #8]
}
 80026ba:	e172      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d11b      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3361      	adds	r3, #97	; 0x61
 80026e2:	2208      	movs	r2, #8
 80026e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 ffac 	bl	800564e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	461a      	mov	r2, r3
 8002704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002708:	6093      	str	r3, [r2, #8]
}
 800270a:	e14a      	b.n	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	f040 813f 	bne.w	80029a2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3361      	adds	r3, #97	; 0x61
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d17d      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3360      	adds	r3, #96	; 0x60
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333f      	adds	r3, #63	; 0x3f
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d00a      	beq.n	8002774 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	333f      	adds	r3, #63	; 0x3f
 800276c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800276e:	2b03      	cmp	r3, #3
 8002770:	f040 8100 	bne.w	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3355      	adds	r3, #85	; 0x55
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3355      	adds	r3, #85	; 0x55
 80027a0:	4602      	mov	r2, r0
 80027a2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f040 80e3 	bne.w	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	334c      	adds	r3, #76	; 0x4c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80d8 	beq.w	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	334c      	adds	r3, #76	; 0x4c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	202c      	movs	r0, #44	; 0x2c
 80027da:	fb00 f202 	mul.w	r2, r0, r2
 80027de:	440a      	add	r2, r1
 80027e0:	3240      	adds	r2, #64	; 0x40
 80027e2:	8812      	ldrh	r2, [r2, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	202c      	movs	r0, #44	; 0x2c
 80027ee:	fb00 f202 	mul.w	r2, r0, r2
 80027f2:	440a      	add	r2, r1
 80027f4:	3240      	adds	r2, #64	; 0x40
 80027f6:	8812      	ldrh	r2, [r2, #0]
 80027f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80b5 	beq.w	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3355      	adds	r3, #85	; 0x55
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2d8      	uxtb	r0, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3355      	adds	r3, #85	; 0x55
 800282e:	4602      	mov	r2, r0
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e09f      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d109      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e08b      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3361      	adds	r3, #97	; 0x61
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d109      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3360      	adds	r3, #96	; 0x60
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e077      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3361      	adds	r3, #97	; 0x61
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d109      	bne.n	80028ac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3360      	adds	r3, #96	; 0x60
 80028a6:	2205      	movs	r2, #5
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e063      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3361      	adds	r3, #97	; 0x61
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b06      	cmp	r3, #6
 80028be:	d009      	beq.n	80028d4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3361      	adds	r3, #97	; 0x61
 80028ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d14f      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	335c      	adds	r3, #92	; 0x5c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	202c      	movs	r0, #44	; 0x2c
 80028ec:	fb00 f303 	mul.w	r3, r0, r3
 80028f0:	440b      	add	r3, r1
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d912      	bls.n	8002930 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3360      	adds	r3, #96	; 0x60
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e021      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3360      	adds	r3, #96	; 0x60
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002958:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002960:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2302      	movs	r3, #2
 8002984:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	b2d9      	uxtb	r1, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f303 	mul.w	r3, r0, r3
 8002994:	4413      	add	r3, r2
 8002996:	3360      	adds	r3, #96	; 0x60
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f005 faf7 	bl	8007f90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08a      	sub	sp, #40	; 0x28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	0c5b      	lsrs	r3, r3, #17
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d004      	beq.n	80029f0 <HCD_RXQLVL_IRQHandler+0x46>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	f000 80a9 	beq.w	8002b40 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029ee:	e0aa      	b.n	8002b46 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3344      	adds	r3, #68	; 0x44
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 809b 	beq.w	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	441a      	add	r2, r3
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	202c      	movs	r0, #44	; 0x2c
 8002a28:	fb00 f303 	mul.w	r3, r0, r3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334c      	adds	r3, #76	; 0x4c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d87a      	bhi.n	8002b2c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3344      	adds	r3, #68	; 0x44
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f002 f954 	bl	8004cfc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3344      	adds	r3, #68	; 0x44
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	441a      	add	r2, r3
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	202c      	movs	r0, #44	; 0x2c
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	440b      	add	r3, r1
 8002a74:	3344      	adds	r3, #68	; 0x44
 8002a76:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3350      	adds	r3, #80	; 0x50
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	202c      	movs	r0, #44	; 0x2c
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	440b      	add	r3, r1
 8002a98:	3350      	adds	r3, #80	; 0x50
 8002a9a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	0cdb      	lsrs	r3, r3, #19
 8002aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3340      	adds	r3, #64	; 0x40
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d13c      	bne.n	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d039      	beq.n	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3354      	adds	r3, #84	; 0x54
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f083 0301 	eor.w	r3, r3, #1
 8002b16:	b2d8      	uxtb	r0, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3354      	adds	r3, #84	; 0x54
 8002b26:	4602      	mov	r2, r0
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	e00b      	b.n	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3360      	adds	r3, #96	; 0x60
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	e001      	b.n	8002b44 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b44:	bf00      	nop
  }
}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b7a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d10b      	bne.n	8002b9e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f005 f9e1 	bl	8007f58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d132      	bne.n	8002c0e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d126      	bne.n	8002c08 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d113      	bne.n	8002bea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bcc:	d106      	bne.n	8002bdc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 f9ff 	bl	8004fd8 <USB_InitFSLSPClkSel>
 8002bda:	e011      	b.n	8002c00 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f9f8 	bl	8004fd8 <USB_InitFSLSPClkSel>
 8002be8:	e00a      	b.n	8002c00 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bfe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f005 f9d3 	bl	8007fac <HAL_HCD_PortEnabled_Callback>
 8002c06:	e002      	b.n	8002c0e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f005 f9dd 	bl	8007fc8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d103      	bne.n	8002c20 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e12b      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fd feba 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f001 fa20 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a81      	ldr	r2, [pc, #516]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d807      	bhi.n	8002cb8 <HAL_I2C_Init+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a80      	ldr	r2, [pc, #512]	; (8002eac <HAL_I2C_Init+0x278>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e006      	b.n	8002cc6 <HAL_I2C_Init+0x92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a7d      	ldr	r2, [pc, #500]	; (8002eb0 <HAL_I2C_Init+0x27c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e7      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_I2C_Init+0x280>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <HAL_I2C_Init+0xd4>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e009      	b.n	8002d1c <HAL_I2C_Init+0xe8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a69      	ldr	r2, [pc, #420]	; (8002eb8 <HAL_I2C_Init+0x284>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	495c      	ldr	r1, [pc, #368]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d819      	bhi.n	8002d70 <HAL_I2C_Init+0x13c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e59      	subs	r1, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d50:	400b      	ands	r3, r1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_I2C_Init+0x138>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	e051      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e04f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_I2C_Init+0x168>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e012      	b.n	8002dc2 <HAL_I2C_Init+0x18e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	0099      	lsls	r1, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x196>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10e      	bne.n	8002df0 <HAL_I2C_Init+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e58      	subs	r0, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	440b      	add	r3, r1
 8002de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6809      	ldr	r1, [r1, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6911      	ldr	r1, [r2, #16]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	000186a0 	.word	0x000186a0
 8002eac:	001e847f 	.word	0x001e847f
 8002eb0:	003d08ff 	.word	0x003d08ff
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e128      	b.n	8003120 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a90      	ldr	r2, [pc, #576]	; (8003128 <HAL_I2S_Init+0x26c>)
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fdbb 	bl	8000a64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f04:	f023 030f 	bic.w	r3, r3, #15
 8002f08:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d060      	beq.n	8002fdc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f22:	2310      	movs	r3, #16
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e001      	b.n	8002f2c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d802      	bhi.n	8002f3a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f001 fa04 	bl	8004348 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f40:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4a:	d125      	bne.n	8002f98 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	3305      	adds	r3, #5
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e01f      	b.n	8002fb6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	3305      	adds	r3, #5
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	e00e      	b.n	8002fb6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	3305      	adds	r3, #5
 8002fb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_I2S_Init+0x270>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	08db      	lsrs	r3, r3, #3
 8002fc0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	e003      	b.n	8002fe4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d902      	bls.n	8002ff0 <HAL_I2S_Init+0x134>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d907      	bls.n	8003000 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e08f      	b.n	8003120 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	430a      	orrs	r2, r1
 8003012:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800301e:	f023 030f 	bic.w	r3, r3, #15
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6851      	ldr	r1, [r2, #4]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6892      	ldr	r2, [r2, #8]
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68d2      	ldr	r2, [r2, #12]
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6992      	ldr	r2, [r2, #24]
 8003036:	430a      	orrs	r2, r1
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003042:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d161      	bne.n	8003110 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a38      	ldr	r2, [pc, #224]	; (8003130 <HAL_I2S_Init+0x274>)
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a37      	ldr	r2, [pc, #220]	; (8003134 <HAL_I2S_Init+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_I2S_Init+0x1a4>
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_I2S_Init+0x27c>)
 800305e:	e001      	b.n	8003064 <HAL_I2S_Init+0x1a8>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	4932      	ldr	r1, [pc, #200]	; (8003134 <HAL_I2S_Init+0x278>)
 800306c:	428a      	cmp	r2, r1
 800306e:	d101      	bne.n	8003074 <HAL_I2S_Init+0x1b8>
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_I2S_Init+0x27c>)
 8003072:	e001      	b.n	8003078 <HAL_I2S_Init+0x1bc>
 8003074:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003078:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800307c:	f023 030f 	bic.w	r3, r3, #15
 8003080:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_I2S_Init+0x278>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_I2S_Init+0x1d4>
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_I2S_Init+0x27c>)
 800308e:	e001      	b.n	8003094 <HAL_I2S_Init+0x1d8>
 8003090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003094:	2202      	movs	r2, #2
 8003096:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <HAL_I2S_Init+0x278>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_I2S_Init+0x1ea>
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_I2S_Init+0x27c>)
 80030a4:	e001      	b.n	80030aa <HAL_I2S_Init+0x1ee>
 80030a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d003      	beq.n	80030c0 <HAL_I2S_Init+0x204>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e001      	b.n	80030cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030d6:	4313      	orrs	r3, r2
 80030d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_I2S_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_I2S_Init+0x24c>
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_I2S_Init+0x27c>)
 8003106:	e001      	b.n	800310c <HAL_I2S_Init+0x250>
 8003108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310c:	897a      	ldrh	r2, [r7, #10]
 800310e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08003233 	.word	0x08003233
 800312c:	cccccccd 	.word	0xcccccccd
 8003130:	08003349 	.word	0x08003349
 8003134:	40003800 	.word	0x40003800
 8003138:	40003400 	.word	0x40003400

0800313c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c9a      	adds	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10e      	bne.n	80031cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffb8 	bl	800313c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10e      	bne.n	800322a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800321a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff93 	bl	8003150 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b04      	cmp	r3, #4
 800324c:	d13a      	bne.n	80032c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d109      	bne.n	800326c <I2S_IRQHandler+0x3a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d102      	bne.n	800326c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffb4 	bl	80031d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d126      	bne.n	80032c4 <I2S_IRQHandler+0x92>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b20      	cmp	r3, #32
 8003282:	d11f      	bne.n	80032c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003292:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff50 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d136      	bne.n	800333e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d109      	bne.n	80032ee <I2S_IRQHandler+0xbc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d102      	bne.n	80032ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff45 	bl	8003178 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d122      	bne.n	800333e <I2S_IRQHandler+0x10c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d11b      	bne.n	800333e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003314:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff13 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a92      	ldr	r2, [pc, #584]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003362:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003364:	e001      	b.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a8b      	ldr	r2, [pc, #556]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003380:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003382:	e001      	b.n	8003388 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003394:	d004      	beq.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8099 	bne.w	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f925 	bl	8003604 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9c8 	bl	8003764 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d13a      	bne.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d035      	beq.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033f2:	4b6e      	ldr	r3, [pc, #440]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4969      	ldr	r1, [pc, #420]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003402:	428b      	cmp	r3, r1
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003406:	4b69      	ldr	r3, [pc, #420]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003412:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003422:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe88 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	f040 80c3 	bne.w	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80bd 	beq.w	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a49      	ldr	r2, [pc, #292]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003488:	e001      	b.n	800348e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800348a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4944      	ldr	r1, [pc, #272]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003496:	428b      	cmp	r3, r1
 8003498:	d101      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800349c:	e001      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0204 	orr.w	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fe4a 	bl	8003164 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d0:	e089      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d107      	bne.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8be 	bl	8003668 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8fd 	bl	8003700 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d12f      	bne.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003528:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003536:	e001      	b.n	800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4919      	ldr	r1, [pc, #100]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003544:	428b      	cmp	r3, r1
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003554:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f043 0202 	orr.w	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fdfa 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d136      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d031      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003590:	e001      	b.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4902      	ldr	r1, [pc, #8]	; (80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800359e:	428b      	cmp	r3, r1
 80035a0:	d106      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035a2:	4b02      	ldr	r3, [pc, #8]	; (80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a4:	e006      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035a6:	bf00      	nop
 80035a8:	40003800 	.word	0x40003800
 80035ac:	40003400 	.word	0x40003400
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fdc0 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035e4:	e000      	b.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035e6:	bf00      	nop
}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c99      	adds	r1, r3, #2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6251      	str	r1, [r2, #36]	; 0x24
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003644:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffc9 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c99      	adds	r1, r3, #2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6251      	str	r1, [r2, #36]	; 0x24
 800367a:	8819      	ldrh	r1, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <I2SEx_TxISR_I2SExt+0x22>
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 8003688:	e001      	b.n	800368e <I2SEx_TxISR_I2SExt+0x26>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	460a      	mov	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d121      	bne.n	80036ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <I2SEx_TxISR_I2SExt+0x50>
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 80036b6:	e001      	b.n	80036bc <I2SEx_TxISR_I2SExt+0x54>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	490d      	ldr	r1, [pc, #52]	; (80036f8 <I2SEx_TxISR_I2SExt+0x90>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d101      	bne.n	80036cc <I2SEx_TxISR_I2SExt+0x64>
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <I2SEx_TxISR_I2SExt+0x94>)
 80036ca:	e001      	b.n	80036d0 <I2SEx_TxISR_I2SExt+0x68>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff81 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003400 	.word	0x40003400

08003700 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68d8      	ldr	r0, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	1c99      	adds	r1, r3, #2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003718:	b282      	uxth	r2, r0
 800371a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003742:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff4a 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <I2SEx_RxISR_I2SExt+0x16>
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 8003778:	e001      	b.n	800377e <I2SEx_RxISR_I2SExt+0x1a>
 800377a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377e:	68d8      	ldr	r0, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	1c99      	adds	r1, r3, #2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	62d1      	str	r1, [r2, #44]	; 0x2c
 800378a:	b282      	uxth	r2, r0
 800378c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d121      	bne.n	80037ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <I2SEx_RxISR_I2SExt+0x50>
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 80037b2:	e001      	b.n	80037b8 <I2SEx_RxISR_I2SExt+0x54>
 80037b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <I2SEx_RxISR_I2SExt+0x90>)
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d101      	bne.n	80037c8 <I2SEx_RxISR_I2SExt+0x64>
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <I2SEx_RxISR_I2SExt+0x94>)
 80037c6:	e001      	b.n	80037cc <I2SEx_RxISR_I2SExt+0x68>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff03 	bl	80035f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40003800 	.word	0x40003800
 80037f8:	40003400 	.word	0x40003400

080037fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e267      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d075      	beq.n	8003906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00c      	beq.n	8003840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d112      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003832:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383e:	d10b      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	4b7e      	ldr	r3, [pc, #504]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05b      	beq.n	8003904 <HAL_RCC_OscConfig+0x108>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d157      	bne.n	8003904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e242      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d106      	bne.n	8003870 <HAL_RCC_OscConfig+0x74>
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e01d      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x98>
 800387a:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6f      	ldr	r2, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fd fb04 	bl	8000ec0 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fd fb00 	bl	8000ec0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e207      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0xc0>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd faf0 	bl	8000ec0 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd faec 	bl	8000ec0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1f3      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0xe8>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d063      	beq.n	80039da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d11c      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d116      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e1c7      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4937      	ldr	r1, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	e03a      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd faa5 	bl	8000ec0 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397a:	f7fd faa1 	bl	8000ec0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1a8      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fa84 	bl	8000ec0 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fd fa80 	bl	8000ec0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e187      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d036      	beq.n	8003a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd fa64 	bl	8000ec0 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fd fa60 	bl	8000ec0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e167      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x200>
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd fa4d 	bl	8000ec0 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	e00e      	b.n	8003a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fa49 	bl	8000ec0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d907      	bls.n	8003a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e150      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
 8003a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ea      	bne.n	8003a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8097 	beq.w	8003b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a66:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b74      	ldr	r3, [pc, #464]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fa09 	bl	8000ec0 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd fa05 	bl	8000ec0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e10c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2ea>
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e01c      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a5b      	ldr	r2, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003b08:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a54      	ldr	r2, [pc, #336]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd f9ca 	bl	8000ec0 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd f9c6 	bl	8000ec0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0cb      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RCC_OscConfig+0x334>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fd f9b4 	bl	8000ec0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd f9b0 	bl	8000ec0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0b5      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a1 	beq.w	8003cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d05c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d141      	bne.n	8003c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd f984 	bl	8000ec0 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd f980 	bl	8000ec0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e087      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	491b      	ldr	r1, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fd f959 	bl	8000ec0 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fd f955 	bl	8000ec0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e05c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x416>
 8003c30:	e054      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fd f942 	bl	8000ec0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd f93e 	bl	8000ec0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e045      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x444>
 8003c5e:	e03d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e038      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d121      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cc      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d90c      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b63      	ldr	r3, [pc, #396]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b8      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	494d      	ldr	r1, [pc, #308]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d044      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d119      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e067      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd f870 	bl	8000ec0 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fd f86c 	bl	8000ec0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d20c      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e032      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f821 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490a      	ldr	r1, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fefc 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023c00 	.word	0x40023c00
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08008690 	.word	0x08008690
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b094      	sub	sp, #80	; 0x50
 8003ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec8:	2300      	movs	r3, #0
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed0:	4b79      	ldr	r3, [pc, #484]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d00d      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	f200 80e1 	bhi.w	80040a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x34>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eea:	e0db      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_GetSysClockFreq+0x204>)
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ef0:	e0db      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef2:	4b73      	ldr	r3, [pc, #460]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef6:	e0d8      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	4b6d      	ldr	r3, [pc, #436]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d063      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	2200      	movs	r2, #0
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
 8003f26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4621      	mov	r1, r4
 8003f44:	1a51      	subs	r1, r2, r1
 8003f46:	6139      	str	r1, [r7, #16]
 8003f48:	4629      	mov	r1, r5
 8003f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f66:	4651      	mov	r1, sl
 8003f68:	018a      	lsls	r2, r1, #6
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f70:	4659      	mov	r1, fp
 8003f72:	eb63 0901 	sbc.w	r9, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb18 0303 	adds.w	r3, r8, r3
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	462b      	mov	r3, r5
 8003f98:	eb49 0303 	adc.w	r3, r9, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003faa:	4629      	mov	r1, r5
 8003fac:	024b      	lsls	r3, r1, #9
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	024a      	lsls	r2, r1, #9
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc8:	f7fc f90a 	bl	80001e0 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd4:	e058      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
 8003fec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	0159      	lsls	r1, r3, #5
 8003ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004002:	0150      	lsls	r0, r2, #5
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4641      	mov	r1, r8
 800400a:	ebb2 0a01 	subs.w	sl, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb63 0b01 	sbc.w	fp, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004028:	ebb2 040a 	subs.w	r4, r2, sl
 800402c:	eb63 050b 	sbc.w	r5, r3, fp
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	00eb      	lsls	r3, r5, #3
 800403a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403e:	00e2      	lsls	r2, r4, #3
 8004040:	4614      	mov	r4, r2
 8004042:	461d      	mov	r5, r3
 8004044:	4643      	mov	r3, r8
 8004046:	18e3      	adds	r3, r4, r3
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	464b      	mov	r3, r9
 800404c:	eb45 0303 	adc.w	r3, r5, r3
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800405e:	4629      	mov	r1, r5
 8004060:	028b      	lsls	r3, r1, #10
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004068:	4621      	mov	r1, r4
 800406a:	028a      	lsls	r2, r1, #10
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004072:	2200      	movs	r2, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	61fa      	str	r2, [r7, #28]
 8004078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407c:	f7fc f8b0 	bl	80001e0 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	3301      	adds	r3, #1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetSysClockFreq+0x204>)
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3750      	adds	r7, #80	; 0x50
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000000 	.word	0x20000000

080040dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040e0:	f7ff fff0 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4903      	ldr	r1, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	080086a0 	.word	0x080086a0

08004104 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	220f      	movs	r2, #15
 8004112:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_RCC_GetClockConfig+0x5c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_RCC_GetClockConfig+0x5c>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCC_GetClockConfig+0x5c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_GetClockConfig+0x5c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCC_GetClockConfig+0x60>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0207 	and.w	r2, r3, #7
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	40023c00 	.word	0x40023c00

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800418c:	2b00      	cmp	r3, #0
 800418e:	d038      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004190:	4b68      	ldr	r3, [pc, #416]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004196:	f7fc fe93 	bl	8000ec0 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419e:	f7fc fe8f 	bl	8000ec0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0bd      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b0:	4b61      	ldr	r3, [pc, #388]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	495a      	ldr	r1, [pc, #360]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041dc:	f7fc fe70 	bl	8000ec0 <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041e4:	f7fc fe6c 	bl	8000ec0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e09a      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f6:	4b50      	ldr	r3, [pc, #320]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8083 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	4a47      	ldr	r2, [pc, #284]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421e:	6413      	str	r3, [r2, #64]	; 0x40
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800422c:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004238:	f7fc fe42 	bl	8000ec0 <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fc fe3e 	bl	8000ec0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e06c      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02f      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d028      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427c:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d114      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fc fe0c 	bl	8000ec0 <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fc fe08 	bl	8000ec0 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e034      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ee      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042da:	d10d      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80042dc:	4b16      	ldr	r3, [pc, #88]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	4911      	ldr	r1, [pc, #68]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042f8:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	4909      	ldr	r1, [pc, #36]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7d1a      	ldrb	r2, [r3, #20]
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004328:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	42470068 	.word	0x42470068
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000
 8004340:	42470e40 	.word	0x42470e40
 8004344:	424711e0 	.word	0x424711e0

08004348 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d140      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d131      	bne.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800437e:	617b      	str	r3, [r7, #20]
          break;
 8004380:	e031      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438e:	d109      	bne.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439a:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e008      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043a4:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d0:	0f1b      	lsrs	r3, r3, #28
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
          break;
 80043de:	e002      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
          break;
 80043e4:	bf00      	nop
        }
      }
      break;
 80043e6:	bf00      	nop
    }
  }
  return frequency;
 80043e8:	697b      	ldr	r3, [r7, #20]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00bb8000 	.word	0x00bb8000
 8004400:	007a1200 	.word	0x007a1200
 8004404:	00f42400 	.word	0x00f42400

08004408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07b      	b.n	8004512 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442a:	d009      	beq.n	8004440 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
 8004432:	e005      	b.n	8004440 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fbd0 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004476:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	ea42 0103 	orr.w	r1, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 0104 	and.w	r1, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0210 	and.w	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e041      	b.n	80045b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f839 	bl	80045b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 f9c9 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e044      	b.n	800466e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIM_Base_Start_IT+0xb0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x6c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460e:	d013      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x6c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_TIM_Base_Start_IT+0xb4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_TIM_Base_Start_IT+0xb8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x6c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a17      	ldr	r2, [pc, #92]	; (8004688 <HAL_TIM_Base_Start_IT+0xbc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a16      	ldr	r2, [pc, #88]	; (800468c <HAL_TIM_Base_Start_IT+0xc0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d111      	bne.n	800465c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b06      	cmp	r3, #6
 8004648:	d010      	beq.n	800466c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	e007      	b.n	800466c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40014000 	.word	0x40014000

08004690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8ee 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8e0 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8f1 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0204 	mvn.w	r2, #4
 8004710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8c4 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8b6 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8c7 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f89a 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88c 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f89d 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2208      	movs	r2, #8
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f870 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f862 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f873 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0201 	mvn.w	r2, #1
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc f8a0 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d10e      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d107      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8e2 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d10e      	bne.n	800486c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d107      	bne.n	800486c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f838 	bl	80048dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d10e      	bne.n	8004898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b20      	cmp	r3, #32
 8004886:	d107      	bne.n	8004898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0220 	mvn.w	r2, #32
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8ac 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <TIM_Base_SetConfig+0xe4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <TIM_Base_SetConfig+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a30      	ldr	r2, [pc, #192]	; (80049dc <TIM_Base_SetConfig+0xec>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <TIM_Base_SetConfig+0xf0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <TIM_Base_SetConfig+0xe4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01b      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d017      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <TIM_Base_SetConfig+0xe8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a21      	ldr	r2, [pc, #132]	; (80049dc <TIM_Base_SetConfig+0xec>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00f      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <TIM_Base_SetConfig+0xf0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00b      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <TIM_Base_SetConfig+0xf4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <TIM_Base_SetConfig+0xf8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <TIM_Base_SetConfig+0xfc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d108      	bne.n	800498c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <TIM_Base_SetConfig+0xe4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d103      	bne.n	80049c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	615a      	str	r2, [r3, #20]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a18:	b084      	sub	sp, #16
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	f107 001c 	add.w	r0, r7, #28
 8004a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d122      	bne.n	8004a76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9c0 	bl	8004df0 <USB_CoreReset>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e01a      	b.n	8004aac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9b4 	bl	8004df0 <USB_CoreReset>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a9e:	e005      	b.n	8004aac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10b      	bne.n	8004aca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f043 0206 	orr.w	r2, r3, #6
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f043 0220 	orr.w	r2, r3, #32
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad6:	b004      	add	sp, #16
 8004ad8:	4770      	bx	lr

08004ada <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 0201 	bic.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d115      	bne.n	8004b6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	f7fc f9c3 	bl	8000ed8 <HAL_Delay>
      ms++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f93a 	bl	8004dd2 <USB_GetMode>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d01e      	beq.n	8004ba2 <USB_SetCurrentMode+0x84>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b31      	cmp	r3, #49	; 0x31
 8004b68:	d9f0      	bls.n	8004b4c <USB_SetCurrentMode+0x2e>
 8004b6a:	e01a      	b.n	8004ba2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d115      	bne.n	8004b9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7fc f9aa 	bl	8000ed8 <HAL_Delay>
      ms++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f921 	bl	8004dd2 <USB_GetMode>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <USB_SetCurrentMode+0x84>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b31      	cmp	r3, #49	; 0x31
 8004b9a:	d9f0      	bls.n	8004b7e <USB_SetCurrentMode+0x60>
 8004b9c:	e001      	b.n	8004ba2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e005      	b.n	8004bae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b32      	cmp	r3, #50	; 0x32
 8004ba6:	d101      	bne.n	8004bac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <USB_FlushTxFifo+0x64>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e01b      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	daf2      	bge.n	8004bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <USB_FlushTxFifo+0x64>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d0f0      	beq.n	8004bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e018      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	daf2      	bge.n	8004c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e006      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d0f0      	beq.n	8004c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	460b      	mov	r3, r1
 8004c90:	71fb      	strb	r3, [r7, #7]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d123      	bne.n	8004cee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ca6:	88bb      	ldrh	r3, [r7, #4]
 8004ca8:	3303      	adds	r3, #3
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e018      	b.n	8004ce6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	031a      	lsls	r2, r3, #12
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3e2      	bcc.n	8004cb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3724      	adds	r7, #36	; 0x24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	e014      	b.n	8004d52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	3301      	adds	r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	3301      	adds	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3e6      	bcc.n	8004d28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d5a:	8bfb      	ldrh	r3, [r7, #30]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01e      	beq.n	8004d9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	701a      	strb	r2, [r3, #0]
      i++;
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	3301      	adds	r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d92:	8bfb      	ldrh	r3, [r7, #30]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d98:	8bfb      	ldrh	r3, [r7, #30]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ea      	bne.n	8004d74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <USB_CoreReset+0x64>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e01b      	b.n	8004e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	daf2      	bge.n	8004dfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f043 0201 	orr.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <USB_CoreReset+0x64>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e006      	b.n	8004e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d0f0      	beq.n	8004e26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	00030d40 	.word	0x00030d40

08004e58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10a      	bne.n	8004eca <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e014      	b.n	8004ef4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e009      	b.n	8004ef4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eee:	f023 0304 	bic.w	r3, r3, #4
 8004ef2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe5e 	bl	8004bb8 <USB_FlushTxFifo>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe8a 	bl	8004c20 <USB_FlushRxFifo>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e015      	b.n	8004f48 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d3e5      	bcc.n	8004f1c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <USB_HostInit+0x16c>)
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <USB_HostInit+0x170>)
 8004f7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f80:	e009      	b.n	8004f96 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <USB_HostInit+0x174>)
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <USB_HostInit+0x178>)
 8004f92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f043 0210 	orr.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <USB_HostInit+0x17c>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc0:	b004      	add	sp, #16
 8004fc2:	4770      	bx	lr
 8004fc4:	01000200 	.word	0x01000200
 8004fc8:	00e00300 	.word	0x00e00300
 8004fcc:	00600080 	.word	0x00600080
 8004fd0:	004000e0 	.word	0x004000e0
 8004fd4:	a3200008 	.word	0xa3200008

08004fd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005020:	461a      	mov	r2, r3
 8005022:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005026:	6053      	str	r3, [r2, #4]
 8005028:	e009      	b.n	800503e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d106      	bne.n	800503e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005036:	461a      	mov	r2, r3
 8005038:	f241 7370 	movw	r3, #6000	; 0x1770
 800503c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800506c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800507c:	2064      	movs	r0, #100	; 0x64
 800507e:	f7fb ff2b 	bl	8000ed8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800508a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005090:	200a      	movs	r0, #10
 8005092:	f7fb ff21 	bl	8000ed8 <HAL_Delay>

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <USB_DriveVbus+0x44>
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d106      	bne.n	80050e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d109      	bne.n	8005104 <USB_DriveVbus+0x64>
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005102:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	0c5b      	lsrs	r3, r3, #17
 8005130:	f003 0303 	and.w	r3, r3, #3
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	b29b      	uxth	r3, r3
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4603      	mov	r3, r0
 8005174:	70fb      	strb	r3, [r7, #3]
 8005176:	460b      	mov	r3, r1
 8005178:	70bb      	strb	r3, [r7, #2]
 800517a:	4613      	mov	r3, r2
 800517c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800519a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d87e      	bhi.n	80052a0 <USB_HC_Init+0x13c>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <USB_HC_Init+0x44>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	08005263 	.word	0x08005263
 80051b0:	080051b9 	.word	0x080051b9
 80051b4:	08005225 	.word	0x08005225
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80051ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	da10      	bge.n	80051f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80051f4:	e057      	b.n	80052a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d051      	beq.n	80052a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005220:	60d3      	str	r3, [r2, #12]
      break;
 8005222:	e040      	b.n	80052a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	f240 639d 	movw	r3, #1693	; 0x69d
 8005236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	da34      	bge.n	80052aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	440a      	add	r2, r1
 8005256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005260:	e023      	b.n	80052aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	f240 2325 	movw	r3, #549	; 0x225
 8005274:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da17      	bge.n	80052ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4413      	add	r3, r2
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	440a      	add	r2, r1
 8005294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005298:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800529c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800529e:	e006      	b.n	80052ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	77fb      	strb	r3, [r7, #31]
      break;
 80052a4:	e004      	b.n	80052b0 <USB_HC_Init+0x14c>
      break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <USB_HC_Init+0x14c>
      break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <USB_HC_Init+0x14c>
      break;
 80052ae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ca:	f043 0302 	orr.w	r3, r3, #2
 80052ce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	6939      	ldr	r1, [r7, #16]
 80052e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052ea:	4313      	orrs	r3, r2
 80052ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da03      	bge.n	800530a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e001      	b.n	800530e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff feff 	bl	8005112 <USB_GetHostSpeed>
 8005314:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800531a:	2b02      	cmp	r3, #2
 800531c:	d106      	bne.n	800532c <USB_HC_Init+0x1c8>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d003      	beq.n	800532c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e001      	b.n	8005330 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005330:	787b      	ldrb	r3, [r7, #1]
 8005332:	059b      	lsls	r3, r3, #22
 8005334:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005338:	78bb      	ldrb	r3, [r7, #2]
 800533a:	02db      	lsls	r3, r3, #11
 800533c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005340:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005346:	049b      	lsls	r3, r3, #18
 8005348:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800534c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800534e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005350:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005354:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	0159      	lsls	r1, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	440b      	add	r3, r1
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800536c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800536e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005372:	2b03      	cmp	r3, #3
 8005374:	d003      	beq.n	800537e <USB_HC_Init+0x21a>
 8005376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10f      	bne.n	800539e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	440a      	add	r2, r1
 8005394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800539e:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02d      	beq.n	800542e <USB_HC_StartXfer+0x86>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	791b      	ldrb	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d129      	bne.n	800542e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d117      	bne.n	8005410 <USB_HC_StartXfer+0x68>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	79db      	ldrb	r3, [r3, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <USB_HC_StartXfer+0x48>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	79db      	ldrb	r3, [r3, #7]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d10f      	bne.n	8005410 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	6a3a      	ldr	r2, [r7, #32]
 8005404:	440a      	add	r2, r1
 8005406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <USB_HC_StartXfer+0x86>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	795b      	ldrb	r3, [r3, #5]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	4619      	mov	r1, r3
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fa0f 	bl	8005848 <USB_DoPing>
      return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e0f8      	b.n	8005620 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	8912      	ldrh	r2, [r2, #8]
 800543e:	4413      	add	r3, r2
 8005440:	3b01      	subs	r3, #1
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	8912      	ldrh	r2, [r2, #8]
 8005446:	fbb3 f3f2 	udiv	r3, r3, r2
 800544a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800544c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800544e:	8b7b      	ldrh	r3, [r7, #26]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90b      	bls.n	800546c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005454:	8b7b      	ldrh	r3, [r7, #26]
 8005456:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	8912      	ldrh	r2, [r2, #8]
 800545e:	fb03 f202 	mul.w	r2, r3, r2
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	611a      	str	r2, [r3, #16]
 8005466:	e001      	b.n	800546c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005468:	2301      	movs	r3, #1
 800546a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	78db      	ldrb	r3, [r3, #3]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	8912      	ldrh	r2, [r2, #8]
 800547a:	fb03 f202 	mul.w	r2, r3, r2
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	e003      	b.n	800548c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005496:	04d9      	lsls	r1, r3, #19
 8005498:	4b63      	ldr	r3, [pc, #396]	; (8005628 <USB_HC_StartXfer+0x280>)
 800549a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800549c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	7a9b      	ldrb	r3, [r3, #10]
 80054a2:	075b      	lsls	r3, r3, #29
 80054a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	0148      	lsls	r0, r1, #5
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	4401      	add	r1, r0
 80054b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68d9      	ldr	r1, [r3, #12]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	460a      	mov	r2, r1
 80054d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005504:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005508:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	7e7b      	ldrb	r3, [r7, #25]
 800551a:	075b      	lsls	r3, r3, #29
 800551c:	69f9      	ldr	r1, [r7, #28]
 800551e:	0148      	lsls	r0, r1, #5
 8005520:	6a39      	ldr	r1, [r7, #32]
 8005522:	4401      	add	r1, r0
 8005524:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005542:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	78db      	ldrb	r3, [r3, #3]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e003      	b.n	800555e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005564:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e04e      	b.n	8005620 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	78db      	ldrb	r3, [r3, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d149      	bne.n	800561e <USB_HC_StartXfer+0x276>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d045      	beq.n	800561e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	79db      	ldrb	r3, [r3, #7]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d830      	bhi.n	80055fc <USB_HC_StartXfer+0x254>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <USB_HC_StartXfer+0x1f8>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055d5 	.word	0x080055d5
 80055a8:	080055b1 	.word	0x080055b1
 80055ac:	080055d5 	.word	0x080055d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	3303      	adds	r3, #3
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055ba:	8afa      	ldrh	r2, [r7, #22]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d91c      	bls.n	8005600 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80055d2:	e015      	b.n	8005600 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	3303      	adds	r3, #3
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055de:	8afa      	ldrh	r2, [r7, #22]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d90a      	bls.n	8005604 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80055fa:	e003      	b.n	8005604 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <USB_HC_StartXfer+0x25e>
        break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <USB_HC_StartXfer+0x25e>
        break;
 8005604:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68d9      	ldr	r1, [r3, #12]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	785a      	ldrb	r2, [r3, #1]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	b29b      	uxth	r3, r3
 8005614:	2000      	movs	r0, #0
 8005616:	9000      	str	r0, [sp, #0]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fb31 	bl	8004c80 <USB_WritePacket>
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	1ff80000 	.word	0x1ff80000

0800562c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	b29b      	uxth	r3, r3
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800564e:	b480      	push	{r7}
 8005650:	b089      	sub	sp, #36	; 0x24
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	0c9b      	lsrs	r3, r3, #18
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	0fdb      	lsrs	r3, r3, #31
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d104      	bne.n	80056a8 <USB_HC_Halt+0x5a>
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e0c8      	b.n	800583a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <USB_HC_Halt+0x66>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d163      	bne.n	800577c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 80ab 	bne.w	8005838 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d133      	bne.n	8005756 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800570c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800572c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573a:	d81d      	bhi.n	8005778 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005752:	d0ec      	beq.n	800572e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005754:	e070      	b.n	8005838 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	440a      	add	r2, r1
 800576c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005774:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005776:	e05f      	b.n	8005838 <USB_HC_Halt+0x1ea>
            break;
 8005778:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800577a:	e05d      	b.n	8005838 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	440a      	add	r2, r1
 8005792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800579a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d133      	bne.n	8005814 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f8:	d81d      	bhi.n	8005836 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005810:	d0ec      	beq.n	80057ec <USB_HC_Halt+0x19e>
 8005812:	e011      	b.n	8005838 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800582e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e000      	b.n	8005838 <USB_HC_Halt+0x1ea>
          break;
 8005836:	bf00      	nop
    }
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3724      	adds	r7, #36	; 0x24
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	04da      	lsls	r2, r3, #19
 8005864:	4b15      	ldr	r3, [pc, #84]	; (80058bc <USB_DoPing+0x74>)
 8005866:	4013      	ands	r3, r2
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	440a      	add	r2, r1
 8005870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005878:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005890:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005898:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	1ff80000 	.word	0x1ff80000

080058c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff f911 	bl	8004afc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058da:	2110      	movs	r1, #16
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff f96b 	bl	8004bb8 <USB_FlushTxFifo>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff f997 	bl	8004c20 <USB_FlushRxFifo>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e01f      	b.n	8005942 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005918:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005920:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005928:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	461a      	mov	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3301      	adds	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b0f      	cmp	r3, #15
 8005946:	d9dc      	bls.n	8005902 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	e034      	b.n	80059b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005964:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800596c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005974:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005982:	461a      	mov	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005994:	d80c      	bhi.n	80059b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ac:	d0ec      	beq.n	8005988 <USB_StopHost+0xc8>
 80059ae:	e000      	b.n	80059b2 <USB_StopHost+0xf2>
        break;
 80059b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d9c7      	bls.n	800594e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c4:	461a      	mov	r2, r3
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff f880 	bl	8004ada <USB_EnableGlobalInt>

  return ret;
 80059da:	7ffb      	ldrb	r3, [r7, #31]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80059ec:	2301      	movs	r3, #1
 80059ee:	2202      	movs	r2, #2
 80059f0:	2102      	movs	r1, #2
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fc66 	bl	80062c4 <USBH_FindInterface>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2bff      	cmp	r3, #255	; 0xff
 8005a00:	d002      	beq.n	8005a08 <USBH_CDC_InterfaceInit+0x24>
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d901      	bls.n	8005a0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e13d      	b.n	8005c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fc3b 	bl	800628c <USBH_SelectInterface>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005a20:	2302      	movs	r3, #2
 8005a22:	e131      	b.n	8005c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005a2a:	2050      	movs	r0, #80	; 0x50
 8005a2c:	f002 fcce 	bl	80083cc <malloc>
 8005a30:	4603      	mov	r3, r0
 8005a32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005a44:	2302      	movs	r3, #2
 8005a46:	e11f      	b.n	8005c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005a48:	2250      	movs	r2, #80	; 0x50
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	68b8      	ldr	r0, [r7, #8]
 8005a4e:	f002 fd79 	bl	8008544 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	211a      	movs	r1, #26
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da15      	bge.n	8005a96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	211a      	movs	r1, #26
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	211a      	movs	r1, #26
 8005a86:	fb01 f303 	mul.w	r3, r1, r3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 ff2e 	bl	80078fe <USBH_AllocPipe>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	7819      	ldrb	r1, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	7858      	ldrb	r0, [r3, #1]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	8952      	ldrh	r2, [r2, #10]
 8005ac2:	9202      	str	r2, [sp, #8]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	9201      	str	r2, [sp, #4]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	4623      	mov	r3, r4
 8005acc:	4602      	mov	r2, r0
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fee6 	bl	80078a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f002 fbf1 	bl	80082c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	210a      	movs	r1, #10
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fbeb 	bl	80062c4 <USBH_FindInterface>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2bff      	cmp	r3, #255	; 0xff
 8005af6:	d002      	beq.n	8005afe <USBH_CDC_InterfaceInit+0x11a>
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d901      	bls.n	8005b02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0c2      	b.n	8005c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	211a      	movs	r1, #26
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da16      	bge.n	8005b48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	211a      	movs	r1, #26
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	211a      	movs	r1, #26
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b40:	881a      	ldrh	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	835a      	strh	r2, [r3, #26]
 8005b46:	e015      	b.n	8005b74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	211a      	movs	r1, #26
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	211a      	movs	r1, #26
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	211a      	movs	r1, #26
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da16      	bge.n	8005bba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	211a      	movs	r1, #26
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	211a      	movs	r1, #26
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bb2:	881a      	ldrh	r2, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	835a      	strh	r2, [r3, #26]
 8005bb8:	e015      	b.n	8005be6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	211a      	movs	r1, #26
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	211a      	movs	r1, #26
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005be0:	881a      	ldrh	r2, [r3, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	7b9b      	ldrb	r3, [r3, #14]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fe86 	bl	80078fe <USBH_AllocPipe>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	7bdb      	ldrb	r3, [r3, #15]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fe7c 	bl	80078fe <USBH_AllocPipe>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	7b59      	ldrb	r1, [r3, #13]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	7b98      	ldrb	r0, [r3, #14]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	8b12      	ldrh	r2, [r2, #24]
 8005c26:	9202      	str	r2, [sp, #8]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	9201      	str	r2, [sp, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4623      	mov	r3, r4
 8005c30:	4602      	mov	r2, r0
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 fe34 	bl	80078a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	7b19      	ldrb	r1, [r3, #12]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	7bd8      	ldrb	r0, [r3, #15]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	8b52      	ldrh	r2, [r2, #26]
 8005c50:	9202      	str	r2, [sp, #8]
 8005c52:	2202      	movs	r2, #2
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4623      	mov	r3, r4
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fe1f 	bl	80078a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	7b5b      	ldrb	r3, [r3, #13]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f002 fb26 	bl	80082c4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 fb1f 	bl	80082c4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd90      	pop	{r4, r7, pc}

08005c90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00e      	beq.n	8005cc8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fe14 	bl	80078de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fe3f 	bl	8007940 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	7b1b      	ldrb	r3, [r3, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	7b1b      	ldrb	r3, [r3, #12]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fe01 	bl	80078de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	7b1b      	ldrb	r3, [r3, #12]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fe2c 	bl	8007940 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	7b5b      	ldrb	r3, [r3, #13]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7b5b      	ldrb	r3, [r3, #13]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 fdee 	bl	80078de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	7b5b      	ldrb	r3, [r3, #13]
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fe19 	bl	8007940 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f002 fb57 	bl	80083dc <free>
    phost->pActiveClass->pData = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d34:	2200      	movs	r2, #0
 8005d36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3340      	adds	r3, #64	; 0x40
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8b1 	bl	8005ec2 <GetLineCoding>
 8005d60:	4603      	mov	r3, r0
 8005d62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d64:	7afb      	ldrb	r3, [r7, #11]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d70:	2102      	movs	r1, #2
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d76:	7afb      	ldrb	r3, [r7, #11]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d877      	bhi.n	8005e94 <USBH_CDC_Process+0x114>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <USBH_CDC_Process+0x2c>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dc1 	.word	0x08005dc1
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	08005df7 	.word	0x08005df7
 8005db8:	08005e6b 	.word	0x08005e6b
 8005dbc:	08005e79 	.word	0x08005e79
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e06d      	b.n	8005ea2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f897 	bl	8005f00 <SetLineCoding>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005de4:	e058      	b.n	8005e98 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d055      	beq.n	8005e98 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2204      	movs	r2, #4
 8005df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005df4:	e050      	b.n	8005e98 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3340      	adds	r3, #64	; 0x40
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f860 	bl	8005ec2 <GetLineCoding>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d126      	bne.n	8005e5a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1e:	791b      	ldrb	r3, [r3, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d13b      	bne.n	8005e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d133      	bne.n	8005e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d12b      	bne.n	8005e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d124      	bne.n	8005e9c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f958 	bl	8006108 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e58:	e020      	b.n	8005e9c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d01d      	beq.n	8005e9c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2204      	movs	r2, #4
 8005e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e68:	e018      	b.n	8005e9c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f867 	bl	8005f3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f8da 	bl	800602a <CDC_ProcessReception>
      break;
 8005e76:	e014      	b.n	8005ea2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 ffef 	bl	8006e5e <USBH_ClrFeature>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005e92:	e005      	b.n	8005ea0 <USBH_CDC_Process+0x120>

    default:
      break;
 8005e94:	bf00      	nop
 8005e96:	e004      	b.n	8005ea2 <USBH_CDC_Process+0x122>
      break;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <USBH_CDC_Process+0x122>
      break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <USBH_CDC_Process+0x122>
      break;
 8005ea0:	bf00      	nop

  }

  return status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	22a1      	movs	r2, #161	; 0xa1
 8005ed0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2221      	movs	r2, #33	; 0x21
 8005ed6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2207      	movs	r2, #7
 8005ee8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2207      	movs	r2, #7
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fa83 	bl	80073fc <USBH_CtlReq>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2221      	movs	r2, #33	; 0x21
 8005f0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2207      	movs	r2, #7
 8005f26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2207      	movs	r2, #7
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 fa64 	bl	80073fc <USBH_CtlReq>
 8005f34:	4603      	mov	r3, r0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b086      	sub	sp, #24
 8005f42:	af02      	add	r7, sp, #8
 8005f44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d002      	beq.n	8005f64 <CDC_ProcessTransmission+0x26>
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d023      	beq.n	8005faa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005f62:	e05e      	b.n	8006022 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	8b12      	ldrh	r2, [r2, #24]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d90b      	bls.n	8005f88 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8b1a      	ldrh	r2, [r3, #24]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	7b5b      	ldrb	r3, [r3, #13]
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fc4a 	bl	800781a <USBH_BulkSendData>
 8005f86:	e00b      	b.n	8005fa0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	7b5b      	ldrb	r3, [r3, #13]
 8005f96:	2001      	movs	r0, #1
 8005f98:	9000      	str	r0, [sp, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fc3d 	bl	800781a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fa8:	e03b      	b.n	8006022 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7b5b      	ldrb	r3, [r3, #13]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f002 f95d 	bl	8008270 <USBH_LL_GetURBState>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d128      	bne.n	8006012 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	8b12      	ldrh	r2, [r2, #24]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d90e      	bls.n	8005fea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	8b12      	ldrh	r2, [r2, #24]
 8005fd4:	1a9a      	subs	r2, r3, r2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	8b12      	ldrh	r2, [r2, #24]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]
 8005fe8:	e002      	b.n	8005ff0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006000:	e00e      	b.n	8006020 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f868 	bl	80060e0 <USBH_CDC_TransmitCallback>
      break;
 8006010:	e006      	b.n	8006020 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d103      	bne.n	8006020 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006020:	bf00      	nop
  }
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800603c:	2300      	movs	r3, #0
 800603e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006046:	2b03      	cmp	r3, #3
 8006048:	d002      	beq.n	8006050 <CDC_ProcessReception+0x26>
 800604a:	2b04      	cmp	r3, #4
 800604c:	d00e      	beq.n	800606c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800604e:	e043      	b.n	80060d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6a19      	ldr	r1, [r3, #32]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	8b5a      	ldrh	r2, [r3, #26]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fc01 	bl	8007864 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2204      	movs	r2, #4
 8006066:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800606a:	e035      	b.n	80060d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	7b1b      	ldrb	r3, [r3, #12]
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 f8fc 	bl	8008270 <USBH_LL_GetURBState>
 8006078:	4603      	mov	r3, r0
 800607a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800607c:	7cfb      	ldrb	r3, [r7, #19]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d129      	bne.n	80060d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	7b1b      	ldrb	r3, [r3, #12]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f002 f85f 	bl	800814c <USBH_LL_GetLastXferSize>
 800608e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d016      	beq.n	80060c8 <CDC_ProcessReception+0x9e>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	8b5b      	ldrh	r3, [r3, #26]
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d910      	bls.n	80060c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad2      	subs	r2, r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	441a      	add	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2203      	movs	r2, #3
 80060c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80060c6:	e006      	b.n	80060d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f80f 	bl	80060f4 <USBH_CDC_ReceiveCallback>
      break;
 80060d6:	bf00      	nop
  }
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006130:	2302      	movs	r3, #2
 8006132:	e029      	b.n	8006188 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	79fa      	ldrb	r2, [r7, #7]
 8006138:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f81f 	bl	8006190 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f001 ff2f 	bl	8007fe4 <USBH_LL_Init>

  return USBH_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e009      	b.n	80061b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	33e0      	adds	r3, #224	; 0xe0
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	2200      	movs	r2, #0
 80061ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	d9f2      	bls.n	80061a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e009      	b.n	80061d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d3f1      	bcc.n	80061c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d016      	beq.n	800627a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10e      	bne.n	8006274 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800625c:	1c59      	adds	r1, r3, #1
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	33de      	adds	r3, #222	; 0xde
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e004      	b.n	800627e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006274:	2302      	movs	r3, #2
 8006276:	73fb      	strb	r3, [r7, #15]
 8006278:	e001      	b.n	800627e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800627a:	2302      	movs	r3, #2
 800627c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800627e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d204      	bcs.n	80062b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80062b0:	e001      	b.n	80062b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80062b2:	2302      	movs	r3, #2
 80062b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	70fb      	strb	r3, [r7, #3]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70bb      	strb	r3, [r7, #2]
 80062da:	4613      	mov	r3, r2
 80062dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80062ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062ee:	e025      	b.n	800633c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	221a      	movs	r2, #26
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	3308      	adds	r3, #8
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	3302      	adds	r3, #2
 8006300:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	795b      	ldrb	r3, [r3, #5]
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	429a      	cmp	r2, r3
 800630a:	d002      	beq.n	8006312 <USBH_FindInterface+0x4e>
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	2bff      	cmp	r3, #255	; 0xff
 8006310:	d111      	bne.n	8006336 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006316:	78ba      	ldrb	r2, [r7, #2]
 8006318:	429a      	cmp	r2, r3
 800631a:	d002      	beq.n	8006322 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800631c:	78bb      	ldrb	r3, [r7, #2]
 800631e:	2bff      	cmp	r3, #255	; 0xff
 8006320:	d109      	bne.n	8006336 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006326:	787a      	ldrb	r2, [r7, #1]
 8006328:	429a      	cmp	r2, r3
 800632a:	d002      	beq.n	8006332 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800632c:	787b      	ldrb	r3, [r7, #1]
 800632e:	2bff      	cmp	r3, #255	; 0xff
 8006330:	d101      	bne.n	8006336 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	e006      	b.n	8006344 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	3301      	adds	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d9d6      	bls.n	80062f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006342:	23ff      	movs	r3, #255	; 0xff
}
 8006344:	4618      	mov	r0, r3
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fe7f 	bl	800805c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 ff98 	bl	8008296 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af04      	add	r7, sp, #16
 8006376:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006378:	2302      	movs	r3, #2
 800637a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d102      	bne.n	8006392 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2203      	movs	r2, #3
 8006390:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b0b      	cmp	r3, #11
 800639a:	f200 81be 	bhi.w	800671a <USBH_Process+0x3aa>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <USBH_Process+0x34>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	08006407 	.word	0x08006407
 80063ac:	0800646f 	.word	0x0800646f
 80063b0:	080066b5 	.word	0x080066b5
 80063b4:	0800671b 	.word	0x0800671b
 80063b8:	08006513 	.word	0x08006513
 80063bc:	0800665b 	.word	0x0800665b
 80063c0:	08006549 	.word	0x08006549
 80063c4:	08006569 	.word	0x08006569
 80063c8:	08006589 	.word	0x08006589
 80063cc:	080065cd 	.word	0x080065cd
 80063d0:	0800669d 	.word	0x0800669d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 819e 	beq.w	800671e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80063e8:	20c8      	movs	r0, #200	; 0xc8
 80063ea:	f001 ff9b 	bl	8008324 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fe91 	bl	8008116 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006404:	e18b      	b.n	800671e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800640c:	2b01      	cmp	r3, #1
 800640e:	d107      	bne.n	8006420 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800641e:	e18d      	b.n	800673c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642a:	d914      	bls.n	8006456 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006432:	3301      	adds	r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006442:	2b03      	cmp	r3, #3
 8006444:	d903      	bls.n	800644e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	220d      	movs	r2, #13
 800644a:	701a      	strb	r2, [r3, #0]
      break;
 800644c:	e176      	b.n	800673c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
      break;
 8006454:	e172      	b.n	800673c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800645c:	f103 020a 	add.w	r2, r3, #10
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006466:	200a      	movs	r0, #10
 8006468:	f001 ff5c 	bl	8008324 <USBH_Delay>
      break;
 800646c:	e166      	b.n	800673c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800647e:	2104      	movs	r1, #4
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006484:	2064      	movs	r0, #100	; 0x64
 8006486:	f001 ff4d 	bl	8008324 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fe1c 	bl	80080c8 <USBH_LL_GetSpeed>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2205      	movs	r2, #5
 800649e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fa2b 	bl	80078fe <USBH_AllocPipe>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80064b0:	2180      	movs	r1, #128	; 0x80
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fa23 	bl	80078fe <USBH_AllocPipe>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7919      	ldrb	r1, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80064d4:	b292      	uxth	r2, r2
 80064d6:	9202      	str	r2, [sp, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	9201      	str	r2, [sp, #4]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4603      	mov	r3, r0
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f9dc 	bl	80078a0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7959      	ldrb	r1, [r3, #5]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80064fc:	b292      	uxth	r2, r2
 80064fe:	9202      	str	r2, [sp, #8]
 8006500:	2200      	movs	r2, #0
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4603      	mov	r3, r0
 8006508:	2200      	movs	r2, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f9c8 	bl	80078a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006510:	e114      	b.n	800673c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f918 	bl	8006748 <USBH_HandleEnum>
 8006518:	4603      	mov	r3, r0
 800651a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 80fe 	bne.w	8006722 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006534:	2b01      	cmp	r3, #1
 8006536:	d103      	bne.n	8006540 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2208      	movs	r2, #8
 800653c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800653e:	e0f0      	b.n	8006722 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2207      	movs	r2, #7
 8006544:	701a      	strb	r2, [r3, #0]
      break;
 8006546:	e0ec      	b.n	8006722 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80e9 	beq.w	8006726 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800655a:	2101      	movs	r1, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2208      	movs	r2, #8
 8006564:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006566:	e0de      	b.n	8006726 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800656e:	b29b      	uxth	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc2c 	bl	8006dd0 <USBH_SetCfg>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 80d5 	bne.w	800672a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2209      	movs	r2, #9
 8006584:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006586:	e0d0      	b.n	800672a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006596:	2101      	movs	r1, #1
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc3c 	bl	8006e16 <USBH_SetFeature>
 800659e:	4603      	mov	r3, r0
 80065a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	220a      	movs	r2, #10
 80065ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065b0:	e0bd      	b.n	800672e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	f040 80b9 	bne.w	800672e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	220a      	movs	r2, #10
 80065c0:	701a      	strb	r2, [r3, #0]
      break;
 80065c2:	e0b4      	b.n	800672e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	220a      	movs	r2, #10
 80065c8:	701a      	strb	r2, [r3, #0]
      break;
 80065ca:	e0b0      	b.n	800672e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80ad 	beq.w	8006732 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	e016      	b.n	8006614 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80065e6:	7bfa      	ldrb	r2, [r7, #15]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	32de      	adds	r2, #222	; 0xde
 80065ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f0:	791a      	ldrb	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d108      	bne.n	800660e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80065fc:	7bfa      	ldrb	r2, [r7, #15]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32de      	adds	r2, #222	; 0xde
 8006602:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800660c:	e005      	b.n	800661a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3301      	adds	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0e5      	beq.n	80065e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d016      	beq.n	8006652 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2206      	movs	r2, #6
 800663a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006642:	2103      	movs	r1, #3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006648:	e073      	b.n	8006732 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	220d      	movs	r2, #13
 800664e:	701a      	strb	r2, [r3, #0]
      break;
 8006650:	e06f      	b.n	8006732 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	220d      	movs	r2, #13
 8006656:	701a      	strb	r2, [r3, #0]
      break;
 8006658:	e06b      	b.n	8006732 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
 8006670:	4603      	mov	r3, r0
 8006672:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	220b      	movs	r2, #11
 8006680:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006682:	e058      	b.n	8006736 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d154      	bne.n	8006736 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	220d      	movs	r2, #13
 8006690:	701a      	strb	r2, [r3, #0]
      break;
 8006692:	e050      	b.n	8006736 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	220d      	movs	r2, #13
 8006698:	701a      	strb	r2, [r3, #0]
      break;
 800669a:	e04c      	b.n	8006736 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d049      	beq.n	800673a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      }
      break;
 80066b2:	e042      	b.n	800673a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fd67 	bl	8006190 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066f0:	2105      	movs	r1, #5
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff fe20 	bl	8006350 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006710:	e014      	b.n	800673c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fca2 	bl	800805c <USBH_LL_Start>
      break;
 8006718:	e010      	b.n	800673c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800671a:	bf00      	nop
 800671c:	e00e      	b.n	800673c <USBH_Process+0x3cc>
      break;
 800671e:	bf00      	nop
 8006720:	e00c      	b.n	800673c <USBH_Process+0x3cc>
      break;
 8006722:	bf00      	nop
 8006724:	e00a      	b.n	800673c <USBH_Process+0x3cc>
    break;
 8006726:	bf00      	nop
 8006728:	e008      	b.n	800673c <USBH_Process+0x3cc>
      break;
 800672a:	bf00      	nop
 800672c:	e006      	b.n	800673c <USBH_Process+0x3cc>
      break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <USBH_Process+0x3cc>
      break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <USBH_Process+0x3cc>
      break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <USBH_Process+0x3cc>
      break;
 800673a:	bf00      	nop
  }
  return USBH_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop

08006748 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af04      	add	r7, sp, #16
 800674e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006754:	2301      	movs	r3, #1
 8006756:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b07      	cmp	r3, #7
 800675e:	f200 81c1 	bhi.w	8006ae4 <USBH_HandleEnum+0x39c>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBH_HandleEnum+0x20>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006789 	.word	0x08006789
 800676c:	08006847 	.word	0x08006847
 8006770:	080068b1 	.word	0x080068b1
 8006774:	0800693f 	.word	0x0800693f
 8006778:	080069a9 	.word	0x080069a9
 800677c:	08006a19 	.word	0x08006a19
 8006780:	08006a5f 	.word	0x08006a5f
 8006784:	08006aa5 	.word	0x08006aa5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006788:	2108      	movs	r1, #8
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa50 	bl	8006c30 <USBH_Get_DevDesc>
 8006790:	4603      	mov	r3, r0
 8006792:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d130      	bne.n	80067fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7919      	ldrb	r1, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80067be:	b292      	uxth	r2, r2
 80067c0:	9202      	str	r2, [sp, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f867 	bl	80078a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7959      	ldrb	r1, [r3, #5]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067e6:	b292      	uxth	r2, r2
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4603      	mov	r3, r0
 80067f2:	2200      	movs	r2, #0
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f853 	bl	80078a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067fa:	e175      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	f040 8172 	bne.w	8006ae8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800680a:	3301      	adds	r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800681a:	2b03      	cmp	r3, #3
 800681c:	d903      	bls.n	8006826 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220d      	movs	r2, #13
 8006822:	701a      	strb	r2, [r3, #0]
      break;
 8006824:	e160      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	795b      	ldrb	r3, [r3, #5]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f887 	bl	8007940 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f881 	bl	8007940 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
      break;
 8006844:	e150      	b.n	8006ae8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006846:	2112      	movs	r1, #18
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9f1 	bl	8006c30 <USBH_Get_DevDesc>
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800685e:	e145      	b.n	8006aec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b03      	cmp	r3, #3
 8006864:	f040 8142 	bne.w	8006aec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800686e:	3301      	adds	r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800687e:	2b03      	cmp	r3, #3
 8006880:	d903      	bls.n	800688a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	220d      	movs	r2, #13
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	e130      	b.n	8006aec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f855 	bl	8007940 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f84f 	bl	8007940 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
      break;
 80068ae:	e11d      	b.n	8006aec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa68 	bl	8006d88 <USBH_SetAddress>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d132      	bne.n	8006928 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80068c2:	2002      	movs	r0, #2
 80068c4:	f001 fd2e 	bl	8008324 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2203      	movs	r2, #3
 80068d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7919      	ldrb	r1, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80068ea:	b292      	uxth	r2, r2
 80068ec:	9202      	str	r2, [sp, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	9201      	str	r2, [sp, #4]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4603      	mov	r3, r0
 80068f6:	2280      	movs	r2, #128	; 0x80
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 ffd1 	bl	80078a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7959      	ldrb	r1, [r3, #5]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006912:	b292      	uxth	r2, r2
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	9201      	str	r2, [sp, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4603      	mov	r3, r0
 800691e:	2200      	movs	r2, #0
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 ffbd 	bl	80078a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006926:	e0e3      	b.n	8006af0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b03      	cmp	r3, #3
 800692c:	f040 80e0 	bne.w	8006af0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	220d      	movs	r2, #13
 8006934:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	705a      	strb	r2, [r3, #1]
      break;
 800693c:	e0d8      	b.n	8006af0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800693e:	2109      	movs	r1, #9
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f99d 	bl	8006c80 <USBH_Get_CfgDesc>
 8006946:	4603      	mov	r3, r0
 8006948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006956:	e0cd      	b.n	8006af4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b03      	cmp	r3, #3
 800695c:	f040 80ca 	bne.w	8006af4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006976:	2b03      	cmp	r3, #3
 8006978:	d903      	bls.n	8006982 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	220d      	movs	r2, #13
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e0b8      	b.n	8006af4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 ffd9 	bl	8007940 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 ffd3 	bl	8007940 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
      break;
 80069a6:	e0a5      	b.n	8006af4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f965 	bl	8006c80 <USBH_Get_CfgDesc>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2205      	movs	r2, #5
 80069c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80069c6:	e097      	b.n	8006af8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	f040 8094 	bne.w	8006af8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d903      	bls.n	80069f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220d      	movs	r2, #13
 80069ee:	701a      	strb	r2, [r3, #0]
      break;
 80069f0:	e082      	b.n	8006af8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	795b      	ldrb	r3, [r3, #5]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ffa1 	bl	8007940 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	791b      	ldrb	r3, [r3, #4]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 ff9b 	bl	8007940 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e06f      	b.n	8006af8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d019      	beq.n	8006a56 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006a2e:	23ff      	movs	r3, #255	; 0xff
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f949 	bl	8006cc8 <USBH_Get_StringDesc>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2206      	movs	r2, #6
 8006a44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a46:	e059      	b.n	8006afc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d156      	bne.n	8006afc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2206      	movs	r2, #6
 8006a52:	705a      	strb	r2, [r3, #1]
      break;
 8006a54:	e052      	b.n	8006afc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2206      	movs	r2, #6
 8006a5a:	705a      	strb	r2, [r3, #1]
      break;
 8006a5c:	e04e      	b.n	8006afc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a74:	23ff      	movs	r3, #255	; 0xff
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f926 	bl	8006cc8 <USBH_Get_StringDesc>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2207      	movs	r2, #7
 8006a8a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a8c:	e038      	b.n	8006b00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d135      	bne.n	8006b00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2207      	movs	r2, #7
 8006a98:	705a      	strb	r2, [r3, #1]
      break;
 8006a9a:	e031      	b.n	8006b00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	705a      	strb	r2, [r3, #1]
      break;
 8006aa2:	e02d      	b.n	8006b00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006aba:	23ff      	movs	r3, #255	; 0xff
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f903 	bl	8006cc8 <USBH_Get_StringDesc>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ad0:	e018      	b.n	8006b04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d115      	bne.n	8006b04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e012      	b.n	8006b04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae2:	e00f      	b.n	8006b04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ae4:	bf00      	nop
 8006ae6:	e00e      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006ae8:	bf00      	nop
 8006aea:	e00c      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006aec:	bf00      	nop
 8006aee:	e00a      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af0:	bf00      	nop
 8006af2:	e008      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af4:	bf00      	nop
 8006af6:	e006      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <USBH_HandleEnum+0x3be>
      break;
 8006b04:	bf00      	nop
  }
  return Status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f804 	bl	8006b52 <USBH_HandleSof>
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b0b      	cmp	r3, #11
 8006b62:	d10a      	bne.n	8006b7a <USBH_HandleSof+0x28>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006b92:	bf00      	nop
}
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006bae:	bf00      	nop
}
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fa42 	bl	8008092 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	791b      	ldrb	r3, [r3, #4]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fe93 	bl	8007940 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	795b      	ldrb	r3, [r3, #5]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fe8d 	bl	8007940 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f864 	bl	8006d1e <USBH_GetDescriptor>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	4619      	mov	r1, r3
 8006c72:	f000 f919 	bl	8006ea8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	331c      	adds	r3, #28
 8006c90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006c92:	887b      	ldrh	r3, [r7, #2]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f83d 	bl	8006d1e <USBH_GetDescriptor>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d107      	bne.n	8006cbe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006cae:	887b      	ldrh	r3, [r7, #2]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f989 	bl	8006fcc <USBH_ParseCfgDesc>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	72fb      	strb	r3, [r7, #11]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ce4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006cec:	893b      	ldrh	r3, [r7, #8]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f812 	bl	8006d1e <USBH_GetDescriptor>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d107      	bne.n	8006d14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d0a:	893a      	ldrh	r2, [r7, #8]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fb26 	bl	8007360 <USBH_ParseStringDesc>
  }

  return status;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	72fb      	strb	r3, [r7, #11]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	789b      	ldrb	r3, [r3, #2]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d11c      	bne.n	8006d72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2206      	movs	r2, #6
 8006d48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	893a      	ldrh	r2, [r7, #8]
 8006d4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5a:	d104      	bne.n	8006d66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f240 4209 	movw	r2, #1033	; 0x409
 8006d62:	829a      	strh	r2, [r3, #20]
 8006d64:	e002      	b.n	8006d6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8b3a      	ldrh	r2, [r7, #24]
 8006d70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006d72:	8b3b      	ldrh	r3, [r7, #24]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fb3f 	bl	80073fc <USBH_CtlReq>
 8006d7e:	4603      	mov	r3, r0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	789b      	ldrb	r3, [r3, #2]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10f      	bne.n	8006dbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2205      	movs	r2, #5
 8006da6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb1b 	bl	80073fc <USBH_CtlReq>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	789b      	ldrb	r3, [r3, #2]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10e      	bne.n	8006e02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2209      	movs	r2, #9
 8006dee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 faf8 	bl	80073fc <USBH_CtlReq>
 8006e0c:	4603      	mov	r3, r0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d10f      	bne.n	8006e4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fad4 	bl	80073fc <USBH_CtlReq>
 8006e54:	4603      	mov	r3, r0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	789b      	ldrb	r3, [r3, #2]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10f      	bne.n	8006e92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fab0 	bl	80073fc <USBH_CtlReq>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	785a      	ldrb	r2, [r3, #1]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3302      	adds	r3, #2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3303      	adds	r3, #3
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	791a      	ldrb	r2, [r3, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	795a      	ldrb	r2, [r3, #5]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	799a      	ldrb	r2, [r3, #6]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	79da      	ldrb	r2, [r3, #7]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	79db      	ldrb	r3, [r3, #7]
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	dc0f      	bgt.n	8006f2a <USBH_ParseDevDesc+0x82>
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	db14      	blt.n	8006f38 <USBH_ParseDevDesc+0x90>
 8006f0e:	3b08      	subs	r3, #8
 8006f10:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <USBH_ParseDevDesc+0x120>)
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bf14      	ite	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	2300      	moveq	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <USBH_ParseDevDesc+0x86>
 8006f28:	e006      	b.n	8006f38 <USBH_ParseDevDesc+0x90>
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d104      	bne.n	8006f38 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	79da      	ldrb	r2, [r3, #7]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	71da      	strb	r2, [r3, #7]
      break;
 8006f36:	e003      	b.n	8006f40 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2240      	movs	r2, #64	; 0x40
 8006f3c:	71da      	strb	r2, [r3, #7]
      break;
 8006f3e:	bf00      	nop
  }

  if (length > 8U)
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d939      	bls.n	8006fba <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	3309      	adds	r3, #9
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	330a      	adds	r3, #10
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	330b      	adds	r3, #11
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	4313      	orrs	r3, r2
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	330c      	adds	r3, #12
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	330d      	adds	r3, #13
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	7b9a      	ldrb	r2, [r3, #14]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	7bda      	ldrb	r2, [r3, #15]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	7c1a      	ldrb	r2, [r3, #16]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	7c5a      	ldrb	r2, [r3, #17]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	745a      	strb	r2, [r3, #17]
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	01000101 	.word	0x01000101

08006fcc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fe0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785a      	ldrb	r2, [r3, #1]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3302      	adds	r3, #2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b29a      	uxth	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3303      	adds	r3, #3
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	b29b      	uxth	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007028:	bf28      	it	cs
 800702a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800702e:	b29a      	uxth	r2, r3
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	791a      	ldrb	r2, [r3, #4]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	795a      	ldrb	r2, [r3, #5]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	799a      	ldrb	r2, [r3, #6]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	79da      	ldrb	r2, [r3, #7]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	7a1a      	ldrb	r2, [r3, #8]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b09      	cmp	r3, #9
 8007062:	d002      	beq.n	800706a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2209      	movs	r2, #9
 8007068:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	2b09      	cmp	r3, #9
 800706e:	f240 809d 	bls.w	80071ac <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007072:	2309      	movs	r3, #9
 8007074:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800707a:	e081      	b.n	8007180 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800707c:	f107 0316 	add.w	r3, r7, #22
 8007080:	4619      	mov	r1, r3
 8007082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007084:	f000 f99f 	bl	80073c6 <USBH_GetNextDesc>
 8007088:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b04      	cmp	r3, #4
 8007090:	d176      	bne.n	8007180 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b09      	cmp	r3, #9
 8007098:	d002      	beq.n	80070a0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2209      	movs	r2, #9
 800709e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80070a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a4:	221a      	movs	r2, #26
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	3308      	adds	r3, #8
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	4413      	add	r3, r2
 80070b0:	3302      	adds	r3, #2
 80070b2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80070b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b6:	69f8      	ldr	r0, [r7, #28]
 80070b8:	f000 f87e 	bl	80071b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80070c6:	e043      	b.n	8007150 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80070c8:	f107 0316 	add.w	r3, r7, #22
 80070cc:	4619      	mov	r1, r3
 80070ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d0:	f000 f979 	bl	80073c6 <USBH_GetNextDesc>
 80070d4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d138      	bne.n	8007150 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	795b      	ldrb	r3, [r3, #5]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10f      	bne.n	8007106 <USBH_ParseCfgDesc+0x13a>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	799b      	ldrb	r3, [r3, #6]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d10b      	bne.n	8007106 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	79db      	ldrb	r3, [r3, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10f      	bne.n	8007116 <USBH_ParseCfgDesc+0x14a>
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d00b      	beq.n	8007116 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	2209      	movs	r2, #9
 8007102:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007104:	e007      	b.n	8007116 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b07      	cmp	r3, #7
 800710c:	d004      	beq.n	8007118 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2207      	movs	r2, #7
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e000      	b.n	8007118 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007116:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800711c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007120:	3201      	adds	r2, #1
 8007122:	00d2      	lsls	r2, r2, #3
 8007124:	211a      	movs	r1, #26
 8007126:	fb01 f303 	mul.w	r3, r1, r3
 800712a:	4413      	add	r3, r2
 800712c:	3308      	adds	r3, #8
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	4413      	add	r3, r2
 8007132:	3304      	adds	r3, #4
 8007134:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f86b 	bl	8007216 <USBH_ParseEPDesc>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800714a:	3301      	adds	r3, #1
 800714c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	791b      	ldrb	r3, [r3, #4]
 8007154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007158:	429a      	cmp	r2, r3
 800715a:	d204      	bcs.n	8007166 <USBH_ParseCfgDesc+0x19a>
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	885a      	ldrh	r2, [r3, #2]
 8007160:	8afb      	ldrh	r3, [r7, #22]
 8007162:	429a      	cmp	r2, r3
 8007164:	d8b0      	bhi.n	80070c8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800716e:	429a      	cmp	r2, r3
 8007170:	d201      	bcs.n	8007176 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007172:	2303      	movs	r3, #3
 8007174:	e01c      	b.n	80071b0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800717a:	3301      	adds	r3, #1
 800717c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007184:	2b01      	cmp	r3, #1
 8007186:	d805      	bhi.n	8007194 <USBH_ParseCfgDesc+0x1c8>
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	885a      	ldrh	r2, [r3, #2]
 800718c:	8afb      	ldrh	r3, [r7, #22]
 800718e:	429a      	cmp	r2, r3
 8007190:	f63f af74 	bhi.w	800707c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	2b02      	cmp	r3, #2
 800719a:	bf28      	it	cs
 800719c:	2302      	movcs	r3, #2
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d201      	bcs.n	80071ac <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e001      	b.n	80071b0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80071ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	785a      	ldrb	r2, [r3, #1]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	789a      	ldrb	r2, [r3, #2]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	78da      	ldrb	r2, [r3, #3]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	791a      	ldrb	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	795a      	ldrb	r2, [r3, #5]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	799a      	ldrb	r2, [r3, #6]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	79da      	ldrb	r2, [r3, #7]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	7a1a      	ldrb	r2, [r3, #8]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	721a      	strb	r2, [r3, #8]
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007216:	b480      	push	{r7}
 8007218:	b087      	sub	sp, #28
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	785a      	ldrb	r2, [r3, #1]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	789a      	ldrb	r2, [r3, #2]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	78da      	ldrb	r2, [r3, #3]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b29a      	uxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3305      	adds	r3, #5
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	b29b      	uxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b29a      	uxth	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	799a      	ldrb	r2, [r3, #6]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007272:	2303      	movs	r3, #3
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e033      	b.n	80072e0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	889b      	ldrh	r3, [r3, #4]
 800727c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007280:	f023 0307 	bic.w	r3, r3, #7
 8007284:	b29a      	uxth	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	889b      	ldrh	r3, [r3, #4]
 800728e:	b21a      	sxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3304      	adds	r3, #4
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b299      	uxth	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3305      	adds	r3, #5
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	430b      	orrs	r3, r1
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d110      	bne.n	80072d2 <USBH_ParseEPDesc+0xbc>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b299      	uxth	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3305      	adds	r3, #5
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	430b      	orrs	r3, r1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ce:	b21b      	sxth	r3, r3
 80072d0:	e001      	b.n	80072d6 <USBH_ParseEPDesc+0xc0>
 80072d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d6:	4313      	orrs	r3, r2
 80072d8:	b21b      	sxth	r3, r3
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d116      	bne.n	8007318 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	78db      	ldrb	r3, [r3, #3]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d005      	beq.n	8007302 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	78db      	ldrb	r3, [r3, #3]
 80072fa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d127      	bne.n	8007352 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	799b      	ldrb	r3, [r3, #6]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <USBH_ParseEPDesc+0xfc>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	799b      	ldrb	r3, [r3, #6]
 800730e:	2b10      	cmp	r3, #16
 8007310:	d91f      	bls.n	8007352 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007312:	2303      	movs	r3, #3
 8007314:	75fb      	strb	r3, [r7, #23]
 8007316:	e01c      	b.n	8007352 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	78db      	ldrb	r3, [r3, #3]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10a      	bne.n	800733a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	799b      	ldrb	r3, [r3, #6]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <USBH_ParseEPDesc+0x11e>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	799b      	ldrb	r3, [r3, #6]
 8007330:	2b10      	cmp	r3, #16
 8007332:	d90e      	bls.n	8007352 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007334:	2303      	movs	r3, #3
 8007336:	75fb      	strb	r3, [r7, #23]
 8007338:	e00b      	b.n	8007352 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	78db      	ldrb	r3, [r3, #3]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d105      	bne.n	8007352 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	799b      	ldrb	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800734e:	2303      	movs	r3, #3
 8007350:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
}
 8007354:	4618      	mov	r0, r3
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d120      	bne.n	80073ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	1e9a      	subs	r2, r3, #2
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	4293      	cmp	r3, r2
 8007382:	bf28      	it	cs
 8007384:	4613      	movcs	r3, r2
 8007386:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3302      	adds	r3, #2
 800738c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800738e:	2300      	movs	r3, #0
 8007390:	82fb      	strh	r3, [r7, #22]
 8007392:	e00b      	b.n	80073ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007394:	8afb      	ldrh	r3, [r7, #22]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	701a      	strb	r2, [r3, #0]
      pdest++;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80073a6:	8afb      	ldrh	r3, [r7, #22]
 80073a8:	3302      	adds	r3, #2
 80073aa:	82fb      	strh	r3, [r7, #22]
 80073ac:	8afa      	ldrh	r2, [r7, #22]
 80073ae:	8abb      	ldrh	r3, [r7, #20]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d3ef      	bcc.n	8007394 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
  }
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4413      	add	r3, r2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d002      	beq.n	800741c <USBH_CtlReq+0x20>
 8007416:	2b02      	cmp	r3, #2
 8007418:	d00f      	beq.n	800743a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800741a:	e027      	b.n	800746c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	88fa      	ldrh	r2, [r7, #6]
 8007426:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2202      	movs	r2, #2
 8007432:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
      break;
 8007438:	e018      	b.n	800746c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f81c 	bl	8007478 <USBH_HandleControl>
 8007440:	4603      	mov	r3, r0
 8007442:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <USBH_CtlReq+0x54>
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d106      	bne.n	800745e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	761a      	strb	r2, [r3, #24]
      break;
 800745c:	e005      	b.n	800746a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d102      	bne.n	800746a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	709a      	strb	r2, [r3, #2]
      break;
 800746a:	bf00      	nop
  }
  return status;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007480:	2301      	movs	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007484:	2300      	movs	r3, #0
 8007486:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7e1b      	ldrb	r3, [r3, #24]
 800748c:	3b01      	subs	r3, #1
 800748e:	2b0a      	cmp	r3, #10
 8007490:	f200 8156 	bhi.w	8007740 <USBH_HandleControl+0x2c8>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <USBH_HandleControl+0x24>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	080074e3 	.word	0x080074e3
 80074a4:	0800754d 	.word	0x0800754d
 80074a8:	08007573 	.word	0x08007573
 80074ac:	080075ab 	.word	0x080075ab
 80074b0:	080075d5 	.word	0x080075d5
 80074b4:	08007627 	.word	0x08007627
 80074b8:	08007649 	.word	0x08007649
 80074bc:	08007685 	.word	0x08007685
 80074c0:	080076ab 	.word	0x080076ab
 80074c4:	080076e9 	.word	0x080076e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f103 0110 	add.w	r1, r3, #16
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	795b      	ldrb	r3, [r3, #5]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f943 	bl	8007760 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	761a      	strb	r2, [r3, #24]
      break;
 80074e0:	e139      	b.n	8007756 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	795b      	ldrb	r3, [r3, #5]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fec1 	bl	8008270 <USBH_LL_GetURBState>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d11e      	bne.n	8007536 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7c1b      	ldrb	r3, [r3, #16]
 80074fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007500:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8adb      	ldrh	r3, [r3, #22]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800750a:	7b7b      	ldrb	r3, [r7, #13]
 800750c:	2b80      	cmp	r3, #128	; 0x80
 800750e:	d103      	bne.n	8007518 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2203      	movs	r2, #3
 8007514:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007516:	e115      	b.n	8007744 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2205      	movs	r2, #5
 800751c:	761a      	strb	r2, [r3, #24]
      break;
 800751e:	e111      	b.n	8007744 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007520:	7b7b      	ldrb	r3, [r7, #13]
 8007522:	2b80      	cmp	r3, #128	; 0x80
 8007524:	d103      	bne.n	800752e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2209      	movs	r2, #9
 800752a:	761a      	strb	r2, [r3, #24]
      break;
 800752c:	e10a      	b.n	8007744 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2207      	movs	r2, #7
 8007532:	761a      	strb	r2, [r3, #24]
      break;
 8007534:	e106      	b.n	8007744 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b04      	cmp	r3, #4
 800753a:	d003      	beq.n	8007544 <USBH_HandleControl+0xcc>
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b02      	cmp	r3, #2
 8007540:	f040 8100 	bne.w	8007744 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220b      	movs	r2, #11
 8007548:	761a      	strb	r2, [r3, #24]
      break;
 800754a:	e0fb      	b.n	8007744 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6899      	ldr	r1, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	899a      	ldrh	r2, [r3, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f93a 	bl	80077de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2204      	movs	r2, #4
 800756e:	761a      	strb	r2, [r3, #24]
      break;
 8007570:	e0f1      	b.n	8007756 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fe79 	bl	8008270 <USBH_LL_GetURBState>
 800757e:	4603      	mov	r3, r0
 8007580:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d102      	bne.n	800758e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2209      	movs	r2, #9
 800758c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d102      	bne.n	800759a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007594:	2303      	movs	r3, #3
 8007596:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007598:	e0d6      	b.n	8007748 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b04      	cmp	r3, #4
 800759e:	f040 80d3 	bne.w	8007748 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	220b      	movs	r2, #11
 80075a6:	761a      	strb	r2, [r3, #24]
      break;
 80075a8:	e0ce      	b.n	8007748 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6899      	ldr	r1, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	899a      	ldrh	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	795b      	ldrb	r3, [r3, #5]
 80075b6:	2001      	movs	r0, #1
 80075b8:	9000      	str	r0, [sp, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8ea 	bl	8007794 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2206      	movs	r2, #6
 80075d0:	761a      	strb	r2, [r3, #24]
      break;
 80075d2:	e0c0      	b.n	8007756 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	795b      	ldrb	r3, [r3, #5]
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fe48 	bl	8008270 <USBH_LL_GetURBState>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d103      	bne.n	80075f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2207      	movs	r2, #7
 80075ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80075f0:	e0ac      	b.n	800774c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d105      	bne.n	8007604 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	220c      	movs	r2, #12
 80075fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80075fe:	2303      	movs	r3, #3
 8007600:	73fb      	strb	r3, [r7, #15]
      break;
 8007602:	e0a3      	b.n	800774c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d103      	bne.n	8007612 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2205      	movs	r2, #5
 800760e:	761a      	strb	r2, [r3, #24]
      break;
 8007610:	e09c      	b.n	800774c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b04      	cmp	r3, #4
 8007616:	f040 8099 	bne.w	800774c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	220b      	movs	r2, #11
 800761e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007620:	2302      	movs	r3, #2
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e092      	b.n	800774c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	791b      	ldrb	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8d5 	bl	80077de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800763a:	b29a      	uxth	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2208      	movs	r2, #8
 8007644:	761a      	strb	r2, [r3, #24]

      break;
 8007646:	e086      	b.n	8007756 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	791b      	ldrb	r3, [r3, #4]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fe0e 	bl	8008270 <USBH_LL_GetURBState>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d105      	bne.n	800766a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220d      	movs	r2, #13
 8007662:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007668:	e072      	b.n	8007750 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d103      	bne.n	8007678 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	220b      	movs	r2, #11
 8007674:	761a      	strb	r2, [r3, #24]
      break;
 8007676:	e06b      	b.n	8007750 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b05      	cmp	r3, #5
 800767c:	d168      	bne.n	8007750 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800767e:	2303      	movs	r3, #3
 8007680:	73fb      	strb	r3, [r7, #15]
      break;
 8007682:	e065      	b.n	8007750 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	795b      	ldrb	r3, [r3, #5]
 8007688:	2201      	movs	r2, #1
 800768a:	9200      	str	r2, [sp, #0]
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f87f 	bl	8007794 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220a      	movs	r2, #10
 80076a6:	761a      	strb	r2, [r3, #24]
      break;
 80076a8:	e055      	b.n	8007756 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	795b      	ldrb	r3, [r3, #5]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fddd 	bl	8008270 <USBH_LL_GetURBState>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	220d      	movs	r2, #13
 80076c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076ca:	e043      	b.n	8007754 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d103      	bne.n	80076da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2209      	movs	r2, #9
 80076d6:	761a      	strb	r2, [r3, #24]
      break;
 80076d8:	e03c      	b.n	8007754 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d139      	bne.n	8007754 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	220b      	movs	r2, #11
 80076e4:	761a      	strb	r2, [r3, #24]
      break;
 80076e6:	e035      	b.n	8007754 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7e5b      	ldrb	r3, [r3, #25]
 80076ec:	3301      	adds	r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	765a      	strb	r2, [r3, #25]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	7e5b      	ldrb	r3, [r3, #25]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d806      	bhi.n	800770a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007708:	e025      	b.n	8007756 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007710:	2106      	movs	r1, #6
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	795b      	ldrb	r3, [r3, #5]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f90c 	bl	8007940 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f906 	bl	8007940 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800773a:	2302      	movs	r3, #2
 800773c:	73fb      	strb	r3, [r7, #15]
      break;
 800773e:	e00a      	b.n	8007756 <USBH_HandleControl+0x2de>

    default:
      break;
 8007740:	bf00      	nop
 8007742:	e008      	b.n	8007756 <USBH_HandleControl+0x2de>
      break;
 8007744:	bf00      	nop
 8007746:	e006      	b.n	8007756 <USBH_HandleControl+0x2de>
      break;
 8007748:	bf00      	nop
 800774a:	e004      	b.n	8007756 <USBH_HandleControl+0x2de>
      break;
 800774c:	bf00      	nop
 800774e:	e002      	b.n	8007756 <USBH_HandleControl+0x2de>
      break;
 8007750:	bf00      	nop
 8007752:	e000      	b.n	8007756 <USBH_HandleControl+0x2de>
      break;
 8007754:	bf00      	nop
  }

  return status;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af04      	add	r7, sp, #16
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800776e:	79f9      	ldrb	r1, [r7, #7]
 8007770:	2300      	movs	r3, #0
 8007772:	9303      	str	r3, [sp, #12]
 8007774:	2308      	movs	r3, #8
 8007776:	9302      	str	r3, [sp, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	2300      	movs	r3, #0
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2300      	movs	r3, #0
 8007782:	2200      	movs	r2, #0
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fd42 	bl	800820e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af04      	add	r7, sp, #16
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4611      	mov	r1, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	460b      	mov	r3, r1
 80077a4:	80fb      	strh	r3, [r7, #6]
 80077a6:	4613      	mov	r3, r2
 80077a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80077b8:	7979      	ldrb	r1, [r7, #5]
 80077ba:	7e3b      	ldrb	r3, [r7, #24]
 80077bc:	9303      	str	r3, [sp, #12]
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	2301      	movs	r3, #1
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	2300      	movs	r3, #0
 80077cc:	2200      	movs	r2, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fd1d 	bl	800820e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af04      	add	r7, sp, #16
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	4611      	mov	r1, r2
 80077ea:	461a      	mov	r2, r3
 80077ec:	460b      	mov	r3, r1
 80077ee:	80fb      	strh	r3, [r7, #6]
 80077f0:	4613      	mov	r3, r2
 80077f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80077f4:	7979      	ldrb	r1, [r7, #5]
 80077f6:	2300      	movs	r3, #0
 80077f8:	9303      	str	r3, [sp, #12]
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	9302      	str	r3, [sp, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	2301      	movs	r3, #1
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	2201      	movs	r2, #1
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fcff 	bl	800820e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007810:	2300      	movs	r3, #0

}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b088      	sub	sp, #32
 800781e:	af04      	add	r7, sp, #16
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	4611      	mov	r1, r2
 8007826:	461a      	mov	r2, r3
 8007828:	460b      	mov	r3, r1
 800782a:	80fb      	strh	r3, [r7, #6]
 800782c:	4613      	mov	r3, r2
 800782e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800783e:	7979      	ldrb	r1, [r7, #5]
 8007840:	7e3b      	ldrb	r3, [r7, #24]
 8007842:	9303      	str	r3, [sp, #12]
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	9302      	str	r3, [sp, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	2301      	movs	r3, #1
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2302      	movs	r3, #2
 8007852:	2200      	movs	r2, #0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fcda 	bl	800820e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af04      	add	r7, sp, #16
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4611      	mov	r1, r2
 8007870:	461a      	mov	r2, r3
 8007872:	460b      	mov	r3, r1
 8007874:	80fb      	strh	r3, [r7, #6]
 8007876:	4613      	mov	r3, r2
 8007878:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800787a:	7979      	ldrb	r1, [r7, #5]
 800787c:	2300      	movs	r3, #0
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	9302      	str	r3, [sp, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	2301      	movs	r3, #1
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2302      	movs	r3, #2
 800788e:	2201      	movs	r2, #1
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fcbc 	bl	800820e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	461a      	mov	r2, r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	70fb      	strb	r3, [r7, #3]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70bb      	strb	r3, [r7, #2]
 80078b6:	4613      	mov	r3, r2
 80078b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80078ba:	7878      	ldrb	r0, [r7, #1]
 80078bc:	78ba      	ldrb	r2, [r7, #2]
 80078be:	78f9      	ldrb	r1, [r7, #3]
 80078c0:	8b3b      	ldrh	r3, [r7, #24]
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	7d3b      	ldrb	r3, [r7, #20]
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	7c3b      	ldrb	r3, [r7, #16]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4603      	mov	r3, r0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc4f 	bl	8008172 <USBH_LL_OpenPipe>

  return USBH_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc6e 	bl	80081d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f836 	bl	800797c <USBH_GetFreePipe>
 8007910:	4603      	mov	r3, r0
 8007912:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800791a:	4293      	cmp	r3, r2
 800791c:	d00a      	beq.n	8007934 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	33e0      	adds	r3, #224	; 0xe0
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	b2db      	uxtb	r3, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	2b0f      	cmp	r3, #15
 8007950:	d80d      	bhi.n	800796e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	33e0      	adds	r3, #224	; 0xe0
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	33e0      	adds	r3, #224	; 0xe0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e00f      	b.n	80079ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	33e0      	adds	r3, #224	; 0xe0
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	e007      	b.n	80079b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	3301      	adds	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b0f      	cmp	r3, #15
 80079b2:	d9ec      	bls.n	800798e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80079b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ce:	4b7d      	ldr	r3, [pc, #500]	; (8007bc4 <xTaskIncrementTick+0x200>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 80ec 	bne.w	8007bb0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079d8:	4b7b      	ldr	r3, [pc, #492]	; (8007bc8 <xTaskIncrementTick+0x204>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3301      	adds	r3, #1
 80079de:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80079e0:	4a79      	ldr	r2, [pc, #484]	; (8007bc8 <xTaskIncrementTick+0x204>)
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d120      	bne.n	8007a2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80079ec:	4b77      	ldr	r3, [pc, #476]	; (8007bcc <xTaskIncrementTick+0x208>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xTaskIncrementTick+0x46>
 8007a0c:	4b6f      	ldr	r3, [pc, #444]	; (8007bcc <xTaskIncrementTick+0x208>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	4b6f      	ldr	r3, [pc, #444]	; (8007bd0 <xTaskIncrementTick+0x20c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a6d      	ldr	r2, [pc, #436]	; (8007bcc <xTaskIncrementTick+0x208>)
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	4a6d      	ldr	r2, [pc, #436]	; (8007bd0 <xTaskIncrementTick+0x20c>)
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	4b6c      	ldr	r3, [pc, #432]	; (8007bd4 <xTaskIncrementTick+0x210>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	4a6b      	ldr	r2, [pc, #428]	; (8007bd4 <xTaskIncrementTick+0x210>)
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	f000 f93d 	bl	8007ca8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <xTaskIncrementTick+0x214>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	f0c0 80a6 	bcc.w	8007b86 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a3a:	4b64      	ldr	r3, [pc, #400]	; (8007bcc <xTaskIncrementTick+0x208>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a44:	4b64      	ldr	r3, [pc, #400]	; (8007bd8 <xTaskIncrementTick+0x214>)
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	601a      	str	r2, [r3, #0]
                    break;
 8007a4c:	e09b      	b.n	8007b86 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4e:	4b5f      	ldr	r3, [pc, #380]	; (8007bcc <xTaskIncrementTick+0x208>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d203      	bcs.n	8007a6e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007a66:	4a5c      	ldr	r2, [pc, #368]	; (8007bd8 <xTaskIncrementTick+0x214>)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007a6c:	e08b      	b.n	8007b86 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	68d2      	ldr	r2, [r2, #12]
 8007a7c:	609a      	str	r2, [r3, #8]
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d103      	bne.n	8007a9c <xTaskIncrementTick+0xd8>
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	615a      	str	r2, [r3, #20]
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	1e5a      	subs	r2, r3, #1
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01e      	beq.n	8007af2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	6a12      	ldr	r2, [r2, #32]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	69d2      	ldr	r2, [r2, #28]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d103      	bne.n	8007ae2 <xTaskIncrementTick+0x11e>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	6a1a      	ldr	r2, [r3, #32]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	1e5a      	subs	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	2201      	movs	r2, #1
 8007af8:	409a      	lsls	r2, r3
 8007afa:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <xTaskIncrementTick+0x218>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	4a36      	ldr	r2, [pc, #216]	; (8007bdc <xTaskIncrementTick+0x218>)
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4935      	ldr	r1, [pc, #212]	; (8007be0 <xTaskIncrementTick+0x21c>)
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	3304      	adds	r3, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	3204      	adds	r2, #4
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	1d1a      	adds	r2, r3, #4
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	609a      	str	r2, [r3, #8]
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <xTaskIncrementTick+0x21c>)
 8007b48:	441a      	add	r2, r3
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	615a      	str	r2, [r3, #20]
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	4923      	ldr	r1, [pc, #140]	; (8007be0 <xTaskIncrementTick+0x21c>)
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	1c59      	adds	r1, r3, #1
 8007b62:	481f      	ldr	r0, [pc, #124]	; (8007be0 <xTaskIncrementTick+0x21c>)
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4403      	add	r3, r0
 8007b6e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <xTaskIncrementTick+0x220>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	f67f af5d 	bls.w	8007a3a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b84:	e759      	b.n	8007a3a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b86:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <xTaskIncrementTick+0x220>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4914      	ldr	r1, [pc, #80]	; (8007be0 <xTaskIncrementTick+0x21c>)
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d901      	bls.n	8007ba2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <xTaskIncrementTick+0x224>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
 8007bae:	e004      	b.n	8007bba <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <xTaskIncrementTick+0x228>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	4a0d      	ldr	r2, [pc, #52]	; (8007bec <xTaskIncrementTick+0x228>)
 8007bb8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3728      	adds	r7, #40	; 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	200002a8 	.word	0x200002a8
 8007bc8:	20000290 	.word	0x20000290
 8007bcc:	20000288 	.word	0x20000288
 8007bd0:	2000028c 	.word	0x2000028c
 8007bd4:	200002a0 	.word	0x200002a0
 8007bd8:	200002a4 	.word	0x200002a4
 8007bdc:	20000294 	.word	0x20000294
 8007be0:	20000224 	.word	0x20000224
 8007be4:	20000220 	.word	0x20000220
 8007be8:	2000029c 	.word	0x2000029c
 8007bec:	20000298 	.word	0x20000298

08007bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <vTaskSwitchContext+0xa4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007bfe:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <vTaskSwitchContext+0xa8>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007c04:	e03f      	b.n	8007c86 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007c06:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <vTaskSwitchContext+0xa8>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c0c:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <vTaskSwitchContext+0xac>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	fab3 f383 	clz	r3, r3
 8007c18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	f1c3 031f 	rsb	r3, r3, #31
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	491f      	ldr	r1, [pc, #124]	; (8007ca0 <vTaskSwitchContext+0xb0>)
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	607b      	str	r3, [r7, #4]
    }
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <vTaskSwitchContext+0x5a>
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <vTaskSwitchContext+0xb0>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d104      	bne.n	8007c7c <vTaskSwitchContext+0x8c>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <vTaskSwitchContext+0xb4>)
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	200002a8 	.word	0x200002a8
 8007c98:	2000029c 	.word	0x2000029c
 8007c9c:	20000294 	.word	0x20000294
 8007ca0:	20000224 	.word	0x20000224
 8007ca4:	20000220 	.word	0x20000220

08007ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <prvResetNextTaskUnblockTime+0x30>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <prvResetNextTaskUnblockTime+0x34>)
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007cbe:	e005      	b.n	8007ccc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <prvResetNextTaskUnblockTime+0x30>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a04      	ldr	r2, [pc, #16]	; (8007cdc <prvResetNextTaskUnblockTime+0x34>)
 8007cca:	6013      	str	r3, [r2, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000288 	.word	0x20000288
 8007cdc:	200002a4 	.word	0x200002a4

08007ce0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <pxCurrentTCBConst2>)
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	f380 8809 	msr	PSP, r0
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	4770      	bx	lr
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst2>:
 8007d00:	20000220 	.word	0x20000220
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
	...

08007d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007d10:	f3ef 8009 	mrs	r0, PSP
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <pxCurrentTCBConst>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f01e 0f10 	tst.w	lr, #16
 8007d20:	bf08      	it	eq
 8007d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	6010      	str	r0, [r2, #0]
 8007d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d34:	f380 8811 	msr	BASEPRI, r0
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f7ff ff56 	bl	8007bf0 <vTaskSwitchContext>
 8007d44:	f04f 0000 	mov.w	r0, #0
 8007d48:	f380 8811 	msr	BASEPRI, r0
 8007d4c:	bc09      	pop	{r0, r3}
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d56:	f01e 0f10 	tst.w	lr, #16
 8007d5a:	bf08      	it	eq
 8007d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d60:	f380 8809 	msr	PSP, r0
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst>:
 8007d70:	20000220 	.word	0x20000220
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
    }
 8007d90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007d92:	f7ff fe17 	bl	80079c4 <xTaskIncrementTick>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <SysTick_Handler+0x40>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007dae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	490e      	ldr	r1, [pc, #56]	; (8007dfc <MX_USB_HOST_Init+0x40>)
 8007dc4:	480e      	ldr	r0, [pc, #56]	; (8007e00 <MX_USB_HOST_Init+0x44>)
 8007dc6:	f7fe f9a9 	bl	800611c <USBH_Init>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007dd0:	f7f8 fdd2 	bl	8000978 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dd4:	490b      	ldr	r1, [pc, #44]	; (8007e04 <MX_USB_HOST_Init+0x48>)
 8007dd6:	480a      	ldr	r0, [pc, #40]	; (8007e00 <MX_USB_HOST_Init+0x44>)
 8007dd8:	f7fe fa2e 	bl	8006238 <USBH_RegisterClass>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007de2:	f7f8 fdc9 	bl	8000978 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007de6:	4806      	ldr	r0, [pc, #24]	; (8007e00 <MX_USB_HOST_Init+0x44>)
 8007de8:	f7fe fab2 	bl	8006350 <USBH_Start>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007df2:	f7f8 fdc1 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	200002ac 	.word	0x200002ac
 8007e04:	2000000c 	.word	0x2000000c

08007e08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e0c:	4802      	ldr	r0, [pc, #8]	; (8007e18 <MX_USB_HOST_Process+0x10>)
 8007e0e:	f7fe faaf 	bl	8006370 <USBH_Process>
}
 8007e12:	bf00      	nop
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200002ac 	.word	0x200002ac

08007e1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d819      	bhi.n	8007e64 <USBH_UserProcess+0x48>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBH_UserProcess+0x1c>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007e55 	.word	0x08007e55
 8007e40:	08007e65 	.word	0x08007e65
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e4d 	.word	0x08007e4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <USBH_UserProcess+0x58>)
 8007e4e:	2203      	movs	r2, #3
 8007e50:	701a      	strb	r2, [r3, #0]
  break;
 8007e52:	e008      	b.n	8007e66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e54:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <USBH_UserProcess+0x58>)
 8007e56:	2202      	movs	r2, #2
 8007e58:	701a      	strb	r2, [r3, #0]
  break;
 8007e5a:	e004      	b.n	8007e66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <USBH_UserProcess+0x58>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
  break;
 8007e62:	e000      	b.n	8007e66 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000684 	.word	0x20000684

08007e78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08a      	sub	sp, #40	; 0x28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e80:	f107 0314 	add.w	r3, r7, #20
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	605a      	str	r2, [r3, #4]
 8007e8a:	609a      	str	r2, [r3, #8]
 8007e8c:	60da      	str	r2, [r3, #12]
 8007e8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e98:	d147      	bne.n	8007f2a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	4b25      	ldr	r3, [pc, #148]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	4a24      	ldr	r2, [pc, #144]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	4619      	mov	r1, r3
 8007eca:	481b      	ldr	r0, [pc, #108]	; (8007f38 <HAL_HCD_MspInit+0xc0>)
 8007ecc:	f7f9 f90a 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ed0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee6:	f107 0314 	add.w	r3, r7, #20
 8007eea:	4619      	mov	r1, r3
 8007eec:	4812      	ldr	r0, [pc, #72]	; (8007f38 <HAL_HCD_MspInit+0xc0>)
 8007eee:	f7f9 f8f9 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	4a0f      	ldr	r2, [pc, #60]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	6353      	str	r3, [r2, #52]	; 0x34
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	4a0b      	ldr	r2, [pc, #44]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_HCD_MspInit+0xbc>)
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	2043      	movs	r0, #67	; 0x43
 8007f20:	f7f9 f8b6 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f24:	2043      	movs	r0, #67	; 0x43
 8007f26:	f7f9 f8cf 	bl	80010c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800
 8007f38:	40020000 	.word	0x40020000

08007f3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fdef 	bl	8006b2e <USBH_LL_IncTimer>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fe27 	bl	8006bba <USBH_LL_Connect>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fe30 	bl	8006be8 <USBH_LL_Disconnect>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fde1 	bl	8006b82 <USBH_LL_PortEnabled>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fde1 	bl	8006b9e <USBH_LL_PortDisabled>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d12a      	bne.n	800804c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ff6:	4a18      	ldr	r2, [pc, #96]	; (8008058 <USBH_LL_Init+0x74>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a15      	ldr	r2, [pc, #84]	; (8008058 <USBH_LL_Init+0x74>)
 8008002:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <USBH_LL_Init+0x74>)
 8008008:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800800c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <USBH_LL_Init+0x74>)
 8008010:	2208      	movs	r2, #8
 8008012:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <USBH_LL_Init+0x74>)
 8008016:	2201      	movs	r2, #1
 8008018:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800801a:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <USBH_LL_Init+0x74>)
 800801c:	2200      	movs	r2, #0
 800801e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008020:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <USBH_LL_Init+0x74>)
 8008022:	2202      	movs	r2, #2
 8008024:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <USBH_LL_Init+0x74>)
 8008028:	2200      	movs	r2, #0
 800802a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800802c:	480a      	ldr	r0, [pc, #40]	; (8008058 <USBH_LL_Init+0x74>)
 800802e:	f7f9 f9f6 	bl	800141e <HAL_HCD_Init>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008038:	f7f8 fc9e 	bl	8000978 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800803c:	4806      	ldr	r0, [pc, #24]	; (8008058 <USBH_LL_Init+0x74>)
 800803e:	f7f9 fdda 	bl	8001bf6 <HAL_HCD_GetCurrentFrame>
 8008042:	4603      	mov	r3, r0
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fe fd62 	bl	8006b10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000688 	.word	0x20000688

0800805c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008072:	4618      	mov	r0, r3
 8008074:	f7f9 fd49 	bl	8001b0a <HAL_HCD_Start>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f95c 	bl	800833c <USBH_Get_USB_Status>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f9 fd51 	bl	8001b50 <HAL_HCD_Stop>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f941 	bl	800833c <USBH_Get_USB_Status>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080be:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080da:	4618      	mov	r0, r3
 80080dc:	f7f9 fd99 	bl	8001c12 <HAL_HCD_GetCurrentSpeed>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d00c      	beq.n	8008100 <USBH_LL_GetSpeed+0x38>
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d80d      	bhi.n	8008106 <USBH_LL_GetSpeed+0x3e>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <USBH_LL_GetSpeed+0x2c>
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d003      	beq.n	80080fa <USBH_LL_GetSpeed+0x32>
 80080f2:	e008      	b.n	8008106 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
    break;
 80080f8:	e008      	b.n	800810c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080fa:	2301      	movs	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
    break;
 80080fe:	e005      	b.n	800810c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008100:	2302      	movs	r3, #2
 8008102:	73fb      	strb	r3, [r7, #15]
    break;
 8008104:	e002      	b.n	800810c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008106:	2301      	movs	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
    break;
 800810a:	bf00      	nop
  }
  return  speed;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800812c:	4618      	mov	r0, r3
 800812e:	f7f9 fd2c 	bl	8001b8a <HAL_HCD_ResetPort>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f8ff 	bl	800833c <USBH_Get_USB_Status>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008142:	7bbb      	ldrb	r3, [r7, #14]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f7f9 fd33 	bl	8001bce <HAL_HCD_HC_GetXferCount>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008172:	b590      	push	{r4, r7, lr}
 8008174:	b089      	sub	sp, #36	; 0x24
 8008176:	af04      	add	r7, sp, #16
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	461a      	mov	r2, r3
 8008180:	4603      	mov	r3, r0
 8008182:	70fb      	strb	r3, [r7, #3]
 8008184:	460b      	mov	r3, r1
 8008186:	70bb      	strb	r3, [r7, #2]
 8008188:	4613      	mov	r3, r2
 800818a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800819a:	787c      	ldrb	r4, [r7, #1]
 800819c:	78ba      	ldrb	r2, [r7, #2]
 800819e:	78f9      	ldrb	r1, [r7, #3]
 80081a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4623      	mov	r3, r4
 80081b2:	f7f9 f996 	bl	80014e2 <HAL_HCD_HC_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f8bd 	bl	800833c <USBH_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd90      	pop	{r4, r7, pc}

080081d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f9 fa06 	bl	8001600 <HAL_HCD_HC_Halt>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f89e 	bl	800833c <USBH_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008204:	7bbb      	ldrb	r3, [r7, #14]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800820e:	b590      	push	{r4, r7, lr}
 8008210:	b089      	sub	sp, #36	; 0x24
 8008212:	af04      	add	r7, sp, #16
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	4608      	mov	r0, r1
 8008218:	4611      	mov	r1, r2
 800821a:	461a      	mov	r2, r3
 800821c:	4603      	mov	r3, r0
 800821e:	70fb      	strb	r3, [r7, #3]
 8008220:	460b      	mov	r3, r1
 8008222:	70bb      	strb	r3, [r7, #2]
 8008224:	4613      	mov	r3, r2
 8008226:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008236:	787c      	ldrb	r4, [r7, #1]
 8008238:	78ba      	ldrb	r2, [r7, #2]
 800823a:	78f9      	ldrb	r1, [r7, #3]
 800823c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4623      	mov	r3, r4
 8008252:	f7f9 f9f9 	bl	8001648 <HAL_HCD_HC_SubmitRequest>
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f86d 	bl	800833c <USBH_Get_USB_Status>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008266:	7bbb      	ldrb	r3, [r7, #14]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	bd90      	pop	{r4, r7, pc}

08008270 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7f9 fc8d 	bl	8001ba6 <HAL_HCD_HC_GetURBState>
 800828c:	4603      	mov	r3, r0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d103      	bne.n	80082b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f870 	bl	8008394 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082b4:	20c8      	movs	r0, #200	; 0xc8
 80082b6:	f7f8 fe0f 	bl	8000ed8 <HAL_Delay>
  return USBH_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
 80082d0:	4613      	mov	r3, r2
 80082d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	212c      	movs	r1, #44	; 0x2c
 80082e2:	fb01 f303 	mul.w	r3, r1, r3
 80082e6:	4413      	add	r3, r2
 80082e8:	333b      	adds	r3, #59	; 0x3b
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	212c      	movs	r1, #44	; 0x2c
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	3354      	adds	r3, #84	; 0x54
 80082fe:	78ba      	ldrb	r2, [r7, #2]
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	e008      	b.n	8008316 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	212c      	movs	r1, #44	; 0x2c
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	3355      	adds	r3, #85	; 0x55
 8008312:	78ba      	ldrb	r2, [r7, #2]
 8008314:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7f8 fdd3 	bl	8000ed8 <HAL_Delay>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	2b03      	cmp	r3, #3
 800834e:	d817      	bhi.n	8008380 <USBH_Get_USB_Status+0x44>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <USBH_Get_USB_Status+0x1c>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008369 	.word	0x08008369
 800835c:	0800836f 	.word	0x0800836f
 8008360:	08008375 	.word	0x08008375
 8008364:	0800837b 	.word	0x0800837b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
    break;
 800836c:	e00b      	b.n	8008386 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	73fb      	strb	r3, [r7, #15]
    break;
 8008372:	e008      	b.n	8008386 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
    break;
 8008378:	e005      	b.n	8008386 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800837a:	2302      	movs	r3, #2
 800837c:	73fb      	strb	r3, [r7, #15]
    break;
 800837e:	e002      	b.n	8008386 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008380:	2302      	movs	r3, #2
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	bf00      	nop
  }
  return usb_status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
 80083ac:	e001      	b.n	80083b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083ae:	2301      	movs	r3, #1
 80083b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	461a      	mov	r2, r3
 80083b6:	2101      	movs	r1, #1
 80083b8:	4803      	ldr	r0, [pc, #12]	; (80083c8 <MX_DriverVbusFS+0x34>)
 80083ba:	f7f9 f817 	bl	80013ec <HAL_GPIO_WritePin>
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40020800 	.word	0x40020800

080083cc <malloc>:
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <malloc+0xc>)
 80083ce:	4601      	mov	r1, r0
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f000 b82b 	b.w	800842c <_malloc_r>
 80083d6:	bf00      	nop
 80083d8:	20000078 	.word	0x20000078

080083dc <free>:
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <free+0xc>)
 80083de:	4601      	mov	r1, r0
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	f000 b8ed 	b.w	80085c0 <_free_r>
 80083e6:	bf00      	nop
 80083e8:	20000078 	.word	0x20000078

080083ec <sbrk_aligned>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0e      	ldr	r6, [pc, #56]	; (8008428 <sbrk_aligned+0x3c>)
 80083f0:	460c      	mov	r4, r1
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	4605      	mov	r5, r0
 80083f6:	b911      	cbnz	r1, 80083fe <sbrk_aligned+0x12>
 80083f8:	f000 f8ac 	bl	8008554 <_sbrk_r>
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4621      	mov	r1, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 f8a7 	bl	8008554 <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d00a      	beq.n	8008420 <sbrk_aligned+0x34>
 800840a:	1cc4      	adds	r4, r0, #3
 800840c:	f024 0403 	bic.w	r4, r4, #3
 8008410:	42a0      	cmp	r0, r4
 8008412:	d007      	beq.n	8008424 <sbrk_aligned+0x38>
 8008414:	1a21      	subs	r1, r4, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f89c 	bl	8008554 <_sbrk_r>
 800841c:	3001      	adds	r0, #1
 800841e:	d101      	bne.n	8008424 <sbrk_aligned+0x38>
 8008420:	f04f 34ff 	mov.w	r4, #4294967295
 8008424:	4620      	mov	r0, r4
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	20000990 	.word	0x20000990

0800842c <_malloc_r>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	1ccd      	adds	r5, r1, #3
 8008432:	f025 0503 	bic.w	r5, r5, #3
 8008436:	3508      	adds	r5, #8
 8008438:	2d0c      	cmp	r5, #12
 800843a:	bf38      	it	cc
 800843c:	250c      	movcc	r5, #12
 800843e:	2d00      	cmp	r5, #0
 8008440:	4607      	mov	r7, r0
 8008442:	db01      	blt.n	8008448 <_malloc_r+0x1c>
 8008444:	42a9      	cmp	r1, r5
 8008446:	d905      	bls.n	8008454 <_malloc_r+0x28>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	2600      	movs	r6, #0
 800844e:	4630      	mov	r0, r6
 8008450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008528 <_malloc_r+0xfc>
 8008458:	f000 f868 	bl	800852c <__malloc_lock>
 800845c:	f8d8 3000 	ldr.w	r3, [r8]
 8008460:	461c      	mov	r4, r3
 8008462:	bb5c      	cbnz	r4, 80084bc <_malloc_r+0x90>
 8008464:	4629      	mov	r1, r5
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ffc0 	bl	80083ec <sbrk_aligned>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	4604      	mov	r4, r0
 8008470:	d155      	bne.n	800851e <_malloc_r+0xf2>
 8008472:	f8d8 4000 	ldr.w	r4, [r8]
 8008476:	4626      	mov	r6, r4
 8008478:	2e00      	cmp	r6, #0
 800847a:	d145      	bne.n	8008508 <_malloc_r+0xdc>
 800847c:	2c00      	cmp	r4, #0
 800847e:	d048      	beq.n	8008512 <_malloc_r+0xe6>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	4631      	mov	r1, r6
 8008484:	4638      	mov	r0, r7
 8008486:	eb04 0903 	add.w	r9, r4, r3
 800848a:	f000 f863 	bl	8008554 <_sbrk_r>
 800848e:	4581      	cmp	r9, r0
 8008490:	d13f      	bne.n	8008512 <_malloc_r+0xe6>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	1a6d      	subs	r5, r5, r1
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa7 	bl	80083ec <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d037      	beq.n	8008512 <_malloc_r+0xe6>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d038      	beq.n	8008522 <_malloc_r+0xf6>
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	42a2      	cmp	r2, r4
 80084b4:	d12b      	bne.n	800850e <_malloc_r+0xe2>
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	e00f      	b.n	80084dc <_malloc_r+0xb0>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	1b52      	subs	r2, r2, r5
 80084c0:	d41f      	bmi.n	8008502 <_malloc_r+0xd6>
 80084c2:	2a0b      	cmp	r2, #11
 80084c4:	d917      	bls.n	80084f6 <_malloc_r+0xca>
 80084c6:	1961      	adds	r1, r4, r5
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	6059      	strne	r1, [r3, #4]
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	bf08      	it	eq
 80084d4:	f8c8 1000 	streq.w	r1, [r8]
 80084d8:	5162      	str	r2, [r4, r5]
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	4638      	mov	r0, r7
 80084de:	f104 060b 	add.w	r6, r4, #11
 80084e2:	f000 f829 	bl	8008538 <__malloc_unlock>
 80084e6:	f026 0607 	bic.w	r6, r6, #7
 80084ea:	1d23      	adds	r3, r4, #4
 80084ec:	1af2      	subs	r2, r6, r3
 80084ee:	d0ae      	beq.n	800844e <_malloc_r+0x22>
 80084f0:	1b9b      	subs	r3, r3, r6
 80084f2:	50a3      	str	r3, [r4, r2]
 80084f4:	e7ab      	b.n	800844e <_malloc_r+0x22>
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	6862      	ldr	r2, [r4, #4]
 80084fa:	d1dd      	bne.n	80084b8 <_malloc_r+0x8c>
 80084fc:	f8c8 2000 	str.w	r2, [r8]
 8008500:	e7ec      	b.n	80084dc <_malloc_r+0xb0>
 8008502:	4623      	mov	r3, r4
 8008504:	6864      	ldr	r4, [r4, #4]
 8008506:	e7ac      	b.n	8008462 <_malloc_r+0x36>
 8008508:	4634      	mov	r4, r6
 800850a:	6876      	ldr	r6, [r6, #4]
 800850c:	e7b4      	b.n	8008478 <_malloc_r+0x4c>
 800850e:	4613      	mov	r3, r2
 8008510:	e7cc      	b.n	80084ac <_malloc_r+0x80>
 8008512:	230c      	movs	r3, #12
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4638      	mov	r0, r7
 8008518:	f000 f80e 	bl	8008538 <__malloc_unlock>
 800851c:	e797      	b.n	800844e <_malloc_r+0x22>
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	e7dc      	b.n	80084dc <_malloc_r+0xb0>
 8008522:	605b      	str	r3, [r3, #4]
 8008524:	deff      	udf	#255	; 0xff
 8008526:	bf00      	nop
 8008528:	2000098c 	.word	0x2000098c

0800852c <__malloc_lock>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__malloc_lock+0x8>)
 800852e:	f000 b845 	b.w	80085bc <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	20000ad0 	.word	0x20000ad0

08008538 <__malloc_unlock>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__malloc_unlock+0x8>)
 800853a:	f000 b840 	b.w	80085be <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	20000ad0 	.word	0x20000ad0

08008544 <memset>:
 8008544:	4402      	add	r2, r0
 8008546:	4603      	mov	r3, r0
 8008548:	4293      	cmp	r3, r2
 800854a:	d100      	bne.n	800854e <memset+0xa>
 800854c:	4770      	bx	lr
 800854e:	f803 1b01 	strb.w	r1, [r3], #1
 8008552:	e7f9      	b.n	8008548 <memset+0x4>

08008554 <_sbrk_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_sbrk_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f000 f87a 	bl	8008658 <_sbrk>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_sbrk_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_sbrk_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	20000acc 	.word	0x20000acc

08008574 <__libc_init_array>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4d0d      	ldr	r5, [pc, #52]	; (80085ac <__libc_init_array+0x38>)
 8008578:	4c0d      	ldr	r4, [pc, #52]	; (80085b0 <__libc_init_array+0x3c>)
 800857a:	1b64      	subs	r4, r4, r5
 800857c:	10a4      	asrs	r4, r4, #2
 800857e:	2600      	movs	r6, #0
 8008580:	42a6      	cmp	r6, r4
 8008582:	d109      	bne.n	8008598 <__libc_init_array+0x24>
 8008584:	4d0b      	ldr	r5, [pc, #44]	; (80085b4 <__libc_init_array+0x40>)
 8008586:	4c0c      	ldr	r4, [pc, #48]	; (80085b8 <__libc_init_array+0x44>)
 8008588:	f000 f874 	bl	8008674 <_init>
 800858c:	1b64      	subs	r4, r4, r5
 800858e:	10a4      	asrs	r4, r4, #2
 8008590:	2600      	movs	r6, #0
 8008592:	42a6      	cmp	r6, r4
 8008594:	d105      	bne.n	80085a2 <__libc_init_array+0x2e>
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	f855 3b04 	ldr.w	r3, [r5], #4
 800859c:	4798      	blx	r3
 800859e:	3601      	adds	r6, #1
 80085a0:	e7ee      	b.n	8008580 <__libc_init_array+0xc>
 80085a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a6:	4798      	blx	r3
 80085a8:	3601      	adds	r6, #1
 80085aa:	e7f2      	b.n	8008592 <__libc_init_array+0x1e>
 80085ac:	080086b0 	.word	0x080086b0
 80085b0:	080086b0 	.word	0x080086b0
 80085b4:	080086b0 	.word	0x080086b0
 80085b8:	080086b4 	.word	0x080086b4

080085bc <__retarget_lock_acquire_recursive>:
 80085bc:	4770      	bx	lr

080085be <__retarget_lock_release_recursive>:
 80085be:	4770      	bx	lr

080085c0 <_free_r>:
 80085c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c2:	2900      	cmp	r1, #0
 80085c4:	d044      	beq.n	8008650 <_free_r+0x90>
 80085c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f1a1 0404 	sub.w	r4, r1, #4
 80085d2:	bfb8      	it	lt
 80085d4:	18e4      	addlt	r4, r4, r3
 80085d6:	f7ff ffa9 	bl	800852c <__malloc_lock>
 80085da:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <_free_r+0x94>)
 80085dc:	9801      	ldr	r0, [sp, #4]
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	b933      	cbnz	r3, 80085f0 <_free_r+0x30>
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	b003      	add	sp, #12
 80085e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ec:	f7ff bfa4 	b.w	8008538 <__malloc_unlock>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d908      	bls.n	8008606 <_free_r+0x46>
 80085f4:	6825      	ldr	r5, [r4, #0]
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	428b      	cmp	r3, r1
 80085fa:	bf01      	itttt	eq
 80085fc:	6819      	ldreq	r1, [r3, #0]
 80085fe:	685b      	ldreq	r3, [r3, #4]
 8008600:	1949      	addeq	r1, r1, r5
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	e7ed      	b.n	80085e2 <_free_r+0x22>
 8008606:	461a      	mov	r2, r3
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	b10b      	cbz	r3, 8008610 <_free_r+0x50>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d9fa      	bls.n	8008606 <_free_r+0x46>
 8008610:	6811      	ldr	r1, [r2, #0]
 8008612:	1855      	adds	r5, r2, r1
 8008614:	42a5      	cmp	r5, r4
 8008616:	d10b      	bne.n	8008630 <_free_r+0x70>
 8008618:	6824      	ldr	r4, [r4, #0]
 800861a:	4421      	add	r1, r4
 800861c:	1854      	adds	r4, r2, r1
 800861e:	42a3      	cmp	r3, r4
 8008620:	6011      	str	r1, [r2, #0]
 8008622:	d1e0      	bne.n	80085e6 <_free_r+0x26>
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	6053      	str	r3, [r2, #4]
 800862a:	440c      	add	r4, r1
 800862c:	6014      	str	r4, [r2, #0]
 800862e:	e7da      	b.n	80085e6 <_free_r+0x26>
 8008630:	d902      	bls.n	8008638 <_free_r+0x78>
 8008632:	230c      	movs	r3, #12
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	e7d6      	b.n	80085e6 <_free_r+0x26>
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1961      	adds	r1, r4, r5
 800863c:	428b      	cmp	r3, r1
 800863e:	bf04      	itt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	bf04      	itt	eq
 8008648:	1949      	addeq	r1, r1, r5
 800864a:	6021      	streq	r1, [r4, #0]
 800864c:	6054      	str	r4, [r2, #4]
 800864e:	e7ca      	b.n	80085e6 <_free_r+0x26>
 8008650:	b003      	add	sp, #12
 8008652:	bd30      	pop	{r4, r5, pc}
 8008654:	2000098c 	.word	0x2000098c

08008658 <_sbrk>:
 8008658:	4a04      	ldr	r2, [pc, #16]	; (800866c <_sbrk+0x14>)
 800865a:	6811      	ldr	r1, [r2, #0]
 800865c:	4603      	mov	r3, r0
 800865e:	b909      	cbnz	r1, 8008664 <_sbrk+0xc>
 8008660:	4903      	ldr	r1, [pc, #12]	; (8008670 <_sbrk+0x18>)
 8008662:	6011      	str	r1, [r2, #0]
 8008664:	6810      	ldr	r0, [r2, #0]
 8008666:	4403      	add	r3, r0
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	4770      	bx	lr
 800866c:	20000ad4 	.word	0x20000ad4
 8008670:	20000ad8 	.word	0x20000ad8

08008674 <_init>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr

08008680 <_fini>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr
